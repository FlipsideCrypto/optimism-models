{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.1", "generated_at": "2022-09-07T16:24:46.442643Z", "invocation_id": "f8351501-9fb7-4559-9864-7a18d56462ed", "env": {}, "project_id": "91d407e3adfdcb3a5eed8f3b2eccc0b1", "user_id": "221cbce4-e540-4766-bb16-eed2d6092c13", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.optimism_models.bronze__blocks": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        'prod',\n        'optimism_blocks'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.optimism_models.prod.optimism_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "bronze", "fqn": ["optimism_models", "bronze", "bronze__blocks"], "unique_id": "model.optimism_models.bronze__blocks", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "2a3c8412a8ed06edd17dee818a200f9e96b466081d791effffe30b25e842dd7e"}, "tags": [], "refs": [], "sources": [["prod", "optimism_blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/bronze/bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1662493240.145695, "compiled_sql": "\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.optimism_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.bronze.blocks"}, "model.optimism_models.bronze__transactions": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        'prod',\n        'optimism_txs'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.optimism_models.prod.optimism_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "bronze", "fqn": ["optimism_models", "bronze", "bronze__transactions"], "unique_id": "model.optimism_models.bronze__transactions", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "1c277097b349582350caaeae1de1151890db58234add3c610ef59c4054c97f46"}, "tags": [], "refs": [], "sources": [["prod", "optimism_txs"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/bronze/bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1662493240.148538, "compiled_sql": "\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.optimism_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.bronze.transactions"}, "model.optimism_models.silver__quixotic_sales": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        origin_to_address,\n        origin_from_address,\n        origin_function_signature,\n        event_index,\n        tx_hash,\n        'sale' AS event_type,\n        contract_address AS platform_address,\n        'quixotic' AS platform_name,\n        _inserted_timestamp,\n        _log_id,\n        topics [0] :: STRING AS function_type,\n        CASE\n            WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}')END AS segmented_data,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40))\n            END AS seller_address,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40))\n            END AS nft_address,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN ethereum.public.udf_hex_to_int(\n                    topics [3] :: STRING\n                )\n            END AS tokenID,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN CONCAT(\n                    '0x',\n                    SUBSTR(\n                        segmented_data [0] :: STRING :: STRING,\n                        25,\n                        40\n                    )\n                )\n            END AS buyer_address,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN ethereum.public.udf_hex_to_int(\n                    segmented_data [1] :: STRING\n                ) / pow(\n                    10,\n                    18\n                )\n            END AS price\n            FROM\n                {{ ref('silver__logs') }}\n            WHERE\n                (\n                    topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8'\n                    OR (\n                        topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n                        AND contract_address = '0x4200000000000000000000000000000000000042'\n                    )\n                )\n                AND tx_status = 'SUCCESS'\n                AND event_removed = 'false'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nop_buys AS (\n    SELECT\n        DISTINCT tx_hash AS op_tx\n    FROM\n        base\n    WHERE\n        function_type = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\ncurrency_type AS (\n    SELECT\n        A.*,\n        CASE\n            WHEN op_tx IS NULL THEN 'ETH'\n            ELSE 'OP'\n        END AS currency_symbol\n    FROM\n        base A\n        LEFT JOIN op_buys\n        ON tx_hash = op_tx\n    WHERE\n        function_type = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8'\n),\nhourly_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN symbol = 'WETH' THEN 'ETH'\n            ELSE symbol\n        END AS symbol,\n        token_address,\n        price AS token_price\n    FROM\n        {{ ref('silver__prices') }}\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                currency_type\n        )\n        AND symbol IN (\n            'OP',\n            'WETH'\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    tokenId,\n    currency_symbol,\n    CASE\n        WHEN currency_symbol = 'ETH' THEN 'ETH'\n        WHEN currency_symbol = 'OP' THEN token_address\n    END AS currency_address,\n    price,\n    ROUND(\n        token_price * price,\n        2\n    ) AS price_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    _log_id,\n    _inserted_timestamp\nFROM\n    currency_type\n    LEFT JOIN hourly_prices\n    ON DATE_TRUNC(\n        'HOUR',\n        block_timestamp\n    ) = HOUR\n    AND symbol = currency_symbol\nWHERE\n    nft_address <> '0xbe81eabdbd437cba43e4c1c330c63022772c2520' -- funky address throwing sales off with some weird events - ideally this is filtered to\n    -- specific exchange addresses but i cant find common ones\n    qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.silver__logs", "model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "quixotic", "silver__quixotic_sales"], "unique_id": "model.optimism_models.silver__quixotic_sales", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "quixotic/silver__quixotic_sales.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.sql", "name": "silver__quixotic_sales", "alias": "quixotic_sales", "checksum": {"name": "sha256", "checksum": "8a49e044172b1a4bfd271b92932b7881a8aa455f354da4ce2d8fe51e4e8cbb34"}, "tags": [], "refs": [["silver__logs"], ["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_NAME": {"name": "PLATFORM_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER_ADDRESS": {"name": "SELLER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BUYER_ADDRESS": {"name": "BUYER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_ADDRESS": {"name": "CURRENCY_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/quixotic/silver__quixotic_sales.yml", "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662493240.817537, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        origin_to_address,\n        origin_from_address,\n        origin_function_signature,\n        event_index,\n        tx_hash,\n        'sale' AS event_type,\n        contract_address AS platform_address,\n        'quixotic' AS platform_name,\n        _inserted_timestamp,\n        _log_id,\n        topics [0] :: STRING AS function_type,\n        CASE\n            WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}')END AS segmented_data,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40))\n            END AS seller_address,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40))\n            END AS nft_address,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN ethereum.public.udf_hex_to_int(\n                    topics [3] :: STRING\n                )\n            END AS tokenID,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN CONCAT(\n                    '0x',\n                    SUBSTR(\n                        segmented_data [0] :: STRING :: STRING,\n                        25,\n                        40\n                    )\n                )\n            END AS buyer_address,\n            CASE\n                WHEN topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8' THEN ethereum.public.udf_hex_to_int(\n                    segmented_data [1] :: STRING\n                ) / pow(\n                    10,\n                    18\n                )\n            END AS price\n            FROM\n                OPTIMISM_DEV.silver.logs\n            WHERE\n                (\n                    topics [0] :: STRING = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8'\n                    OR (\n                        topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n                        AND contract_address = '0x4200000000000000000000000000000000000042'\n                    )\n                )\n                AND tx_status = 'SUCCESS'\n                AND event_removed = 'false'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.quixotic_sales\n)\n\n),\nop_buys AS (\n    SELECT\n        DISTINCT tx_hash AS op_tx\n    FROM\n        base\n    WHERE\n        function_type = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\ncurrency_type AS (\n    SELECT\n        A.*,\n        CASE\n            WHEN op_tx IS NULL THEN 'ETH'\n            ELSE 'OP'\n        END AS currency_symbol\n    FROM\n        base A\n        LEFT JOIN op_buys\n        ON tx_hash = op_tx\n    WHERE\n        function_type = '0x70ba0d31158674eea8365d0f7b9ac70e552cc28b8bb848664e4feb939c6578f8'\n),\nhourly_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN symbol = 'WETH' THEN 'ETH'\n            ELSE symbol\n        END AS symbol,\n        token_address,\n        price AS token_price\n    FROM\n        OPTIMISM_DEV.silver.prices\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                currency_type\n        )\n        AND symbol IN (\n            'OP',\n            'WETH'\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    tokenId,\n    currency_symbol,\n    CASE\n        WHEN currency_symbol = 'ETH' THEN 'ETH'\n        WHEN currency_symbol = 'OP' THEN token_address\n    END AS currency_address,\n    price,\n    ROUND(\n        token_price * price,\n        2\n    ) AS price_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    _log_id,\n    _inserted_timestamp\nFROM\n    currency_type\n    LEFT JOIN hourly_prices\n    ON DATE_TRUNC(\n        'HOUR',\n        block_timestamp\n    ) = HOUR\n    AND symbol = currency_symbol\nWHERE\n    nft_address <> '0xbe81eabdbd437cba43e4c1c330c63022772c2520' -- funky address throwing sales off with some weird events - ideally this is filtered to\n    -- specific exchange addresses but i cant find common ones\n    qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.quixotic_sales"}, "model.optimism_models.silver__transfers": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH logs AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_name,\n        event_index,\n        event_inputs,\n        topics,\n        DATA,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        tx_status = 'SUCCESS'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntransfers AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        event_inputs :from :: STRING AS from_address,\n        event_inputs :to :: STRING AS to_address,\n        event_inputs :value :: FLOAT AS raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        logs\n    WHERE\n        event_name = 'Transfer'\n        AND raw_amount IS NOT NULL\n),\nfind_missing_events AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        CONCAT('0x', SUBSTR(topics [1], 27, 40)) :: STRING AS from_address,\n        CONCAT('0x', SUBSTR(topics [2], 27, 40)) :: STRING AS to_address,\n        COALESCE(udf_hex_to_int(topics [3] :: STRING), udf_hex_to_int(SUBSTR(DATA, 3, 64))) :: FLOAT AS raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        logs\n    WHERE\n        event_name IS NULL\n        AND contract_address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                transfers\n        )\n        AND topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\nall_transfers AS (\n    SELECT\n        _log_id,\n        tx_hash,\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        transfers\n    UNION ALL\n    SELECT\n        _log_id,\n        tx_hash,\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        find_missing_events\n)\nSELECT\n    _log_id,\n    block_number,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    block_timestamp,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _inserted_timestamp,\n    event_index\nFROM\n    all_transfers qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["_inserted_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver", "silver__transfers"], "unique_id": "model.optimism_models.silver__transfers", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "2e196e01b50e68f7394eac7dde767d4c13754121c892e681fb75ed17b78b0810"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_AMOUNT": {"name": "RAW_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/silver/silver__transfers.yml", "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1662493241.6051142, "compiled_sql": "\n\nWITH logs AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_name,\n        event_index,\n        event_inputs,\n        topics,\n        DATA,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        tx_status = 'SUCCESS'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        OPTIMISM_DEV.silver.transfers\n)\n\n),\ntransfers AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        event_inputs :from :: STRING AS from_address,\n        event_inputs :to :: STRING AS to_address,\n        event_inputs :value :: FLOAT AS raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        logs\n    WHERE\n        event_name = 'Transfer'\n        AND raw_amount IS NOT NULL\n),\nfind_missing_events AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        CONCAT('0x', SUBSTR(topics [1], 27, 40)) :: STRING AS from_address,\n        CONCAT('0x', SUBSTR(topics [2], 27, 40)) :: STRING AS to_address,\n        COALESCE(udf_hex_to_int(topics [3] :: STRING), udf_hex_to_int(SUBSTR(DATA, 3, 64))) :: FLOAT AS raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        logs\n    WHERE\n        event_name IS NULL\n        AND contract_address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                transfers\n        )\n        AND topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\nall_transfers AS (\n    SELECT\n        _log_id,\n        tx_hash,\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        transfers\n    UNION ALL\n    SELECT\n        _log_id,\n        tx_hash,\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        find_missing_events\n)\nSELECT\n    _log_id,\n    block_number,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    block_timestamp,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _inserted_timestamp,\n    event_index\nFROM\n    all_transfers qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.transfers"}, "model.optimism_models.silver__delegations": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"tx_hash\",\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nSELECT \n    block_number, \n    block_timestamp,\n    tx_hash,\n    status, \n    from_address AS delegator,\n    CASE WHEN tx_json:receipt:logs[0]:decoded:inputs:fromDelegate :: STRING = '0x0000000000000000000000000000000000000000' AND tx_json :receipt :logs[0] :decoded :inputs :toDelegate :: STRING <> from_address THEN \n        'First Time Delegator'\n    WHEN tx_json:receipt:logs[0]:decoded:inputs:fromDelegate::string = '0x0000000000000000000000000000000000000000' AND delegator = tx_json :receipt :logs[0] :decoded :inputs :toDelegate :: STRING THEN \n        'First Time Delegator - Self Delegation'\n    WHEN delegator = tx_json :receipt :logs[0] :decoded :inputs :toDelegate :: STRING THEN \n        'Self-Delegation'\n    ELSE \n        'Re-Delegation' \n    END AS delegation_type, \n    CASE WHEN delegation_type = 'Re-Delegation' THEN \n        CONCAT('0x', SUBSTR(tx_json :receipt :logs[0] :topics[1] :: STRING, 27, 40)) \n    ELSE \n        tx_json :receipt :logs[0] :decoded :inputs :toDelegate :: STRING\n    END AS to_delegate, \n    CASE WHEN delegation_type = 'Re-Delegation' THEN \n        CONCAT('0x', SUBSTR(tx_json :receipt :logs[0] :topics[2] :: STRING, 27, 40))\n    ELSE \n        NULL \n    END AS from_delegate, \n    _inserted_timestamp\n  FROM \n    {{ ref('silver__transactions') }}\n  WHERE \n    origin_function_signature = '0x5c19a95c'\n    AND to_address = '0x4200000000000000000000000000000000000042'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_hash", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver", "silver__delegations"], "unique_id": "model.optimism_models.silver__delegations", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver/silver__delegations.sql", "original_file_path": "models/silver/silver__delegations.sql", "name": "silver__delegations", "alias": "delegations", "checksum": {"name": "sha256", "checksum": "b21928c7bd549dd6a0b0d4618895465a54a531d5ca8020baee747908ea860534"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATOR": {"name": "DELEGATOR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_DELEGATE": {"name": "TO_DELEGATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_DELEGATE": {"name": "FROM_DELEGATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATION_TYPE": {"name": "DELEGATION_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/silver/silver__delegations.yml", "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "tx_hash", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662493241.01211, "compiled_sql": "\n\nSELECT \n    block_number, \n    block_timestamp,\n    tx_hash,\n    status, \n    from_address AS delegator,\n    CASE WHEN tx_json:receipt:logs[0]:decoded:inputs:fromDelegate :: STRING = '0x0000000000000000000000000000000000000000' AND tx_json :receipt :logs[0] :decoded :inputs :toDelegate :: STRING <> from_address THEN \n        'First Time Delegator'\n    WHEN tx_json:receipt:logs[0]:decoded:inputs:fromDelegate::string = '0x0000000000000000000000000000000000000000' AND delegator = tx_json :receipt :logs[0] :decoded :inputs :toDelegate :: STRING THEN \n        'First Time Delegator - Self Delegation'\n    WHEN delegator = tx_json :receipt :logs[0] :decoded :inputs :toDelegate :: STRING THEN \n        'Self-Delegation'\n    ELSE \n        'Re-Delegation' \n    END AS delegation_type, \n    CASE WHEN delegation_type = 'Re-Delegation' THEN \n        CONCAT('0x', SUBSTR(tx_json :receipt :logs[0] :topics[1] :: STRING, 27, 40)) \n    ELSE \n        tx_json :receipt :logs[0] :decoded :inputs :toDelegate :: STRING\n    END AS to_delegate, \n    CASE WHEN delegation_type = 'Re-Delegation' THEN \n        CONCAT('0x', SUBSTR(tx_json :receipt :logs[0] :topics[2] :: STRING, 27, 40))\n    ELSE \n        NULL \n    END AS from_delegate, \n    _inserted_timestamp\n  FROM \n    OPTIMISM_DEV.silver.transactions\n  WHERE \n    origin_function_signature = '0x5c19a95c'\n    AND to_address = '0x4200000000000000000000000000000000000042'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        OPTIMISM_DEV.silver.delegations\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.delegations"}, "model.optimism_models.silver__logs": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"_log_id\",\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base_txs AS (\n\n    SELECT\n        record_id,\n        tx_id,\n        tx_block_index,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n),\nlogs_raw AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id AS tx_hash,\n        tx :receipt :logs AS full_logs,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        _inserted_timestamp:: TIMESTAMP as _inserted_timestamp,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        SUBSTR(\n            tx :input :: STRING,\n            1,\n            10\n        ) AS origin_function_signature,\n        tx :from :: STRING AS origin_from_address,\n        tx :to :: STRING AS origin_to_address\n    FROM\n        base_txs\n),\nlogs AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_status,\n        ingested_at,\n        _inserted_timestamp,\n        udf_hex_to_int(\n            VALUE :logIndex :: STRING\n        ) :: INTEGER AS event_index,\n        VALUE :address :: STRING AS contract_address,\n        VALUE :decoded :contractName :: STRING AS contract_name,\n        VALUE :decoded :eventName :: STRING AS event_name,\n        VALUE :decoded :inputs :: OBJECT AS event_inputs,\n        VALUE :topics AS topics,\n        VALUE :data :: STRING AS DATA,\n        VALUE :removed :: STRING AS event_removed\n    FROM\n        logs_raw,\n        LATERAL FLATTEN (\n            input => full_logs\n        )\n)\nSELECT\n    concat_ws(\n        '-',\n        tx_hash,\n        event_index\n    ) AS _log_id,\n    block_id AS block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    ingested_at,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _inserted_timestamp\nFROM\n    logs qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver", "silver__logs"], "unique_id": "model.optimism_models.silver__logs", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver/silver__logs.sql", "original_file_path": "models/silver/silver__logs.sql", "name": "silver__logs", "alias": "logs", "checksum": {"name": "sha256", "checksum": "4c6edd3a149f1f8046c6eddc8cc99db263cf56560b42ddd5d315f68915f14cf3"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INPUTS": {"name": "EVENT_INPUTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOPICS": {"name": "TOPICS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_REMOVED": {"name": "EVENT_REMOVED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/silver/silver__logs.yml", "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662493241.113398, "compiled_sql": "\n\nWITH base_txs AS (\n\n    SELECT\n        record_id,\n        tx_id,\n        tx_block_index,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.bronze.transactions\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            OPTIMISM_DEV.silver.logs\n    )\n\n),\nlogs_raw AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id AS tx_hash,\n        tx :receipt :logs AS full_logs,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        _inserted_timestamp:: TIMESTAMP as _inserted_timestamp,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        SUBSTR(\n            tx :input :: STRING,\n            1,\n            10\n        ) AS origin_function_signature,\n        tx :from :: STRING AS origin_from_address,\n        tx :to :: STRING AS origin_to_address\n    FROM\n        base_txs\n),\nlogs AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_status,\n        ingested_at,\n        _inserted_timestamp,\n        udf_hex_to_int(\n            VALUE :logIndex :: STRING\n        ) :: INTEGER AS event_index,\n        VALUE :address :: STRING AS contract_address,\n        VALUE :decoded :contractName :: STRING AS contract_name,\n        VALUE :decoded :eventName :: STRING AS event_name,\n        VALUE :decoded :inputs :: OBJECT AS event_inputs,\n        VALUE :topics AS topics,\n        VALUE :data :: STRING AS DATA,\n        VALUE :removed :: STRING AS event_removed\n    FROM\n        logs_raw,\n        LATERAL FLATTEN (\n            input => full_logs\n        )\n)\nSELECT\n    concat_ws(\n        '-',\n        tx_hash,\n        event_index\n    ) AS _log_id,\n    block_id AS block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    ingested_at,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _inserted_timestamp\nFROM\n    logs qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.logs"}, "model.optimism_models.silver__traces": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_call_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH new_blocks AS (\n\n    SELECT\n        block_id\n    FROM\n        {{ ref('bronze__blocks') }}\n    WHERE\n        tx_count > 0\n\n{% if is_incremental() %}\nAND block_id NOT IN (\n    SELECT\n        DISTINCT block_number\n    FROM\n        {{ this }}\n)\n{% endif %}\nORDER BY\n    _inserted_timestamp DESC\nLIMIT\n    500000\n), traces_txs AS (\n    SELECT\n        *\n    FROM\n        {{ ref('bronze__transactions') }}\n    WHERE\n        block_id IN (\n            SELECT\n                block_id\n            FROM\n                new_blocks\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1\n),\nbase_table AS (\n    SELECT\n        CASE\n            WHEN POSITION(\n                '.',\n                path :: STRING\n            ) > 0 THEN REPLACE(\n                REPLACE(\n                    path :: STRING,\n                    SUBSTR(path :: STRING, len(path :: STRING) - POSITION('.', REVERSE(path :: STRING)) + 1, POSITION('.', REVERSE(path :: STRING))),\n                    ''\n                ),\n                '.',\n                '__'\n            )\n            ELSE '__'\n        END AS id,\n        OBJECT_AGG(\n            DISTINCT key,\n            VALUE\n        ) AS DATA,\n        txs.tx_id AS tx_hash,\n        txs.block_id AS block_number,\n        txs.block_timestamp AS block_timestamp,\n        CASE\n            WHEN txs.tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        txs.ingested_at AS ingested_at,\n        txs._inserted_timestamp as _inserted_timestamp\n    FROM\n        traces_txs txs,\n        TABLE(\n            FLATTEN(\n                input => PARSE_JSON(\n                    txs.tx :traces\n                ),\n                recursive => TRUE\n            )\n        ) f\n    WHERE\n        f.index IS NULL\n        AND f.key != 'calls'\n    GROUP BY\n        tx_hash,\n        id,\n        block_number,\n        block_timestamp,\n        _inserted_timestamp,\n        ingested_at,\n        tx_status\n),\nflattened_traces AS (\n    SELECT\n        DATA :from :: STRING AS from_address,\n        udf_hex_to_int(\n            DATA :gas :: STRING\n        ) AS gas,\n        udf_hex_to_int(\n            DATA :gasUsed :: STRING\n        ) AS gas_used,\n        DATA :input :: STRING AS input,\n        DATA :output :: STRING AS output,\n        DATA :time :: STRING AS TIME,\n        DATA :to :: STRING AS to_address,\n        DATA :type :: STRING AS TYPE,\n        CASE\n            WHEN DATA :type :: STRING = 'CALL' THEN udf_hex_to_int(\n                DATA :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n            ELSE 0\n        END AS eth_value,\n        CASE\n            WHEN id = '__' THEN CONCAT(\n                DATA :type :: STRING,\n                '_ORIGIN'\n            )\n            ELSE CONCAT(\n                DATA :type :: STRING,\n                '_',\n                REPLACE(\n                    REPLACE(REPLACE(REPLACE(id, 'calls', ''), '[', ''), ']', ''),\n                    '__',\n                    '_'\n                )\n            )\n        END AS identifier,\n        concat_ws(\n            '-',\n            tx_hash,\n            identifier\n        ) AS _call_id,\n        SPLIT(\n            identifier,\n            '_'\n        ) AS id_split,\n        ARRAY_SLICE(id_split, 1, ARRAY_SIZE(id_split)) AS levels,\n        ARRAY_TO_STRING(\n            levels,\n            '_'\n        ) AS LEVEL,\n        CASE\n            WHEN ARRAY_SIZE(levels) = 1\n            AND levels [0] :: STRING = 'ORIGIN' THEN NULL\n            WHEN ARRAY_SIZE(levels) = 1 THEN 'ORIGIN'\n            ELSE ARRAY_TO_STRING(ARRAY_SLICE(levels, 0, ARRAY_SIZE(levels) -1), '_')END AS parent_level,\n            COUNT(parent_level) over (\n                PARTITION BY tx_hash,\n                parent_level\n            ) AS sub_traces,*\n            FROM\n                base_table\n        ),\n        group_sub_traces AS (\n            SELECT\n                tx_hash,\n                parent_level,\n                sub_traces\n            FROM\n                flattened_traces\n            GROUP BY\n                tx_hash,\n                parent_level,\n                sub_traces\n        ),\n        FINAL AS (\n            SELECT\n                flattened_traces.tx_hash AS tx_hash,\n                flattened_traces.block_number AS block_number,\n                flattened_traces.block_timestamp AS block_timestamp,\n                flattened_traces.from_address AS from_address,\n                flattened_traces.to_address AS to_address,\n                flattened_traces.eth_value AS eth_value,\n                coalesce(flattened_traces.gas,0) AS gas,\n                coalesce(flattened_traces.gas_used,0) AS gas_used,\n                flattened_traces.input AS input,\n                flattened_traces.output AS output,\n                flattened_traces.type AS TYPE,\n                flattened_traces.identifier AS identifier,\n                flattened_traces._call_id AS _call_id,\n                flattened_traces.ingested_at AS ingested_at,\n                flattened_traces.data AS DATA,\n                flattened_traces.tx_status AS tx_status,\n                flattened_traces._inserted_timestamp as _inserted_timestamp,\n                group_sub_traces.sub_traces AS sub_traces\n            FROM\n                flattened_traces\n                LEFT OUTER JOIN group_sub_traces\n                ON flattened_traces.tx_hash = group_sub_traces.tx_hash\n                AND flattened_traces.level = group_sub_traces.parent_level\n        )\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        gas,\n        gas_used,\n        input,\n        output,\n        TYPE,\n        identifier,\n        _call_id,\n        ingested_at,\n        DATA,\n        tx_status,\n        sub_traces,\n        _inserted_timestamp\n    FROM\n        FINAL\n    WHERE\n        identifier IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY _call_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.bronze__blocks", "model.optimism_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_call_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver", "silver__traces"], "unique_id": "model.optimism_models.silver__traces", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver/silver__traces.sql", "original_file_path": "models/silver/silver__traces.sql", "name": "silver__traces", "alias": "traces", "checksum": {"name": "sha256", "checksum": "47a3548693a7ed356097e794870a7e0c7a475e2dc4868e2ea5b5076f2ce866eb"}, "tags": [], "refs": [["bronze__blocks"], ["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDENTIFIER": {"name": "IDENTIFIER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_VALUE": {"name": "ETH_VALUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS": {"name": "GAS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/silver/silver__traces.yml", "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_call_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662493241.275778, "compiled_sql": "\n\nWITH new_blocks AS (\n\n    SELECT\n        block_id\n    FROM\n        OPTIMISM_DEV.bronze.blocks\n    WHERE\n        tx_count > 0\n\n\nAND block_id NOT IN (\n    SELECT\n        DISTINCT block_number\n    FROM\n        OPTIMISM_DEV.silver.traces\n)\n\nORDER BY\n    _inserted_timestamp DESC\nLIMIT\n    500000\n), traces_txs AS (\n    SELECT\n        *\n    FROM\n        OPTIMISM_DEV.bronze.transactions\n    WHERE\n        block_id IN (\n            SELECT\n                block_id\n            FROM\n                new_blocks\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1\n),\nbase_table AS (\n    SELECT\n        CASE\n            WHEN POSITION(\n                '.',\n                path :: STRING\n            ) > 0 THEN REPLACE(\n                REPLACE(\n                    path :: STRING,\n                    SUBSTR(path :: STRING, len(path :: STRING) - POSITION('.', REVERSE(path :: STRING)) + 1, POSITION('.', REVERSE(path :: STRING))),\n                    ''\n                ),\n                '.',\n                '__'\n            )\n            ELSE '__'\n        END AS id,\n        OBJECT_AGG(\n            DISTINCT key,\n            VALUE\n        ) AS DATA,\n        txs.tx_id AS tx_hash,\n        txs.block_id AS block_number,\n        txs.block_timestamp AS block_timestamp,\n        CASE\n            WHEN txs.tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        txs.ingested_at AS ingested_at,\n        txs._inserted_timestamp as _inserted_timestamp\n    FROM\n        traces_txs txs,\n        TABLE(\n            FLATTEN(\n                input => PARSE_JSON(\n                    txs.tx :traces\n                ),\n                recursive => TRUE\n            )\n        ) f\n    WHERE\n        f.index IS NULL\n        AND f.key != 'calls'\n    GROUP BY\n        tx_hash,\n        id,\n        block_number,\n        block_timestamp,\n        _inserted_timestamp,\n        ingested_at,\n        tx_status\n),\nflattened_traces AS (\n    SELECT\n        DATA :from :: STRING AS from_address,\n        udf_hex_to_int(\n            DATA :gas :: STRING\n        ) AS gas,\n        udf_hex_to_int(\n            DATA :gasUsed :: STRING\n        ) AS gas_used,\n        DATA :input :: STRING AS input,\n        DATA :output :: STRING AS output,\n        DATA :time :: STRING AS TIME,\n        DATA :to :: STRING AS to_address,\n        DATA :type :: STRING AS TYPE,\n        CASE\n            WHEN DATA :type :: STRING = 'CALL' THEN udf_hex_to_int(\n                DATA :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n            ELSE 0\n        END AS eth_value,\n        CASE\n            WHEN id = '__' THEN CONCAT(\n                DATA :type :: STRING,\n                '_ORIGIN'\n            )\n            ELSE CONCAT(\n                DATA :type :: STRING,\n                '_',\n                REPLACE(\n                    REPLACE(REPLACE(REPLACE(id, 'calls', ''), '[', ''), ']', ''),\n                    '__',\n                    '_'\n                )\n            )\n        END AS identifier,\n        concat_ws(\n            '-',\n            tx_hash,\n            identifier\n        ) AS _call_id,\n        SPLIT(\n            identifier,\n            '_'\n        ) AS id_split,\n        ARRAY_SLICE(id_split, 1, ARRAY_SIZE(id_split)) AS levels,\n        ARRAY_TO_STRING(\n            levels,\n            '_'\n        ) AS LEVEL,\n        CASE\n            WHEN ARRAY_SIZE(levels) = 1\n            AND levels [0] :: STRING = 'ORIGIN' THEN NULL\n            WHEN ARRAY_SIZE(levels) = 1 THEN 'ORIGIN'\n            ELSE ARRAY_TO_STRING(ARRAY_SLICE(levels, 0, ARRAY_SIZE(levels) -1), '_')END AS parent_level,\n            COUNT(parent_level) over (\n                PARTITION BY tx_hash,\n                parent_level\n            ) AS sub_traces,*\n            FROM\n                base_table\n        ),\n        group_sub_traces AS (\n            SELECT\n                tx_hash,\n                parent_level,\n                sub_traces\n            FROM\n                flattened_traces\n            GROUP BY\n                tx_hash,\n                parent_level,\n                sub_traces\n        ),\n        FINAL AS (\n            SELECT\n                flattened_traces.tx_hash AS tx_hash,\n                flattened_traces.block_number AS block_number,\n                flattened_traces.block_timestamp AS block_timestamp,\n                flattened_traces.from_address AS from_address,\n                flattened_traces.to_address AS to_address,\n                flattened_traces.eth_value AS eth_value,\n                coalesce(flattened_traces.gas,0) AS gas,\n                coalesce(flattened_traces.gas_used,0) AS gas_used,\n                flattened_traces.input AS input,\n                flattened_traces.output AS output,\n                flattened_traces.type AS TYPE,\n                flattened_traces.identifier AS identifier,\n                flattened_traces._call_id AS _call_id,\n                flattened_traces.ingested_at AS ingested_at,\n                flattened_traces.data AS DATA,\n                flattened_traces.tx_status AS tx_status,\n                flattened_traces._inserted_timestamp as _inserted_timestamp,\n                group_sub_traces.sub_traces AS sub_traces\n            FROM\n                flattened_traces\n                LEFT OUTER JOIN group_sub_traces\n                ON flattened_traces.tx_hash = group_sub_traces.tx_hash\n                AND flattened_traces.level = group_sub_traces.parent_level\n        )\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        gas,\n        gas_used,\n        input,\n        output,\n        TYPE,\n        identifier,\n        _call_id,\n        ingested_at,\n        DATA,\n        tx_status,\n        sub_traces,\n        _inserted_timestamp\n    FROM\n        FINAL\n    WHERE\n        identifier IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY _call_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.traces"}, "model.optimism_models.silver__prices": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'price_id',\n    cluster_by = ['hour::DATE', 'token_address']\n) }}\n\nWITH full_decimals AS (\n\n    SELECT\n        LOWER(address) AS contract_address,\n        decimals,\n        symbol\n    FROM\n        {{ ref('core__dim_contracts') }}\n),\nop_token_metadata AS (\n    SELECT\n        asset_id,\n        NAME,\n        b.symbol AS symbol,\n        LOWER(token_address) AS token_address,\n        decimals\n    FROM\n        {{ source(\n            'legacy_silver',\n            'market_asset_metadata'\n        ) }} A\n        LEFT JOIN full_decimals b\n        ON LOWER(\n            A.token_address\n        ) = LOWER(\n            b.contract_address\n        )\n    WHERE\n        platform = 'optimism-ethereum'\n        AND token_address IS NOT NULL\n        AND b.symbol IS NOT NULL\n),\nhourly_prices AS (\n    SELECT\n        DATE_TRUNC(\n            'hour',\n            recorded_at\n        ) AS HOUR,\n        b.name AS NAME,\n        b.symbol AS symbol,\n        b.decimals AS decimals,\n        token_address,\n        AVG(price) AS price,\n        AVG(total_supply) AS total_supply\n    FROM\n        {{ source(\n            'legacy_silver',\n            'prices_v2'\n        ) }} A\n        INNER JOIN op_token_metadata b\n        ON A.asset_id = b.asset_id\n    WHERE\n        provider = 'coinmarketcap'\n\n{% if is_incremental() %}\nAND recorded_at >= CURRENT_DATE - 3\n{% else %}\n    AND recorded_at >= '2020-05-05' -- first date with valid prices data\n{% endif %}\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5\n),\nhour_token_addresses_pair AS (\n    SELECT\n        *\n    FROM\n        {{ source(\n            'legacy_silver',\n            'hours'\n        ) }}\n        CROSS JOIN (\n            SELECT\n                DISTINCT token_address\n            FROM\n                hourly_prices\n        )\n\n{% if is_incremental() %}\nWHERE\n    HOUR BETWEEN CURRENT_DATE - 3\n    AND DATE_TRUNC('hour', SYSDATE())\n{% else %}\nWHERE\n    HOUR BETWEEN '2020-05-05'\n    AND DATE_TRUNC('hour', SYSDATE()) -- first date with valid prices data\n{% endif %}),\nimputed AS (\n    SELECT\n        h.hour,\n        h.token_address,\n        p.symbol,\n        p.decimals,\n        p.price AS avg_price,\n        LAG(\n            p.symbol\n        ) ignore nulls over (\n            PARTITION BY h.token_address\n            ORDER BY\n                h.hour\n        ) AS lag_symbol,\n        LAG(\n            p.decimals\n        ) ignore nulls over (\n            PARTITION BY h.token_address\n            ORDER BY\n                h.hour\n        ) AS lag_decimals,\n        LAG(\n            p.price\n        ) ignore nulls over (\n            PARTITION BY h.token_address\n            ORDER BY\n                h.hour\n        ) AS imputed_price\n    FROM\n        hour_token_addresses_pair h\n        LEFT OUTER JOIN hourly_prices p\n        ON p.hour = h.hour\n        AND (\n            p.token_address = h.token_address\n        )\n),\nFINAL AS (\n    SELECT\n        p.hour AS HOUR,\n        p.token_address,\n        CASE\n            WHEN decimals IS NOT NULL THEN decimals\n            ELSE lag_decimals\n        END AS decimals,\n        CASE\n            WHEN avg_price IS NOT NULL THEN avg_price\n            ELSE imputed_price\n        END AS price,\n        CASE\n            WHEN symbol IS NOT NULL THEN symbol\n            ELSE lag_symbol\n        END AS symbol,\n        CASE\n            WHEN avg_price IS NULL THEN TRUE\n            ELSE FALSE\n        END AS is_imputed\n    FROM\n        imputed p\n    WHERE\n        price IS NOT NULL\n),\neth_tokens AS (\n    SELECT\n        DISTINCT LOWER(eth_token_address) AS eth_token_address,\n        LOWER(op_token_address) AS op_token_address\n    FROM\n        {{ ref('silver__velo_tokens_backup') }}\n),\neth_token_prices AS (\n    SELECT\n        *\n    FROM\n        {{ source(\n            'ethereum',\n            'fact_hourly_token_prices'\n        ) }}\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    eth_token_address\n                FROM\n                    eth_tokens\n            )\n            OR token_address IS NULL\n        )\n\n{% if is_incremental() %}\nAND HOUR BETWEEN CURRENT_DATE - 3\nAND DATE_TRUNC('hour', SYSDATE())\n{% else %}\n    AND HOUR BETWEEN '2020-05-05'\n    AND DATE_TRUNC('hour', SYSDATE()) -- first date with valid prices data\n{% endif %}),\nadj_eth_prices AS (\n    SELECT\n        HOUR,\n        op_token_address AS token_address,\n        CASE\n            WHEN symbol IS NULL\n            AND op_token_address = '0x296f55f8fb28e498b858d0bcda06d955b2cb3f97' THEN 'STG'\n            WHEN symbol IS NULL\n            AND op_token_address = '0x5029c236320b8f15ef0a657054b84d90bfbeded3' THEN 'BitANT'\n            WHEN token_address IS NULL\n            AND symbol IS NULL THEN 'ETH'\n            ELSE symbol\n        END AS symbol,\n        decimals,\n        price,\n        is_imputed\n    FROM\n        eth_token_prices\n        LEFT JOIN eth_tokens\n        ON eth_token_address = token_address\n),\nall_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        symbol,\n        decimals,\n        price,\n        is_imputed\n    FROM\n        FINAL\n    UNION ALL\n    SELECT\n        HOUR,\n        token_address,\n        symbol,\n        decimals,\n        price,\n        is_imputed\n    FROM\n        adj_eth_prices\n)\nSELECT\n    HOUR,\n    token_address,\n    symbol,\n    decimals,\n    price,\n    is_imputed,\n    CONCAT(\n        HOUR,\n        COALESCE(\n            token_address,\n            'ETH'\n        )\n    ) AS price_id\nFROM\n    all_prices qualify(ROW_NUMBER() over(PARTITION BY price_id\nORDER BY\n    decimals DESC) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.optimism_models.legacy_silver.market_asset_metadata", "source.optimism_models.legacy_silver.prices_v2", "source.optimism_models.legacy_silver.hours", "source.optimism_models.ethereum.fact_hourly_token_prices", "model.optimism_models.core__dim_contracts", "seed.optimism_models.silver__velo_tokens_backup"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "price_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["hour::DATE", "token_address"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver", "silver__prices"], "unique_id": "model.optimism_models.silver__prices", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver/silver__prices.sql", "original_file_path": "models/silver/silver__prices.sql", "name": "silver__prices", "alias": "prices", "checksum": {"name": "sha256", "checksum": "fc74a9747cc95ea819a9312325ccb2271b517969c1a2146fbdf1d89b07ed0cc6"}, "tags": [], "refs": [["core__dim_contracts"], ["silver__velo_tokens_backup"]], "sources": [["legacy_silver", "market_asset_metadata"], ["legacy_silver", "prices_v2"], ["legacy_silver", "hours"], ["ethereum", "fact_hourly_token_prices"]], "metrics": [], "description": "", "columns": {"HOUR": {"name": "HOUR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/silver/silver__prices.yml", "compiled_path": "target/compiled/optimism_models/models/silver/silver__prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "price_id", "cluster_by": ["hour::DATE", "token_address"]}, "created_at": 1662493241.680186, "compiled_sql": "\n\nWITH full_decimals AS (\n\n    SELECT\n        LOWER(address) AS contract_address,\n        decimals,\n        symbol\n    FROM\n        OPTIMISM_DEV.core.dim_contracts\n),\nop_token_metadata AS (\n    SELECT\n        asset_id,\n        NAME,\n        b.symbol AS symbol,\n        LOWER(token_address) AS token_address,\n        decimals\n    FROM\n        flipside_prod_db.silver.market_asset_metadata A\n        LEFT JOIN full_decimals b\n        ON LOWER(\n            A.token_address\n        ) = LOWER(\n            b.contract_address\n        )\n    WHERE\n        platform = 'optimism-ethereum'\n        AND token_address IS NOT NULL\n        AND b.symbol IS NOT NULL\n),\nhourly_prices AS (\n    SELECT\n        DATE_TRUNC(\n            'hour',\n            recorded_at\n        ) AS HOUR,\n        b.name AS NAME,\n        b.symbol AS symbol,\n        b.decimals AS decimals,\n        token_address,\n        AVG(price) AS price,\n        AVG(total_supply) AS total_supply\n    FROM\n        flipside_prod_db.silver.prices_v2 A\n        INNER JOIN op_token_metadata b\n        ON A.asset_id = b.asset_id\n    WHERE\n        provider = 'coinmarketcap'\n\n\nAND recorded_at >= CURRENT_DATE - 3\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5\n),\nhour_token_addresses_pair AS (\n    SELECT\n        *\n    FROM\n        flipside_prod_db.silver.hours\n        CROSS JOIN (\n            SELECT\n                DISTINCT token_address\n            FROM\n                hourly_prices\n        )\n\n\nWHERE\n    HOUR BETWEEN CURRENT_DATE - 3\n    AND DATE_TRUNC('hour', SYSDATE())\n),\nimputed AS (\n    SELECT\n        h.hour,\n        h.token_address,\n        p.symbol,\n        p.decimals,\n        p.price AS avg_price,\n        LAG(\n            p.symbol\n        ) ignore nulls over (\n            PARTITION BY h.token_address\n            ORDER BY\n                h.hour\n        ) AS lag_symbol,\n        LAG(\n            p.decimals\n        ) ignore nulls over (\n            PARTITION BY h.token_address\n            ORDER BY\n                h.hour\n        ) AS lag_decimals,\n        LAG(\n            p.price\n        ) ignore nulls over (\n            PARTITION BY h.token_address\n            ORDER BY\n                h.hour\n        ) AS imputed_price\n    FROM\n        hour_token_addresses_pair h\n        LEFT OUTER JOIN hourly_prices p\n        ON p.hour = h.hour\n        AND (\n            p.token_address = h.token_address\n        )\n),\nFINAL AS (\n    SELECT\n        p.hour AS HOUR,\n        p.token_address,\n        CASE\n            WHEN decimals IS NOT NULL THEN decimals\n            ELSE lag_decimals\n        END AS decimals,\n        CASE\n            WHEN avg_price IS NOT NULL THEN avg_price\n            ELSE imputed_price\n        END AS price,\n        CASE\n            WHEN symbol IS NOT NULL THEN symbol\n            ELSE lag_symbol\n        END AS symbol,\n        CASE\n            WHEN avg_price IS NULL THEN TRUE\n            ELSE FALSE\n        END AS is_imputed\n    FROM\n        imputed p\n    WHERE\n        price IS NOT NULL\n),\neth_tokens AS (\n    SELECT\n        DISTINCT LOWER(eth_token_address) AS eth_token_address,\n        LOWER(op_token_address) AS op_token_address\n    FROM\n        OPTIMISM_DEV.silver.velo_tokens_backup\n),\neth_token_prices AS (\n    SELECT\n        *\n    FROM\n        ethereum.core.fact_hourly_token_prices\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    eth_token_address\n                FROM\n                    eth_tokens\n            )\n            OR token_address IS NULL\n        )\n\n\nAND HOUR BETWEEN CURRENT_DATE - 3\nAND DATE_TRUNC('hour', SYSDATE())\n),\nadj_eth_prices AS (\n    SELECT\n        HOUR,\n        op_token_address AS token_address,\n        CASE\n            WHEN symbol IS NULL\n            AND op_token_address = '0x296f55f8fb28e498b858d0bcda06d955b2cb3f97' THEN 'STG'\n            WHEN symbol IS NULL\n            AND op_token_address = '0x5029c236320b8f15ef0a657054b84d90bfbeded3' THEN 'BitANT'\n            WHEN token_address IS NULL\n            AND symbol IS NULL THEN 'ETH'\n            ELSE symbol\n        END AS symbol,\n        decimals,\n        price,\n        is_imputed\n    FROM\n        eth_token_prices\n        LEFT JOIN eth_tokens\n        ON eth_token_address = token_address\n),\nall_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        symbol,\n        decimals,\n        price,\n        is_imputed\n    FROM\n        FINAL\n    UNION ALL\n    SELECT\n        HOUR,\n        token_address,\n        symbol,\n        decimals,\n        price,\n        is_imputed\n    FROM\n        adj_eth_prices\n)\nSELECT\n    HOUR,\n    token_address,\n    symbol,\n    decimals,\n    price,\n    is_imputed,\n    CONCAT(\n        HOUR,\n        COALESCE(\n            token_address,\n            'ETH'\n        )\n    ) AS price_id\nFROM\n    all_prices qualify(ROW_NUMBER() over(PARTITION BY price_id\nORDER BY\n    decimals DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.prices"}, "model.optimism_models.silver__velodrome_votes": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['velodrome']\n) }}\n\nWITH votes_base AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS from_address,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) AS token_id,\n        (\n            PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) / pow(\n                10,\n                18\n            )\n        ) AS amount,\n        CASE\n            WHEN topics [0] :: STRING = '0xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568' THEN 'unvote'\n            WHEN topics [0] :: STRING = '0x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15' THEN 'vote'\n        END AS vote_action,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics [0] :: STRING IN (\n            '0xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568',\n            '0x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15'\n        ) -- vote deposit / withdrawals\n        AND origin_to_address = '0x09236cff45047dbee6b921e00704bed6d6b8cf7e'\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ngauges AS (\n    SELECT\n        gauge_address,\n        external_bribe_address,\n        internal_bribe_address,\n        pool_address,\n        pool_name\n    FROM\n        {{ ref('silver__velodrome_gauges') }}\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        COALESCE(\n            g1.gauge_address,\n            g0.gauge_address\n        ) AS gauge_address,\n        COALESCE(\n            g1.external_bribe_address,\n            g0.external_bribe_address\n        ) AS external_bribe_address,\n        COALESCE(\n            g1.internal_bribe_address,\n            g0.internal_bribe_address\n        ) AS internal_bribe_address,\n        votes_base.contract_address AS contract_address,\n        COALESCE(\n            g1.pool_address,\n            g0.pool_address\n        ) AS pool_address,\n        COALESCE(\n            g1.pool_name,\n            g0.pool_name\n        ) AS pool_name,\n        from_address,\n        token_id :: INTEGER AS token_id,\n        amount AS vote_amount,\n        vote_action,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        votes_base\n        LEFT JOIN gauges g1\n        ON LOWER(\n            votes_base.contract_address\n        ) = LOWER(\n            g1.external_bribe_address\n        )\n        LEFT JOIN gauges g0\n        ON LOWER(\n            votes_base.contract_address\n        ) = LOWER(\n            g0.internal_bribe_address\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    gauge_address,\n    external_bribe_address,\n    internal_bribe_address,\n    pool_address,\n    pool_name,\n    from_address,\n    token_id,\n    vote_amount,\n    vote_action,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL\nWHERE\n    pool_address IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY tx_hash, pool_address, vote_action\nORDER BY\n    _inserted_timestamp DESC) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.silver__logs", "model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "velodrome", "silver__velodrome_votes"], "unique_id": "model.optimism_models.silver__velodrome_votes", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/silver__velodrome_votes.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.sql", "name": "silver__velodrome_votes", "alias": "velodrome_votes", "checksum": {"name": "sha256", "checksum": "827e40813576f9b5fe33f69d8289399725b432562fcfb640f3fd1ee10c58d944"}, "tags": ["velodrome"], "refs": [["silver__logs"], ["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE_ADDRESS": {"name": "GAUGE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTERNAL_BRIBE_ADDRESS": {"name": "EXTERNAL_BRIBE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTERNAL_BRIBE_ADDRESS": {"name": "INTERNAL_BRIBE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_AMOUNT": {"name": "VOTE_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_ACTION": {"name": "VOTE_ACTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/silver__velodrome_votes.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"], "tags": ["velodrome"]}, "created_at": 1662493241.705248, "compiled_sql": "\n\nWITH votes_base AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS from_address,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) AS token_id,\n        (\n            PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) / pow(\n                10,\n                18\n            )\n        ) AS amount,\n        CASE\n            WHEN topics [0] :: STRING = '0xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568' THEN 'unvote'\n            WHEN topics [0] :: STRING = '0x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15' THEN 'vote'\n        END AS vote_action,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        topics [0] :: STRING IN (\n            '0xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568',\n            '0x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15'\n        ) -- vote deposit / withdrawals\n        AND origin_to_address = '0x09236cff45047dbee6b921e00704bed6d6b8cf7e'\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.velodrome_votes\n)\n\n),\ngauges AS (\n    SELECT\n        gauge_address,\n        external_bribe_address,\n        internal_bribe_address,\n        pool_address,\n        pool_name\n    FROM\n        OPTIMISM_DEV.silver.velodrome_gauges\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        COALESCE(\n            g1.gauge_address,\n            g0.gauge_address\n        ) AS gauge_address,\n        COALESCE(\n            g1.external_bribe_address,\n            g0.external_bribe_address\n        ) AS external_bribe_address,\n        COALESCE(\n            g1.internal_bribe_address,\n            g0.internal_bribe_address\n        ) AS internal_bribe_address,\n        votes_base.contract_address AS contract_address,\n        COALESCE(\n            g1.pool_address,\n            g0.pool_address\n        ) AS pool_address,\n        COALESCE(\n            g1.pool_name,\n            g0.pool_name\n        ) AS pool_name,\n        from_address,\n        token_id :: INTEGER AS token_id,\n        amount AS vote_amount,\n        vote_action,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        votes_base\n        LEFT JOIN gauges g1\n        ON LOWER(\n            votes_base.contract_address\n        ) = LOWER(\n            g1.external_bribe_address\n        )\n        LEFT JOIN gauges g0\n        ON LOWER(\n            votes_base.contract_address\n        ) = LOWER(\n            g0.internal_bribe_address\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    gauge_address,\n    external_bribe_address,\n    internal_bribe_address,\n    pool_address,\n    pool_name,\n    from_address,\n    token_id,\n    vote_amount,\n    vote_action,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL\nWHERE\n    pool_address IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY tx_hash, pool_address, vote_action\nORDER BY\n    _inserted_timestamp DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velodrome_votes"}, "model.optimism_models.silver__velodrome_pools": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'pool_address',\n    tags = ['velodrome']\n) }}\n\nWITH pool_backfill AS (\n\n    SELECT\n        LOWER(pool_address) AS pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        LOWER(token0_address) AS token0_address,\n        LOWER(token1_address) AS token1_address,\n        token0_decimals,\n        token1_decimals,\n        '1970-01-01' :: DATE AS _inserted_timestamp\n    FROM\n        {{ ref('silver__velo_pool_backfill') }}\n),\ntoken_backfill AS (\n    SELECT\n        symbol,\n        op_token_address AS contract_address,\n        decimals\n    FROM\n        {{ ref('silver__velo_tokens_backup') }}\n),\ncontracts AS (\n    SELECT\n        address AS contract_address,\n        symbol,\n        decimals\n    FROM\n        {{ ref('core__dim_contracts') }}\n),\nnew_pools AS (\n    SELECT\n        block_timestamp AS created_timestamp,\n        block_number AS created_block,\n        tx_hash AS created_hash,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS token0_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS token1_address,\n        CONCAT('0x', SUBSTR(DATA :: STRING, 91, 40)) AS pool_address,\n        CASE\n            WHEN SUBSTR(\n                DATA,\n                66,\n                1\n            ) = 1 THEN 'stable'\n            ELSE 'volatile'\n        END AS pool_type,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics [0] :: STRING = '0xc4805696c66d7cf352fc1d6bb633ad5ee82f6cb577c453024b6e0eb8306c6fc9' -- pair created\n        AND contract_address = '0x25cbddb98b35ab1ff77413456b31ec81a6b6b746' -- velo depolyer\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nadd_meta AS (\n    SELECT\n        created_timestamp,\n        created_block,\n        created_hash,\n        token0_address,\n        COALESCE(\n            tb0.symbol,\n            c0.symbol\n        ) AS token0_symbol,\n        COALESCE(\n            tb1.symbol,\n            c1.symbol\n        ) AS token1_symbol,\n        COALESCE(\n            tb0.decimals,\n            c0.decimals\n        ) AS token0_decimals,\n        COALESCE(\n            tb1.decimals,\n            c1.decimals\n        ) AS token1_decimals,\n        token1_address,\n        pool_address,\n        pool_type,\n        _inserted_timestamp\n    FROM\n        new_pools\n        LEFT JOIN token_backfill AS tb0\n        ON token0_address = tb0.contract_address\n        LEFT JOIN contracts AS c0\n        ON token0_address = c0.contract_address\n        LEFT JOIN token_backfill AS tb1\n        ON token1_address = tb1.contract_address\n        LEFT JOIN contracts AS c1\n        ON token1_address = c1.contract_address\n),\nname_pools AS (\n    SELECT\n        created_timestamp,\n        created_block,\n        created_hash,\n        token0_address,\n        token0_symbol,\n        token1_symbol,\n        token0_decimals,\n        token1_decimals,\n        token1_address,\n        pool_address,\n        pool_type,\n        _inserted_timestamp,\n        CONCAT(\n            LOWER(\n                LEFT(\n                    pool_type,\n                    1\n                )\n            ),\n            'AMM-',\n            token0_symbol,\n            '/',\n            token1_symbol\n        ) AS pool_name\n    FROM\n        add_meta\n),\ncombine AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals,\n        created_timestamp,\n        created_block,\n        created_hash,\n        _inserted_timestamp\n    FROM\n        name_pools\n    UNION ALL\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals,\n        NULL AS created_timestamp,\n        NULL AS created_block,\n        NULL AS created_hash,\n        _inserted_timestamp\n    FROM\n        pool_backfill\n)\nSELECT\n    LOWER(pool_address) AS pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    LOWER(token0_address) AS token0_address,\n    LOWER(token1_address) AS token1_address,\n    token0_decimals,\n    token1_decimals,\n    created_timestamp,\n    created_block,\n    created_hash,\n    _inserted_timestamp\nFROM\n    combine qualify(ROW_NUMBER() over(PARTITION BY pool_address\nORDER BY\n    _inserted_timestamp DESC) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["seed.optimism_models.silver__velo_pool_backfill", "seed.optimism_models.silver__velo_tokens_backup", "model.optimism_models.core__dim_contracts", "model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pool_address", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "velodrome", "silver__velodrome_pools"], "unique_id": "model.optimism_models.silver__velodrome_pools", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/silver__velodrome_pools.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.sql", "name": "silver__velodrome_pools", "alias": "velodrome_pools", "checksum": {"name": "sha256", "checksum": "987f56cf87af4a3329e94385263f99aa09d1d85759fe016e663936a86706870c"}, "tags": ["velodrome"], "refs": [["silver__velo_pool_backfill"], ["silver__velo_tokens_backup"], ["core__dim_contracts"], ["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {"POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_TYPE": {"name": "POOL_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_DECIMALS": {"name": "TOKEN1_DECIMALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_DECIMALS": {"name": "TOKEN0_DECIMALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/silver__velodrome_pools.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "pool_address", "tags": ["velodrome"]}, "created_at": 1662493242.061729, "compiled_sql": "\n\nWITH pool_backfill AS (\n\n    SELECT\n        LOWER(pool_address) AS pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        LOWER(token0_address) AS token0_address,\n        LOWER(token1_address) AS token1_address,\n        token0_decimals,\n        token1_decimals,\n        '1970-01-01' :: DATE AS _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.velo_pool_backfill\n),\ntoken_backfill AS (\n    SELECT\n        symbol,\n        op_token_address AS contract_address,\n        decimals\n    FROM\n        OPTIMISM_DEV.silver.velo_tokens_backup\n),\ncontracts AS (\n    SELECT\n        address AS contract_address,\n        symbol,\n        decimals\n    FROM\n        OPTIMISM_DEV.core.dim_contracts\n),\nnew_pools AS (\n    SELECT\n        block_timestamp AS created_timestamp,\n        block_number AS created_block,\n        tx_hash AS created_hash,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS token0_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS token1_address,\n        CONCAT('0x', SUBSTR(DATA :: STRING, 91, 40)) AS pool_address,\n        CASE\n            WHEN SUBSTR(\n                DATA,\n                66,\n                1\n            ) = 1 THEN 'stable'\n            ELSE 'volatile'\n        END AS pool_type,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        topics [0] :: STRING = '0xc4805696c66d7cf352fc1d6bb633ad5ee82f6cb577c453024b6e0eb8306c6fc9' -- pair created\n        AND contract_address = '0x25cbddb98b35ab1ff77413456b31ec81a6b6b746' -- velo depolyer\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE\n    FROM\n        OPTIMISM_DEV.silver.velodrome_pools\n)\n\n),\nadd_meta AS (\n    SELECT\n        created_timestamp,\n        created_block,\n        created_hash,\n        token0_address,\n        COALESCE(\n            tb0.symbol,\n            c0.symbol\n        ) AS token0_symbol,\n        COALESCE(\n            tb1.symbol,\n            c1.symbol\n        ) AS token1_symbol,\n        COALESCE(\n            tb0.decimals,\n            c0.decimals\n        ) AS token0_decimals,\n        COALESCE(\n            tb1.decimals,\n            c1.decimals\n        ) AS token1_decimals,\n        token1_address,\n        pool_address,\n        pool_type,\n        _inserted_timestamp\n    FROM\n        new_pools\n        LEFT JOIN token_backfill AS tb0\n        ON token0_address = tb0.contract_address\n        LEFT JOIN contracts AS c0\n        ON token0_address = c0.contract_address\n        LEFT JOIN token_backfill AS tb1\n        ON token1_address = tb1.contract_address\n        LEFT JOIN contracts AS c1\n        ON token1_address = c1.contract_address\n),\nname_pools AS (\n    SELECT\n        created_timestamp,\n        created_block,\n        created_hash,\n        token0_address,\n        token0_symbol,\n        token1_symbol,\n        token0_decimals,\n        token1_decimals,\n        token1_address,\n        pool_address,\n        pool_type,\n        _inserted_timestamp,\n        CONCAT(\n            LOWER(\n                LEFT(\n                    pool_type,\n                    1\n                )\n            ),\n            'AMM-',\n            token0_symbol,\n            '/',\n            token1_symbol\n        ) AS pool_name\n    FROM\n        add_meta\n),\ncombine AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals,\n        created_timestamp,\n        created_block,\n        created_hash,\n        _inserted_timestamp\n    FROM\n        name_pools\n    UNION ALL\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals,\n        NULL AS created_timestamp,\n        NULL AS created_block,\n        NULL AS created_hash,\n        _inserted_timestamp\n    FROM\n        pool_backfill\n)\nSELECT\n    LOWER(pool_address) AS pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    LOWER(token0_address) AS token0_address,\n    LOWER(token1_address) AS token1_address,\n    token0_decimals,\n    token1_decimals,\n    created_timestamp,\n    created_block,\n    created_hash,\n    _inserted_timestamp\nFROM\n    combine qualify(ROW_NUMBER() over(PARTITION BY pool_address\nORDER BY\n    _inserted_timestamp DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velodrome_pools"}, "model.optimism_models.silver__velodrome_swaps": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['velodrome']\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40))\n        END AS sender_address,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40))\n        END AS to_address,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT\n        END AS amount0_in_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT\n        END AS amount1_in_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [2] :: STRING\n            ) :: FLOAT\n        END AS amount0_out_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [3] :: STRING\n            ) :: FLOAT\n        END AS amount1_out_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0x112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT\n        END AS fees0_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0x112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT\n        END AS fees1_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT\n        END AS transfer_amount,\n        _log_id,\n        _inserted_timestamp,\n        event_index,\n        'velodrome' AS platform,\n        topics [0] :: STRING AS function_type\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics [0] :: STRING IN (\n            '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822',\n            '0x112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602',\n            '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n        )\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        {{ ref('silver__velodrome_pools') }}\n),\ntokens AS (\n    SELECT\n        DISTINCT token0_address AS token_address,\n        token0_decimals AS token_decimals,\n        token0_symbol AS token_symbol\n    FROM\n        velo_pools\n    UNION\n    SELECT\n        DISTINCT token1_address AS token_address,\n        token1_decimals AS token_decimals,\n        token1_symbol AS token_symbol\n    FROM\n        velo_pools\n),\ntransfers AS (\n    SELECT\n        tx_hash,\n        contract_address AS fee_currency,\n        transfer_amount AS fee_amount,\n        token_decimals AS fee_decimals,\n        token_symbol AS fee_symbol\n    FROM\n        base\n        LEFT JOIN tokens\n        ON token_address = contract_address\n    WHERE\n        function_type = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\nlp_fees AS (\n    SELECT\n        A.tx_hash AS tx_hash,\n        A.contract_address AS contract_address,\n        fees0_adj,\n        fees1_adj,\n        CASE\n            WHEN fees0_adj = 0 THEN fees1_adj :: FLOAT\n            WHEN fees1_adj = 0 THEN fees0_adj :: FLOAT\n        END AS fees_adj,\n        fee_currency,\n        fee_decimals,\n        fee_symbol,\n        ROW_NUMBER() over (\n            PARTITION BY A.tx_hash,\n            contract_address\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        base A\n        LEFT JOIN transfers b\n        ON A.tx_hash = b.tx_hash\n        AND (\n            CASE\n                WHEN fees0_adj = 0 THEN fees1_adj :: FLOAT\n                WHEN fees1_adj = 0 THEN fees0_adj :: FLOAT\n            END\n        ) = b.fee_amount\n    WHERE\n        function_type = '0x112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602'\n),\nswaps AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        sender_address,\n        to_address,\n        amount0_in_adj,\n        amount1_in_adj,\n        amount0_out_adj,\n        amount1_out_adj,\n        _log_id,\n        _inserted_timestamp,\n        event_index,\n        platform,\n        ROW_NUMBER() over (\n            PARTITION BY tx_hash,\n            contract_address\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        base\n    WHERE\n        function_type = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822'\n),\ncombine_meta AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        b.tx_hash AS tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        b.contract_address AS contract_address,\n        sender_address,\n        to_address,\n        amount0_in_adj,\n        amount0_out_adj,\n        amount1_in_adj,\n        amount1_out_adj,\n        _log_id,\n        _inserted_timestamp,\n        event_index,\n        platform,\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals,\n        CASE\n            WHEN amount0_in_adj <> 0 THEN token0_decimals\n            WHEN amount1_in_adj <> 0 THEN token1_decimals\n        END AS decimals_in,\n        CASE\n            WHEN amount0_out_adj <> 0 THEN token0_decimals\n            WHEN amount1_out_adj <> 0 THEN token1_decimals\n        END AS decimals_out,\n        CASE\n            WHEN amount0_in_adj <> 0 THEN amount0_in_adj\n            WHEN amount1_in_adj <> 0 THEN amount1_in_adj\n        END AS amount_in_adj,\n        CASE\n            WHEN amount0_out_adj <> 0 THEN amount0_out_adj\n            WHEN amount1_out_adj <> 0 THEN amount1_out_adj\n        END AS amount_out_adj,\n        CASE\n            WHEN decimals_in IS NOT NULL THEN amount_in_adj / pow(\n                10,\n                decimals_in\n            )\n            ELSE amount_in_adj\n        END AS amount_in,\n        CASE\n            WHEN decimals_out IS NOT NULL THEN amount_out_adj / pow(\n                10,\n                decimals_out\n            )\n            ELSE amount_out_adj\n        END AS amount_out,\n        CASE\n            WHEN amount0_in_adj <> 0 THEN token0_address\n            WHEN amount1_in_adj <> 0 THEN token1_address\n        END AS token_address_in,\n        CASE\n            WHEN amount0_out_adj <> 0 THEN token0_address\n            WHEN amount1_out_adj <> 0 THEN token1_address\n        END AS token_address_out,\n        CASE\n            WHEN amount0_in_adj <> 0 THEN token0_symbol\n            WHEN amount1_in_adj <> 0 THEN token1_symbol\n        END AS symbol_in,\n        CASE\n            WHEN amount0_out_adj <> 0 THEN token0_symbol\n            WHEN amount1_out_adj <> 0 THEN token1_symbol\n        END AS symbol_out,\n        CASE\n            WHEN fee_decimals IS NOT NULL THEN fees_adj / pow(\n                10,\n                fee_decimals\n            )\n            ELSE fees_adj\n        END AS lp_fee,\n        fee_currency,\n        fee_decimals,\n        fee_symbol\n    FROM\n        swaps b\n        INNER JOIN velo_pools\n        ON b.contract_address = pool_address\n        LEFT JOIN lp_fees l\n        ON b.contract_address = l.contract_address\n        AND b.tx_hash = l.tx_hash\n        AND b.agg_id = l.agg_id\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price\n    FROM\n        {{ ref('silver__prices') }}\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                combine_meta\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    tx_hash,\n    contract_address,\n    pool_address,\n    pool_name,\n    amount_in,\n    CASE\n        WHEN decimals_in IS NOT NULL THEN ROUND(\n            amount_in * p0.price,\n            2\n        )\n        ELSE NULL\n    END AS amount_in_usd,\n    amount_out,\n    CASE\n        WHEN decimals_out IS NOT NULL THEN ROUND(\n            amount_out * p1.price,\n            2\n        )\n        ELSE NULL\n    END AS amount_out_usd,\n    sender_address,\n    to_address,\n    event_index,\n    _log_id,\n    platform,\n    _inserted_timestamp,\n    token_address_in,\n    token_address_out,\n    symbol_in,\n    symbol_out,\n    decimals_in,\n    decimals_out,\n    token0_decimals,\n    token1_decimals,\n    token0_symbol,\n    token1_symbol,\n    lp_fee,\n    CASE\n        WHEN fee_decimals IS NOT NULL THEN ROUND(\n            lp_fee * p3.price,\n            2\n        )\n        ELSE NULL\n    END AS lp_fee_usd,\n    fee_symbol AS lp_fee_symbol,\n    fee_currency AS lp_fee_token_address\nFROM\n    combine_meta\n    LEFT JOIN token_prices AS p0\n    ON p0.hour = DATE_TRUNC(\n        'hour',\n        block_timestamp\n    )\n    AND token_address_in = p0.token_address\n    LEFT JOIN token_prices AS p1\n    ON p1.hour = DATE_TRUNC(\n        'hour',\n        block_timestamp\n    )\n    AND token_address_out = p1.token_address\n    LEFT JOIN token_prices AS p3\n    ON p3.hour = DATE_TRUNC(\n        'hour',\n        block_timestamp\n    )\n    AND fee_currency = p3.token_address qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.silver__logs", "model.optimism_models.silver__velodrome_pools", "model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "velodrome", "silver__velodrome_swaps"], "unique_id": "model.optimism_models.silver__velodrome_swaps", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/silver__velodrome_swaps.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.sql", "name": "silver__velodrome_swaps", "alias": "velodrome_swaps", "checksum": {"name": "sha256", "checksum": "68c52a81ce90936ff4319ff8d0478a21c7265cd1fc1aef265e641bba1508be02"}, "tags": ["velodrome"], "refs": [["silver__logs"], ["silver__velodrome_pools"], ["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER_ADDRESS": {"name": "SENDER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_IN": {"name": "SYMBOL_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_OUT": {"name": "SYMBOL_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS_IN": {"name": "DECIMALS_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS_OUT": {"name": "DECIMALS_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS_IN": {"name": "TOKEN_ADDRESS_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS_OUT": {"name": "TOKEN_ADDRESS_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_FEE": {"name": "LP_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_FEE_SYMBOL": {"name": "LP_FEE_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_FEE_TOKEN_ADDRESS": {"name": "LP_FEE_TOKEN_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/silver__velodrome_swaps.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"], "tags": ["velodrome"]}, "created_at": 1662493241.8444889, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40))\n        END AS sender_address,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40))\n        END AS to_address,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT\n        END AS amount0_in_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT\n        END AS amount1_in_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [2] :: STRING\n            ) :: FLOAT\n        END AS amount0_out_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [3] :: STRING\n            ) :: FLOAT\n        END AS amount1_out_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0x112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT\n        END AS fees0_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0x112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT\n        END AS fees1_adj,\n        CASE\n            WHEN topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT\n        END AS transfer_amount,\n        _log_id,\n        _inserted_timestamp,\n        event_index,\n        'velodrome' AS platform,\n        topics [0] :: STRING AS function_type\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        topics [0] :: STRING IN (\n            '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822',\n            '0x112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602',\n            '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n        )\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.velodrome_swaps\n)\n\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        OPTIMISM_DEV.silver.velodrome_pools\n),\ntokens AS (\n    SELECT\n        DISTINCT token0_address AS token_address,\n        token0_decimals AS token_decimals,\n        token0_symbol AS token_symbol\n    FROM\n        velo_pools\n    UNION\n    SELECT\n        DISTINCT token1_address AS token_address,\n        token1_decimals AS token_decimals,\n        token1_symbol AS token_symbol\n    FROM\n        velo_pools\n),\ntransfers AS (\n    SELECT\n        tx_hash,\n        contract_address AS fee_currency,\n        transfer_amount AS fee_amount,\n        token_decimals AS fee_decimals,\n        token_symbol AS fee_symbol\n    FROM\n        base\n        LEFT JOIN tokens\n        ON token_address = contract_address\n    WHERE\n        function_type = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\nlp_fees AS (\n    SELECT\n        A.tx_hash AS tx_hash,\n        A.contract_address AS contract_address,\n        fees0_adj,\n        fees1_adj,\n        CASE\n            WHEN fees0_adj = 0 THEN fees1_adj :: FLOAT\n            WHEN fees1_adj = 0 THEN fees0_adj :: FLOAT\n        END AS fees_adj,\n        fee_currency,\n        fee_decimals,\n        fee_symbol,\n        ROW_NUMBER() over (\n            PARTITION BY A.tx_hash,\n            contract_address\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        base A\n        LEFT JOIN transfers b\n        ON A.tx_hash = b.tx_hash\n        AND (\n            CASE\n                WHEN fees0_adj = 0 THEN fees1_adj :: FLOAT\n                WHEN fees1_adj = 0 THEN fees0_adj :: FLOAT\n            END\n        ) = b.fee_amount\n    WHERE\n        function_type = '0x112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602'\n),\nswaps AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        sender_address,\n        to_address,\n        amount0_in_adj,\n        amount1_in_adj,\n        amount0_out_adj,\n        amount1_out_adj,\n        _log_id,\n        _inserted_timestamp,\n        event_index,\n        platform,\n        ROW_NUMBER() over (\n            PARTITION BY tx_hash,\n            contract_address\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        base\n    WHERE\n        function_type = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822'\n),\ncombine_meta AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        b.tx_hash AS tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        b.contract_address AS contract_address,\n        sender_address,\n        to_address,\n        amount0_in_adj,\n        amount0_out_adj,\n        amount1_in_adj,\n        amount1_out_adj,\n        _log_id,\n        _inserted_timestamp,\n        event_index,\n        platform,\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals,\n        CASE\n            WHEN amount0_in_adj <> 0 THEN token0_decimals\n            WHEN amount1_in_adj <> 0 THEN token1_decimals\n        END AS decimals_in,\n        CASE\n            WHEN amount0_out_adj <> 0 THEN token0_decimals\n            WHEN amount1_out_adj <> 0 THEN token1_decimals\n        END AS decimals_out,\n        CASE\n            WHEN amount0_in_adj <> 0 THEN amount0_in_adj\n            WHEN amount1_in_adj <> 0 THEN amount1_in_adj\n        END AS amount_in_adj,\n        CASE\n            WHEN amount0_out_adj <> 0 THEN amount0_out_adj\n            WHEN amount1_out_adj <> 0 THEN amount1_out_adj\n        END AS amount_out_adj,\n        CASE\n            WHEN decimals_in IS NOT NULL THEN amount_in_adj / pow(\n                10,\n                decimals_in\n            )\n            ELSE amount_in_adj\n        END AS amount_in,\n        CASE\n            WHEN decimals_out IS NOT NULL THEN amount_out_adj / pow(\n                10,\n                decimals_out\n            )\n            ELSE amount_out_adj\n        END AS amount_out,\n        CASE\n            WHEN amount0_in_adj <> 0 THEN token0_address\n            WHEN amount1_in_adj <> 0 THEN token1_address\n        END AS token_address_in,\n        CASE\n            WHEN amount0_out_adj <> 0 THEN token0_address\n            WHEN amount1_out_adj <> 0 THEN token1_address\n        END AS token_address_out,\n        CASE\n            WHEN amount0_in_adj <> 0 THEN token0_symbol\n            WHEN amount1_in_adj <> 0 THEN token1_symbol\n        END AS symbol_in,\n        CASE\n            WHEN amount0_out_adj <> 0 THEN token0_symbol\n            WHEN amount1_out_adj <> 0 THEN token1_symbol\n        END AS symbol_out,\n        CASE\n            WHEN fee_decimals IS NOT NULL THEN fees_adj / pow(\n                10,\n                fee_decimals\n            )\n            ELSE fees_adj\n        END AS lp_fee,\n        fee_currency,\n        fee_decimals,\n        fee_symbol\n    FROM\n        swaps b\n        INNER JOIN velo_pools\n        ON b.contract_address = pool_address\n        LEFT JOIN lp_fees l\n        ON b.contract_address = l.contract_address\n        AND b.tx_hash = l.tx_hash\n        AND b.agg_id = l.agg_id\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price\n    FROM\n        OPTIMISM_DEV.silver.prices\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                combine_meta\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    tx_hash,\n    contract_address,\n    pool_address,\n    pool_name,\n    amount_in,\n    CASE\n        WHEN decimals_in IS NOT NULL THEN ROUND(\n            amount_in * p0.price,\n            2\n        )\n        ELSE NULL\n    END AS amount_in_usd,\n    amount_out,\n    CASE\n        WHEN decimals_out IS NOT NULL THEN ROUND(\n            amount_out * p1.price,\n            2\n        )\n        ELSE NULL\n    END AS amount_out_usd,\n    sender_address,\n    to_address,\n    event_index,\n    _log_id,\n    platform,\n    _inserted_timestamp,\n    token_address_in,\n    token_address_out,\n    symbol_in,\n    symbol_out,\n    decimals_in,\n    decimals_out,\n    token0_decimals,\n    token1_decimals,\n    token0_symbol,\n    token1_symbol,\n    lp_fee,\n    CASE\n        WHEN fee_decimals IS NOT NULL THEN ROUND(\n            lp_fee * p3.price,\n            2\n        )\n        ELSE NULL\n    END AS lp_fee_usd,\n    fee_symbol AS lp_fee_symbol,\n    fee_currency AS lp_fee_token_address\nFROM\n    combine_meta\n    LEFT JOIN token_prices AS p0\n    ON p0.hour = DATE_TRUNC(\n        'hour',\n        block_timestamp\n    )\n    AND token_address_in = p0.token_address\n    LEFT JOIN token_prices AS p1\n    ON p1.hour = DATE_TRUNC(\n        'hour',\n        block_timestamp\n    )\n    AND token_address_out = p1.token_address\n    LEFT JOIN token_prices AS p3\n    ON p3.hour = DATE_TRUNC(\n        'hour',\n        block_timestamp\n    )\n    AND fee_currency = p3.token_address qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velodrome_swaps"}, "model.optimism_models.silver__velodrome_gauges": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'gauge_address',\n    tags = ['velodrome']\n) }}\n\nWITH backfill AS (\n\n    SELECT\n        LOWER(gauge_address) AS gauge_address,\n        LOWER(creator_address) AS creator_address,\n        LOWER(internal_bribe_address) AS internal_bribe_address,\n        LOWER(external_bribe_address) AS external_bribe_address,\n        LOWER(pool_address) AS pool_address,\n        LOWER(contract_address) AS contract_address,\n        tx_hash,\n        event_index,\n        block_timestamp :: TIMESTAMP AS block_timestamp,\n        block_number,\n        '1970-01-01' :: DATE AS _inserted_timestamp\n    FROM\n        {{ ref('silver__velo_gauges_backfill') }}\n),\nnew_gauges AS (\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        event_index,\n        contract_address,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS gauge_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS external_bribe_address,\n        CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS pool_address,\n        CONCAT('0x', SUBSTR(segmented_data [0] :: STRING, 27, 40)) AS creator_address,\n        CONCAT('0x', SUBSTR(segmented_data [1] :: STRING, 27, 40)) AS internal_bribe_address,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics [0] :: STRING = '0xa4d97e9e7c65249b4cd01acb82add613adea98af32daf092366982f0a0d4e453'\n        AND contract_address = '0x09236cff45047dbee6b921e00704bed6d6b8cf7e'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nall_gauges AS (\n    SELECT\n        block_timestamp,\n        block_number,\n        tx_hash,\n        event_index,\n        contract_address,\n        gauge_address,\n        external_bribe_address,\n        internal_bribe_address,\n        pool_address,\n        creator_address,\n        _inserted_timestamp\n    FROM\n        backfill\n    UNION ALL\n    SELECT\n        block_timestamp,\n        block_number,\n        tx_hash,\n        event_index,\n        contract_address,\n        gauge_address,\n        external_bribe_address,\n        internal_bribe_address,\n        pool_address,\n        creator_address,\n        _inserted_timestamp\n    FROM\n        new_gauges\n),\ngauges AS (\n    SELECT\n        block_timestamp,\n        block_number,\n        tx_hash,\n        event_index,\n        contract_address,\n        gauge_address,\n        external_bribe_address,\n        internal_bribe_address,\n        pool_address,\n        creator_address,\n        _inserted_timestamp\n    FROM\n        all_gauges qualify(ROW_NUMBER() over(PARTITION BY gauge_address\n    ORDER BY\n        _inserted_timestamp DESC) = 1)\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        {{ ref('silver__velodrome_pools') }}\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    event_index,\n    contract_address,\n    gauge_address,\n    external_bribe_address,\n    internal_bribe_address,\n    creator_address,\n    A.pool_address AS pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    token0_address,\n    token1_address,\n    _inserted_timestamp\nFROM\n    gauges A\n    LEFT JOIN velo_pools b\n    ON A.pool_address = b.pool_address", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["seed.optimism_models.silver__velo_gauges_backfill", "model.optimism_models.silver__logs", "model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "gauge_address", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "velodrome", "silver__velodrome_gauges"], "unique_id": "model.optimism_models.silver__velodrome_gauges", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/silver__velodrome_gauges.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.sql", "name": "silver__velodrome_gauges", "alias": "velodrome_gauges", "checksum": {"name": "sha256", "checksum": "a0a2f60082e3a95477abbf155f4f492d49b4df6bb66b5532036bfac5905dd218"}, "tags": ["velodrome"], "refs": [["silver__velo_gauges_backfill"], ["silver__logs"], ["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE_ADDRESS": {"name": "GAUGE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTERNAL_BRIBE_ADDRESS": {"name": "EXTERNAL_BRIBE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTERNAL_BRIBE_ADDRESS": {"name": "INTERNAL_BRIBE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/silver__velodrome_gauges.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "gauge_address", "tags": ["velodrome"]}, "created_at": 1662493242.1498518, "compiled_sql": "\n\nWITH backfill AS (\n\n    SELECT\n        LOWER(gauge_address) AS gauge_address,\n        LOWER(creator_address) AS creator_address,\n        LOWER(internal_bribe_address) AS internal_bribe_address,\n        LOWER(external_bribe_address) AS external_bribe_address,\n        LOWER(pool_address) AS pool_address,\n        LOWER(contract_address) AS contract_address,\n        tx_hash,\n        event_index,\n        block_timestamp :: TIMESTAMP AS block_timestamp,\n        block_number,\n        '1970-01-01' :: DATE AS _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.velo_gauges_backfill\n),\nnew_gauges AS (\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        event_index,\n        contract_address,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS gauge_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS external_bribe_address,\n        CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS pool_address,\n        CONCAT('0x', SUBSTR(segmented_data [0] :: STRING, 27, 40)) AS creator_address,\n        CONCAT('0x', SUBSTR(segmented_data [1] :: STRING, 27, 40)) AS internal_bribe_address,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        topics [0] :: STRING = '0xa4d97e9e7c65249b4cd01acb82add613adea98af32daf092366982f0a0d4e453'\n        AND contract_address = '0x09236cff45047dbee6b921e00704bed6d6b8cf7e'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.velodrome_gauges\n)\n\n),\nall_gauges AS (\n    SELECT\n        block_timestamp,\n        block_number,\n        tx_hash,\n        event_index,\n        contract_address,\n        gauge_address,\n        external_bribe_address,\n        internal_bribe_address,\n        pool_address,\n        creator_address,\n        _inserted_timestamp\n    FROM\n        backfill\n    UNION ALL\n    SELECT\n        block_timestamp,\n        block_number,\n        tx_hash,\n        event_index,\n        contract_address,\n        gauge_address,\n        external_bribe_address,\n        internal_bribe_address,\n        pool_address,\n        creator_address,\n        _inserted_timestamp\n    FROM\n        new_gauges\n),\ngauges AS (\n    SELECT\n        block_timestamp,\n        block_number,\n        tx_hash,\n        event_index,\n        contract_address,\n        gauge_address,\n        external_bribe_address,\n        internal_bribe_address,\n        pool_address,\n        creator_address,\n        _inserted_timestamp\n    FROM\n        all_gauges qualify(ROW_NUMBER() over(PARTITION BY gauge_address\n    ORDER BY\n        _inserted_timestamp DESC) = 1)\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        OPTIMISM_DEV.silver.velodrome_pools\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    event_index,\n    contract_address,\n    gauge_address,\n    external_bribe_address,\n    internal_bribe_address,\n    creator_address,\n    A.pool_address AS pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    token0_address,\n    token1_address,\n    _inserted_timestamp\nFROM\n    gauges A\n    LEFT JOIN velo_pools b\n    ON A.pool_address = b.pool_address", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velodrome_gauges"}, "model.optimism_models.silver__velodrome_locks": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['velodrome']\n) }}\n\nWITH new_locks AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS provider_address,\n        CASE\n            WHEN topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' THEN TO_TIMESTAMP(PUBLIC.udf_hex_to_int(topics [2] :: STRING))\n            WHEN topics [0] :: STRING = '0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94' THEN TO_TIMESTAMP(\n                PUBLIC.udf_hex_to_int(\n                    segmented_data [2] :: STRING\n                )\n            )\n        END AS unlock_date,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) AS token_id,\n        (\n            PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT / pow(\n                10,\n                18\n            )\n        ) :: FLOAT AS velo_value,\n        CASE\n            WHEN topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [2] :: STRING\n            )\n        END AS deposit_type,\n        CASE\n            WHEN topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' THEN 'deposit'\n            WHEN topics [0] :: STRING = '0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94' THEN 'withdraw'\n        END AS velo_action,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics [0] :: STRING IN (\n            '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624',\n            '0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94'\n        ) -- velo locks / unlocks\n        AND contract_address = '0x9c7305eb78a432ced5c4d14cac27e8ed569a2e26'\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nvelo_price AS (\n    SELECT\n        HOUR,\n        price AS velo_price\n    FROM\n        {{ ref('silver__prices') }}\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                new_locks\n        )\n        AND symbol = 'VELO'\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    provider_address,\n    unlock_date,\n    velo_action,\n    token_id :: NUMBER AS token_id,\n    velo_value AS velo_amount,\n    ROUND(\n        velo_price * velo_value,\n        2\n    ) AS velo_amount_usd,\n    deposit_type,\n    _log_id,\n    _inserted_timestamp\nFROM\n    new_locks\n    LEFT JOIN velo_price\n    ON HOUR = DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.silver__logs", "model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "velodrome", "silver__velodrome_locks"], "unique_id": "model.optimism_models.silver__velodrome_locks", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/silver__velodrome_locks.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.sql", "name": "silver__velodrome_locks", "alias": "velodrome_locks", "checksum": {"name": "sha256", "checksum": "7ca35c039f1c83049bd9e2a72339d7253bdac2004653aa4e1dd55102fc737786"}, "tags": ["velodrome"], "refs": [["silver__logs"], ["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROVIDER_ADDRESS": {"name": "PROVIDER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNLOCK_DATE": {"name": "UNLOCK_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VELO_AMOUNT": {"name": "VELO_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VELO_AMOUNT_USD": {"name": "VELO_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPOSIT_TYPE": {"name": "DEPOSIT_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/silver__velodrome_locks.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"], "tags": ["velodrome"]}, "created_at": 1662493242.7890382, "compiled_sql": "\n\nWITH new_locks AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS provider_address,\n        CASE\n            WHEN topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' THEN TO_TIMESTAMP(PUBLIC.udf_hex_to_int(topics [2] :: STRING))\n            WHEN topics [0] :: STRING = '0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94' THEN TO_TIMESTAMP(\n                PUBLIC.udf_hex_to_int(\n                    segmented_data [2] :: STRING\n                )\n            )\n        END AS unlock_date,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) AS token_id,\n        (\n            PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT / pow(\n                10,\n                18\n            )\n        ) :: FLOAT AS velo_value,\n        CASE\n            WHEN topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' THEN PUBLIC.udf_hex_to_int(\n                segmented_data [2] :: STRING\n            )\n        END AS deposit_type,\n        CASE\n            WHEN topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' THEN 'deposit'\n            WHEN topics [0] :: STRING = '0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94' THEN 'withdraw'\n        END AS velo_action,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        topics [0] :: STRING IN (\n            '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624',\n            '0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94'\n        ) -- velo locks / unlocks\n        AND contract_address = '0x9c7305eb78a432ced5c4d14cac27e8ed569a2e26'\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.velodrome_locks\n)\n\n),\nvelo_price AS (\n    SELECT\n        HOUR,\n        price AS velo_price\n    FROM\n        OPTIMISM_DEV.silver.prices\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                new_locks\n        )\n        AND symbol = 'VELO'\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    provider_address,\n    unlock_date,\n    velo_action,\n    token_id :: NUMBER AS token_id,\n    velo_value AS velo_amount,\n    ROUND(\n        velo_price * velo_value,\n        2\n    ) AS velo_amount_usd,\n    deposit_type,\n    _log_id,\n    _inserted_timestamp\nFROM\n    new_locks\n    LEFT JOIN velo_price\n    ON HOUR = DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velodrome_locks"}, "model.optimism_models.velodrome__ez_votes": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    tags = ['velodrome']\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    gauge_address,\n    external_bribe_address,\n    internal_bribe_address,\n    pool_address,\n    pool_name,\n    from_address,\n    token_id,\n    vote_amount,\n    vote_action\nFROM\n    {{ ref('silver__velodrome_votes') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "velodrome", "fqn": ["optimism_models", "velodrome", "velodrome__ez_votes"], "unique_id": "model.optimism_models.velodrome__ez_votes", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/velodrome__ez_votes.sql", "original_file_path": "models/velodrome/velodrome__ez_votes.sql", "name": "velodrome__ez_votes", "alias": "ez_votes", "checksum": {"name": "sha256", "checksum": "e7c354ec3c82769cae05cb4ce65e43300838b148ac8d7f9ab80da674029610e6"}, "tags": ["velodrome"], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "This table contains details on LP voting events by VELO lockers on Velodrome.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE_ADDRESS": {"name": "GAUGE_ADDRESS", "description": "The address of the gauge in this vote or unvote. Gauges are used for voting on pools in a given epoch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTERNAL_BRIBE_ADDRESS": {"name": "EXTERNAL_BRIBE_ADDRESS", "description": "The external bribe address for the gauge used in the event. External bribes can come from anyone and are distributed to voters on that pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTERNAL_BRIBE_ADDRESS": {"name": "INTERNAL_BRIBE_ADDRESS", "description": "The internal bribe address for the gauge used in the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The pool address of the vote or unvote event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The pool name of the vote or unvote event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The address voting or unvoting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "The token ID associated with the vote or unvote event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_AMOUNT": {"name": "VOTE_AMOUNT", "description": "The amount of tokens voted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_ACTION": {"name": "VOTE_ACTION", "description": "The type of action, either vote or unvote.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/velodrome__ez_votes.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/velodrome__ez_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "tags": ["velodrome"]}, "created_at": 1662493242.918326, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    gauge_address,\n    external_bribe_address,\n    internal_bribe_address,\n    pool_address,\n    pool_name,\n    from_address,\n    token_id,\n    vote_amount,\n    vote_action\nFROM\n    OPTIMISM_DEV.silver.velodrome_votes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.velodrome.ez_votes"}, "model.optimism_models.velodrome__ez_pool_details": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    tags = ['velodrome']\n) }}\n\nSELECT\n    pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    token0_address,\n    token1_address,\n    token0_decimals,\n    token1_decimals,\n    created_timestamp,\n    created_block,\n    created_hash,\n    _inserted_timestamp\nFROM\n    {{ ref('silver__velodrome_pools') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "velodrome", "fqn": ["optimism_models", "velodrome", "velodrome__ez_pool_details"], "unique_id": "model.optimism_models.velodrome__ez_pool_details", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/velodrome__ez_pool_details.sql", "original_file_path": "models/velodrome/velodrome__ez_pool_details.sql", "name": "velodrome__ez_pool_details", "alias": "ez_pool_details", "checksum": {"name": "sha256", "checksum": "7ce1a8930ad7bc8e2afde5c4f9ff7d386c8fbce6c29807c074347e13f401a02e"}, "tags": ["velodrome"], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "This table contains metadata details for liquidity pools on Velodrome.", "columns": {"POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The address of the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_TYPE": {"name": "POOL_TYPE", "description": "The type of liquidity pool, either stable or volatile. Stable pools are designed for assets which have little to no volatility. Volatile pools are designed for assets with high price volatility, and use a generic AMM formula.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "The symbol of token0 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "The symbol of token1 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "The address of token0 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "The address of token1 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_DECIMALS": {"name": "TOKEN0_DECIMALS", "description": "The decimals of token0 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_DECIMALS": {"name": "TOKEN1_DECIMALS", "description": "The decimals of token1 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_TIMESTAMP": {"name": "CREATED_TIMESTAMP", "description": "The timestamp the pool was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_BLOCK": {"name": "CREATED_BLOCK", "description": "The block at which the pool was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_HASH": {"name": "CREATED_HASH", "description": "The tx hash in which the pool was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/velodrome__ez_pool_details.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/velodrome__ez_pool_details.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "tags": ["velodrome"]}, "created_at": 1662493242.923289, "compiled_sql": "\n\nSELECT\n    pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    token0_address,\n    token1_address,\n    token0_decimals,\n    token1_decimals,\n    created_timestamp,\n    created_block,\n    created_hash,\n    _inserted_timestamp\nFROM\n    OPTIMISM_DEV.silver.velodrome_pools", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.velodrome.ez_pool_details"}, "model.optimism_models.velodrome__ez_swaps": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    tags = ['velodrome']\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    tx_hash,\n    event_index,\n    platform,\n    contract_address,\n    pool_address,\n    pool_name,\n    sender_address,\n    to_address,\n    amount_in,\n    amount_in_usd,\n    amount_out,\n    amount_out_usd,\n    token_address_in,\n    token_address_out,\n    symbol_in,\n    symbol_out,\n    lp_fee,\n    lp_fee_usd,\n    lp_fee_symbol,\n    lp_fee_token_address\nFROM\n    {{ ref('silver__velodrome_swaps') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "velodrome", "fqn": ["optimism_models", "velodrome", "velodrome__ez_swaps"], "unique_id": "model.optimism_models.velodrome__ez_swaps", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/velodrome__ez_swaps.sql", "original_file_path": "models/velodrome/velodrome__ez_swaps.sql", "name": "velodrome__ez_swaps", "alias": "ez_swaps", "checksum": {"name": "sha256", "checksum": "160dad563b94c08e233910af2f810d442cbefb58bd149ded7fce36b09784558d"}, "tags": ["velodrome"], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "This table contains details on swaps executed on Velodrome.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "The index of this event within this transcation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "The name of the dex. In this case, Velodrome.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address of the contract interacted with in the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The address of the liquidity pool used for the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the liquidity pool used for the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER_ADDRESS": {"name": "SENDER_ADDRESS", "description": "The sender of the swap event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiver of the swap event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "The amount of tokens in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN_USD": {"name": "AMOUNT_IN_USD", "description": "The amount of tokens in, in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "The amount of tokens out.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT_USD": {"name": "AMOUNT_OUT_USD", "description": "The amount of tokens out, in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS_IN": {"name": "TOKEN_ADDRESS_IN", "description": "The contract address of the token in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS_OUT": {"name": "TOKEN_ADDRESS_OUT", "description": "The contract address of the token out.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_IN": {"name": "SYMBOL_IN", "description": "The symbol of the token in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_OUT": {"name": "SYMBOL_OUT", "description": "The symbol of the token out.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_FEE": {"name": "LP_FEE", "description": "The amount of tokens paid to the LP as a fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_FEE_USD": {"name": "LP_FEE_USD", "description": "The amount of tokens paid to the LP as a fee, in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_FEE_SYMBOL": {"name": "LP_FEE_SYMBOL", "description": "The symbol of the LP token fees.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_FEE_TOKEN_ADDRESS": {"name": "LP_FEE_TOKEN_ADDRESS", "description": "The contract address of the LP token fees.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/velodrome__ez_swaps.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/velodrome__ez_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "tags": ["velodrome"]}, "created_at": 1662493242.9306052, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    tx_hash,\n    event_index,\n    platform,\n    contract_address,\n    pool_address,\n    pool_name,\n    sender_address,\n    to_address,\n    amount_in,\n    amount_in_usd,\n    amount_out,\n    amount_out_usd,\n    token_address_in,\n    token_address_out,\n    symbol_in,\n    symbol_out,\n    lp_fee,\n    lp_fee_usd,\n    lp_fee_symbol,\n    lp_fee_token_address\nFROM\n    OPTIMISM_DEV.silver.velodrome_swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.velodrome.ez_swaps"}, "model.optimism_models.silver__velodrome_claimed_rewards": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['velodrome']\n) }}\n\nWITH velo_distributions AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) :: INTEGER AS token_id,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [1] :: STRING\n        ) :: FLOAT / pow(\n            10,\n            18\n        ) :: FLOAT AS claimed_amount,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [2] :: STRING\n        ) :: INTEGER AS claim_epoch,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [3] :: STRING\n        ) :: INTEGER AS max_epoch,\n        'venft_distribution' AS reward_type,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics [0] :: STRING = '0xcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f00'\n        AND contract_address = '0x5d5bea9f0fc13d967511668a60a3369fd53f784f'\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nstaking_rewards AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) :: INTEGER AS amount_unadj,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS from_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS reward_token,\n        CASE\n            WHEN origin_to_address = '0x6b8edc43de878fd5cd5113c42747d32500db3873' THEN 'lp_reward'\n            ELSE 'voter_reward'\n        END AS reward_type,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics [0] :: STRING = '0x9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc9'\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        symbol,\n        token_address,\n        price\n    FROM\n        {{ ref('silver__prices') }}\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                velo_distributions\n        )\n        OR HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                staking_rewards\n        )\n),\nvenft_distrbutions AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        token_id,\n        reward_type,\n        claimed_amount,\n        ROUND(\n            price * claimed_amount,\n            2\n        ) AS claimed_amount_usd,\n        symbol AS token_symbol,\n        token_address,\n        claim_epoch,\n        max_epoch,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        velo_distributions\n        LEFT JOIN token_prices\n        ON HOUR = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n    WHERE\n        symbol = 'VELO'\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        {{ ref('silver__velodrome_pools') }}\n),\nlp_fees_meta AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        amount_unadj,\n        COALESCE(\n            p0.token0_decimals,\n            p1.token1_decimals\n        ) AS decimals,\n        COALESCE(\n            p0.token0_symbol,\n            p1.token1_symbol\n        ) AS token_symbol,\n        CASE\n            WHEN decimals IS NOT NULL THEN amount_unadj / pow(\n                10,\n                decimals\n            )\n            ELSE amount_unadj\n        END AS claimed_amount,\n        CASE\n            WHEN decimals IS NOT NULL THEN ROUND(\n                claimed_amount * price,\n                2\n            )\n            ELSE NULL\n        END AS claimed_amount_usd,\n        from_address,\n        reward_token,\n        reward_type,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        staking_rewards\n        LEFT JOIN velo_pools p0\n        ON p0.token0_address = reward_token\n        LEFT JOIN velo_pools p1\n        ON p1.token1_address = reward_token\n        LEFT JOIN token_prices\n        ON HOUR = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n        AND token_address = reward_token\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        reward_type,\n        token_id,\n        claimed_amount,\n        claimed_amount_usd,\n        token_symbol,\n        token_address,\n        claim_epoch,\n        max_epoch,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        venft_distrbutions\n    UNION ALL\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        reward_type,\n        NULL AS token_id,\n        claimed_amount,\n        claimed_amount_usd,\n        token_symbol,\n        reward_token AS token_address,\n        NULL AS claim_epoch,\n        NULL AS max_epoch,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        lp_fees_meta\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    reward_type,\n    token_id,\n    claimed_amount,\n    claimed_amount_usd,\n    token_symbol,\n    token_address,\n    claim_epoch,\n    max_epoch,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.silver__logs", "model.optimism_models.silver__logs", "model.optimism_models.silver__prices", "model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "velodrome", "silver__velodrome_claimed_rewards"], "unique_id": "model.optimism_models.silver__velodrome_claimed_rewards", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/silver__velodrome_claimed_rewards.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.sql", "name": "silver__velodrome_claimed_rewards", "alias": "velodrome_claimed_rewards", "checksum": {"name": "sha256", "checksum": "e959d2a96d6b67cda2ba30789c2e97882277dd32519d294e5bb51ab60942bba0"}, "tags": ["velodrome"], "refs": [["silver__logs"], ["silver__logs"], ["silver__prices"], ["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARD_TYPE": {"name": "REWARD_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLAIMED_AMOUNT": {"name": "CLAIMED_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_SYMBOL": {"name": "TOKEN_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLAIM_EPOCH": {"name": "CLAIM_EPOCH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_EPOCH": {"name": "MAX_EPOCH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/silver__velodrome_claimed_rewards.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"], "tags": ["velodrome"]}, "created_at": 1662493242.2811909, "compiled_sql": "\n\nWITH velo_distributions AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) :: INTEGER AS token_id,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [1] :: STRING\n        ) :: FLOAT / pow(\n            10,\n            18\n        ) :: FLOAT AS claimed_amount,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [2] :: STRING\n        ) :: INTEGER AS claim_epoch,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [3] :: STRING\n        ) :: INTEGER AS max_epoch,\n        'venft_distribution' AS reward_type,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        topics [0] :: STRING = '0xcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f00'\n        AND contract_address = '0x5d5bea9f0fc13d967511668a60a3369fd53f784f'\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.velodrome_claimed_rewards\n)\n\n),\nstaking_rewards AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) :: INTEGER AS amount_unadj,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS from_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS reward_token,\n        CASE\n            WHEN origin_to_address = '0x6b8edc43de878fd5cd5113c42747d32500db3873' THEN 'lp_reward'\n            ELSE 'voter_reward'\n        END AS reward_type,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        topics [0] :: STRING = '0x9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc9'\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.velodrome_claimed_rewards\n)\n\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        symbol,\n        token_address,\n        price\n    FROM\n        OPTIMISM_DEV.silver.prices\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                velo_distributions\n        )\n        OR HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                staking_rewards\n        )\n),\nvenft_distrbutions AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        token_id,\n        reward_type,\n        claimed_amount,\n        ROUND(\n            price * claimed_amount,\n            2\n        ) AS claimed_amount_usd,\n        symbol AS token_symbol,\n        token_address,\n        claim_epoch,\n        max_epoch,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        velo_distributions\n        LEFT JOIN token_prices\n        ON HOUR = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n    WHERE\n        symbol = 'VELO'\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        OPTIMISM_DEV.silver.velodrome_pools\n),\nlp_fees_meta AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        amount_unadj,\n        COALESCE(\n            p0.token0_decimals,\n            p1.token1_decimals\n        ) AS decimals,\n        COALESCE(\n            p0.token0_symbol,\n            p1.token1_symbol\n        ) AS token_symbol,\n        CASE\n            WHEN decimals IS NOT NULL THEN amount_unadj / pow(\n                10,\n                decimals\n            )\n            ELSE amount_unadj\n        END AS claimed_amount,\n        CASE\n            WHEN decimals IS NOT NULL THEN ROUND(\n                claimed_amount * price,\n                2\n            )\n            ELSE NULL\n        END AS claimed_amount_usd,\n        from_address,\n        reward_token,\n        reward_type,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        staking_rewards\n        LEFT JOIN velo_pools p0\n        ON p0.token0_address = reward_token\n        LEFT JOIN velo_pools p1\n        ON p1.token1_address = reward_token\n        LEFT JOIN token_prices\n        ON HOUR = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n        AND token_address = reward_token\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        reward_type,\n        token_id,\n        claimed_amount,\n        claimed_amount_usd,\n        token_symbol,\n        token_address,\n        claim_epoch,\n        max_epoch,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        venft_distrbutions\n    UNION ALL\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        reward_type,\n        NULL AS token_id,\n        claimed_amount,\n        claimed_amount_usd,\n        token_symbol,\n        reward_token AS token_address,\n        NULL AS claim_epoch,\n        NULL AS max_epoch,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        lp_fees_meta\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    reward_type,\n    token_id,\n    claimed_amount,\n    claimed_amount_usd,\n    token_symbol,\n    token_address,\n    claim_epoch,\n    max_epoch,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velodrome_claimed_rewards"}, "model.optimism_models.velodrome__ez_claimed_rewards": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    tags = ['velodrome']\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    reward_type,\n    token_id,\n    claimed_amount,\n    claimed_amount_usd,\n    token_symbol,\n    token_address,\n    claim_epoch,\n    max_epoch\nFROM\n    {{ ref('silver__velodrome_claimed_rewards') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "velodrome", "fqn": ["optimism_models", "velodrome", "velodrome__ez_claimed_rewards"], "unique_id": "model.optimism_models.velodrome__ez_claimed_rewards", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/velodrome__ez_claimed_rewards.sql", "original_file_path": "models/velodrome/velodrome__ez_claimed_rewards.sql", "name": "velodrome__ez_claimed_rewards", "alias": "ez_claimed_rewards", "checksum": {"name": "sha256", "checksum": "537624f7a6e41e5466ca24b460ef66f3c65558f87356c78eea76dc24dfa6d0a9"}, "tags": ["velodrome"], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "This table contains details about claimed rewards on Velodrome. Rewards are paid to VELO lockers, LP token stakers, and veVELO voters. Please use the `reward_type` column to analyze the different types of claimed rewards.\n\n`venft_distribution` -> paid to VELO lockers\n`lp_reward` -> paid to LP token stakers\n`voter_rewards` -> paid to locked VELO votes", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The contract address interacted with in this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "The event index within the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARD_TYPE": {"name": "REWARD_TYPE", "description": "The type of rewards claimed, either `voter_rewards`, `venft_distribution`, or `lp_reward`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "The veNFT token ID. Only applies to veNFT distributions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLAIMED_AMOUNT": {"name": "CLAIMED_AMOUNT", "description": "The amount of tokens claimed, decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLAIMED_AMOUNT_USD": {"name": "CLAIMED_AMOUNT_USD", "description": "The amount of tokens claimed, in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_SYMBOL": {"name": "TOKEN_SYMBOL", "description": "The symbol of the claimed tokens.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "The contract address of the claimed tokens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLAIM_EPOCH": {"name": "CLAIM_EPOCH", "description": "The claim epoch, only applicable to veNFT distributions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_EPOCH": {"name": "MAX_EPOCH", "description": "The max epoch, only applicable to veNFT distributions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/velodrome__ez_claimed_rewards.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/velodrome__ez_claimed_rewards.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "tags": ["velodrome"]}, "created_at": 1662493242.416474, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    reward_type,\n    token_id,\n    claimed_amount,\n    claimed_amount_usd,\n    token_symbol,\n    token_address,\n    claim_epoch,\n    max_epoch\nFROM\n    OPTIMISM_DEV.silver.velodrome_claimed_rewards", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.velodrome.ez_claimed_rewards"}, "model.optimism_models.velodrome__ez_staking_actions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    tags = ['velodrome']\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    staking_action_type,\n    lp_token_amount,\n    lp_provider_address,\n    gauge_address,\n    pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    token0_address,\n    token1_address\nFROM\n    {{ ref('silver__velodrome_staking_actions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "velodrome", "fqn": ["optimism_models", "velodrome", "velodrome__ez_staking_actions"], "unique_id": "model.optimism_models.velodrome__ez_staking_actions", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/velodrome__ez_staking_actions.sql", "original_file_path": "models/velodrome/velodrome__ez_staking_actions.sql", "name": "velodrome__ez_staking_actions", "alias": "ez_staking_actions", "checksum": {"name": "sha256", "checksum": "31e76befe8374283988ca1e6f1378490b13daac3773923a6f2f1d249be10a7e1"}, "tags": ["velodrome"], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "This table contains details on liquidity pool staking actions for Velodrome.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The contract address interacted with in this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "The index of this event within the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKING_ACTION_TYPE": {"name": "STAKING_ACTION_TYPE", "description": "The type of staking action, either deposit or withdraw.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_TOKEN_AMOUNT": {"name": "LP_TOKEN_AMOUNT", "description": "The amount of LP tokens deposited or withdrawn.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_PROVIDER_ADDRESS": {"name": "LP_PROVIDER_ADDRESS", "description": "The address of the liquidity provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE_ADDRESS": {"name": "GAUGE_ADDRESS", "description": "The address of the gauge. Gauges are used for voting on pools in a given epoch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The address of the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_TYPE": {"name": "POOL_TYPE", "description": "The type of liquidity pool, either stable or volatile. Stable pools are designed for assets which have little to no volatility. Volatile pools are designed for assets with high price volatility, and use a generic AMM formula.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "The symbol of token0 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "The symbol of token0 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "The address of token0 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "The address of token1 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/velodrome__ez_staking_actions.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/velodrome__ez_staking_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "tags": ["velodrome"]}, "created_at": 1662493242.600628, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    staking_action_type,\n    lp_token_amount,\n    lp_provider_address,\n    gauge_address,\n    pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    token0_address,\n    token1_address\nFROM\n    OPTIMISM_DEV.silver.velodrome_staking_actions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.velodrome.ez_staking_actions"}, "model.optimism_models.silver__velodrome_LP_actions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['velodrome']\n) }}\n\nWITH lp_actions AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CASE\n            WHEN topics [0] :: STRING IN(\n                '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n                '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n            ) THEN CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40))\n        END AS sender_address,\n        CASE\n            WHEN topics [0] :: STRING IN(\n                '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n                '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n            ) THEN PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT\n        END AS amount0_unadj,\n        CASE\n            WHEN topics [0] :: STRING IN(\n                '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n                '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n            ) THEN PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT\n        END AS amount1_unadj,\n        CASE\n            WHEN topics [0] :: STRING IN(\n                '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n                '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n            ) THEN CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40))\n        END AS to_address,\n        CASE\n            WHEN topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' THEN (\n                PUBLIC.udf_hex_to_int(\n                    segmented_data [0] :: STRING\n                ) :: FLOAT / pow(\n                    10,\n                    18\n                )\n            )\n        END AS lp_token_amount,\n        CASE\n            WHEN topics [0] :: STRING = '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f' THEN 'deposit'\n            WHEN topics [0] :: STRING = '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496' THEN 'withdraw'\n        END AS lp_action,\n        CASE\n            WHEN topics [0] :: STRING = '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f' THEN 'mint'\n            WHEN topics [0] :: STRING = '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496' THEN 'burn'\n        END AS lp_token_action,\n        topics [0] :: STRING AS function_type,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        (\n            topics [0] :: STRING = '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f' -- deposits\n            OR (\n                topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- lp mints\n                AND topics [1] :: STRING = '0x0000000000000000000000000000000000000000000000000000000000000000'\n            )\n            OR topics [0] :: STRING = '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496' -- withdrawls\n            OR (\n                topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- lp burns\n                AND topics [2] :: STRING = '0x0000000000000000000000000000000000000000000000000000000000000000'\n            )\n        )\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        {{ ref('silver__velodrome_pools') }}\n),\nlp_tokens_actions AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        lp_token_amount\n    FROM\n        lp_actions\n    WHERE\n        function_type = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price\n    FROM\n        {{ ref('silver__prices') }}\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                lp_actions\n        )\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        A.tx_hash AS tx_hash,\n        event_index,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        A.contract_address AS contract_address,\n        sender_address,\n        amount0_unadj,\n        amount1_unadj,\n        lp_action,\n        lp_token_action,\n        function_type,\n        _log_id,\n        _inserted_timestamp,\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals,\n        CASE\n            WHEN token0_decimals IS NOT NULL THEN amount0_unadj / pow(\n                10,\n                token0_decimals\n            )\n            ELSE amount0_unadj\n        END AS token_0_amount,\n        CASE\n            WHEN token1_decimals IS NOT NULL THEN amount1_unadj / pow(\n                10,\n                token1_decimals\n            )\n            ELSE amount1_unadj\n        END AS token_1_amount,\n        CASE\n            WHEN token0_decimals IS NOT NULL THEN ROUND(\n                token_0_amount * p0.price,\n                2\n            )\n            ELSE NULL\n        END AS token_0_amount_usd,\n        CASE\n            WHEN token1_decimals IS NOT NULL THEN ROUND(\n                token_1_amount * p1.price,\n                2\n            )\n            ELSE NULL\n        END AS token_1_amount_usd,\n        b.lp_token_amount AS lp_token_amount,\n        token_1_amount_usd + token_0_amount_usd AS lp_token_amount_usd\n    FROM\n        lp_actions A\n        INNER JOIN velo_pools\n        ON LOWER(\n            A.contract_address\n        ) = LOWER(\n            velo_pools.pool_address\n        )\n        LEFT JOIN token_prices AS p0\n        ON p0.hour = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n        AND token0_address = p0.token_address\n        LEFT JOIN token_prices AS p1\n        ON p1.hour = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n        AND token1_address = p1.token_address\n        LEFT JOIN lp_tokens_actions b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.contract_address\n    WHERE\n        function_type IN(\n            '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n            '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    pool_address,\n    pool_name,\n    pool_type,\n    sender_address,\n    lp_action,\n    token0_symbol,\n    token1_symbol,\n    token_0_amount AS token0_amount,\n    token_1_amount AS token1_amount,\n    token_0_amount_usd AS token0_amount_usd,\n    token_1_amount_usd AS token1_amount_usd,\n    token0_address,\n    token1_address,\n    lp_token_action,\n    lp_token_amount,\n    lp_token_amount_usd,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.silver__logs", "model.optimism_models.silver__velodrome_pools", "model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "velodrome", "silver__velodrome_LP_actions"], "unique_id": "model.optimism_models.silver__velodrome_LP_actions", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/silver__velodrome_LP_actions.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.sql", "name": "silver__velodrome_LP_actions", "alias": "velodrome_LP_actions", "checksum": {"name": "sha256", "checksum": "ed3fbcfbd0162185801d91629fcf22243b03e9f06a966006e515ce9bc83aa624"}, "tags": ["velodrome"], "refs": [["silver__logs"], ["silver__velodrome_pools"], ["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_TYPE": {"name": "POOL_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER_ADDRESS": {"name": "SENDER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_ACTION": {"name": "LP_ACTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_AMOUNT": {"name": "TOKEN0_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_AMOUNT": {"name": "TOKEN1_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_TOKEN_ACTION": {"name": "LP_TOKEN_ACTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_TOKEN_AMOUNT": {"name": "LP_TOKEN_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/silver__velodrome_LP_actions.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"], "tags": ["velodrome"]}, "created_at": 1662493242.4249222, "compiled_sql": "\n\nWITH lp_actions AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CASE\n            WHEN topics [0] :: STRING IN(\n                '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n                '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n            ) THEN CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40))\n        END AS sender_address,\n        CASE\n            WHEN topics [0] :: STRING IN(\n                '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n                '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n            ) THEN PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT\n        END AS amount0_unadj,\n        CASE\n            WHEN topics [0] :: STRING IN(\n                '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n                '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n            ) THEN PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT\n        END AS amount1_unadj,\n        CASE\n            WHEN topics [0] :: STRING IN(\n                '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n                '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n            ) THEN CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40))\n        END AS to_address,\n        CASE\n            WHEN topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' THEN (\n                PUBLIC.udf_hex_to_int(\n                    segmented_data [0] :: STRING\n                ) :: FLOAT / pow(\n                    10,\n                    18\n                )\n            )\n        END AS lp_token_amount,\n        CASE\n            WHEN topics [0] :: STRING = '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f' THEN 'deposit'\n            WHEN topics [0] :: STRING = '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496' THEN 'withdraw'\n        END AS lp_action,\n        CASE\n            WHEN topics [0] :: STRING = '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f' THEN 'mint'\n            WHEN topics [0] :: STRING = '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496' THEN 'burn'\n        END AS lp_token_action,\n        topics [0] :: STRING AS function_type,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        (\n            topics [0] :: STRING = '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f' -- deposits\n            OR (\n                topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- lp mints\n                AND topics [1] :: STRING = '0x0000000000000000000000000000000000000000000000000000000000000000'\n            )\n            OR topics [0] :: STRING = '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496' -- withdrawls\n            OR (\n                topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- lp burns\n                AND topics [2] :: STRING = '0x0000000000000000000000000000000000000000000000000000000000000000'\n            )\n        )\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.velodrome_LP_actions\n)\n\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        OPTIMISM_DEV.silver.velodrome_pools\n),\nlp_tokens_actions AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        lp_token_amount\n    FROM\n        lp_actions\n    WHERE\n        function_type = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price\n    FROM\n        OPTIMISM_DEV.silver.prices\n    WHERE\n        HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                lp_actions\n        )\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        A.tx_hash AS tx_hash,\n        event_index,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        A.contract_address AS contract_address,\n        sender_address,\n        amount0_unadj,\n        amount1_unadj,\n        lp_action,\n        lp_token_action,\n        function_type,\n        _log_id,\n        _inserted_timestamp,\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals,\n        CASE\n            WHEN token0_decimals IS NOT NULL THEN amount0_unadj / pow(\n                10,\n                token0_decimals\n            )\n            ELSE amount0_unadj\n        END AS token_0_amount,\n        CASE\n            WHEN token1_decimals IS NOT NULL THEN amount1_unadj / pow(\n                10,\n                token1_decimals\n            )\n            ELSE amount1_unadj\n        END AS token_1_amount,\n        CASE\n            WHEN token0_decimals IS NOT NULL THEN ROUND(\n                token_0_amount * p0.price,\n                2\n            )\n            ELSE NULL\n        END AS token_0_amount_usd,\n        CASE\n            WHEN token1_decimals IS NOT NULL THEN ROUND(\n                token_1_amount * p1.price,\n                2\n            )\n            ELSE NULL\n        END AS token_1_amount_usd,\n        b.lp_token_amount AS lp_token_amount,\n        token_1_amount_usd + token_0_amount_usd AS lp_token_amount_usd\n    FROM\n        lp_actions A\n        INNER JOIN velo_pools\n        ON LOWER(\n            A.contract_address\n        ) = LOWER(\n            velo_pools.pool_address\n        )\n        LEFT JOIN token_prices AS p0\n        ON p0.hour = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n        AND token0_address = p0.token_address\n        LEFT JOIN token_prices AS p1\n        ON p1.hour = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n        AND token1_address = p1.token_address\n        LEFT JOIN lp_tokens_actions b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.contract_address\n    WHERE\n        function_type IN(\n            '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496',\n            '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    pool_address,\n    pool_name,\n    pool_type,\n    sender_address,\n    lp_action,\n    token0_symbol,\n    token1_symbol,\n    token_0_amount AS token0_amount,\n    token_1_amount AS token1_amount,\n    token_0_amount_usd AS token0_amount_usd,\n    token_1_amount_usd AS token1_amount_usd,\n    token0_address,\n    token1_address,\n    lp_token_action,\n    lp_token_amount,\n    lp_token_amount_usd,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velodrome_LP_actions"}, "model.optimism_models.silver__velodrome_staking_actions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['velodrome']\n) }}\n\nWITH staking_actions AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CASE\n            WHEN topics [0] :: STRING = '0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7' THEN 'deposit'\n            WHEN topics [0] :: STRING = '0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567' THEN 'withdraw'\n        END AS staking_action_type,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) :: INTEGER AS token_id,\n        (\n            PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT / pow(\n                10,\n                18\n            )\n        ) :: FLOAT AS amount,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS lp_provider_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS gauge_address,\n        _inserted_timestamp,\n        _log_id\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics [0] :: STRING IN (\n            '0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7',\n            '0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567'\n        ) -- deposit / withdrawal\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntoken_transfer AS (\n    SELECT\n        tx_hash,\n        event_index,\n        contract_address AS pool_address,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS gauge_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS lp_provider_address,\n        (\n            PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT / pow(\n                10,\n                18\n            )\n        ) :: FLOAT AS amount\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        block_timestamp IN (\n            SELECT\n                DISTINCT block_timestamp\n            FROM\n                staking_actions\n        )\n        AND tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                staking_actions\n        )\n        AND topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        {{ ref('silver__velodrome_pools') }}\n)\nSELECT\n    block_number,\n    block_timestamp,\n    A.tx_hash AS tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    A.event_index AS event_index,\n    staking_action_type,\n    A.amount AS lp_token_amount,\n    A.lp_provider_address AS lp_provider_address,\n    A.gauge_address AS gauge_address,\n    b.pool_address AS pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    token0_address,\n    token1_address,\n    _inserted_timestamp,\n    _log_id\nFROM\n    staking_actions A\n    LEFT JOIN token_transfer b\n    ON A.tx_hash = b.tx_hash\n    AND A.amount = b.amount\n    INNER JOIN velo_pools C\n    ON b.pool_address = C.pool_address qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.silver__logs", "model.optimism_models.silver__logs", "model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "velodrome", "silver__velodrome_staking_actions"], "unique_id": "model.optimism_models.silver__velodrome_staking_actions", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/silver__velodrome_staking_actions.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.sql", "name": "silver__velodrome_staking_actions", "alias": "velodrome_staking_actions", "checksum": {"name": "sha256", "checksum": "3b6ae988923746cf10ec66d6c2ae9e116e47ccd9824c30bf2c34ac6f992fa83c"}, "tags": ["velodrome"], "refs": [["silver__logs"], ["silver__logs"], ["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKING_ACTION_TYPE": {"name": "STAKING_ACTION_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE_ADDRESS": {"name": "GAUGE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_PROVIDER_ADDRESS": {"name": "LP_PROVIDER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_TYPE": {"name": "POOL_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_TOKEN_AMOUNT": {"name": "LP_TOKEN_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/silver__velodrome_staking_actions.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"], "tags": ["velodrome"]}, "created_at": 1662493242.609025, "compiled_sql": "\n\nWITH staking_actions AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_index,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CASE\n            WHEN topics [0] :: STRING = '0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7' THEN 'deposit'\n            WHEN topics [0] :: STRING = '0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567' THEN 'withdraw'\n        END AS staking_action_type,\n        PUBLIC.udf_hex_to_int(\n            segmented_data [0] :: STRING\n        ) :: INTEGER AS token_id,\n        (\n            PUBLIC.udf_hex_to_int(\n                segmented_data [1] :: STRING\n            ) :: FLOAT / pow(\n                10,\n                18\n            )\n        ) :: FLOAT AS amount,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS lp_provider_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS gauge_address,\n        _inserted_timestamp,\n        _log_id\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        topics [0] :: STRING IN (\n            '0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7',\n            '0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567'\n        ) -- deposit / withdrawal\n        AND tx_status = 'SUCCESS'\n        AND event_removed = 'false'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.velodrome_staking_actions\n)\n\n),\ntoken_transfer AS (\n    SELECT\n        tx_hash,\n        event_index,\n        contract_address AS pool_address,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS gauge_address,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS lp_provider_address,\n        (\n            PUBLIC.udf_hex_to_int(\n                segmented_data [0] :: STRING\n            ) :: FLOAT / pow(\n                10,\n                18\n            )\n        ) :: FLOAT AS amount\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        block_timestamp IN (\n            SELECT\n                DISTINCT block_timestamp\n            FROM\n                staking_actions\n        )\n        AND tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                staking_actions\n        )\n        AND topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.silver.velodrome_staking_actions\n)\n\n),\nvelo_pools AS (\n    SELECT\n        pool_address,\n        pool_name,\n        pool_type,\n        token0_symbol,\n        token1_symbol,\n        token0_address,\n        token1_address,\n        token0_decimals,\n        token1_decimals\n    FROM\n        OPTIMISM_DEV.silver.velodrome_pools\n)\nSELECT\n    block_number,\n    block_timestamp,\n    A.tx_hash AS tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    A.event_index AS event_index,\n    staking_action_type,\n    A.amount AS lp_token_amount,\n    A.lp_provider_address AS lp_provider_address,\n    A.gauge_address AS gauge_address,\n    b.pool_address AS pool_address,\n    pool_name,\n    pool_type,\n    token0_symbol,\n    token1_symbol,\n    token0_address,\n    token1_address,\n    _inserted_timestamp,\n    _log_id\nFROM\n    staking_actions A\n    LEFT JOIN token_transfer b\n    ON A.tx_hash = b.tx_hash\n    AND A.amount = b.amount\n    INNER JOIN velo_pools C\n    ON b.pool_address = C.pool_address qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velodrome_staking_actions"}, "model.optimism_models.velodrome__ez_lp_actions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    tags = ['velodrome']\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    pool_address,\n    pool_name,\n    pool_type,\n    sender_address,\n    lp_action,\n    token0_symbol,\n    token1_symbol,\n    token0_amount,\n    token1_amount,\n    token0_amount_usd,\n    token1_amount_usd,\n    token0_address,\n    token1_address,\n    lp_token_action,\n    lp_token_amount,\n    lp_token_amount_usd\nFROM\n    {{ ref('silver__velodrome_LP_actions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "velodrome", "fqn": ["optimism_models", "velodrome", "velodrome__ez_lp_actions"], "unique_id": "model.optimism_models.velodrome__ez_lp_actions", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/velodrome__ez_lp_actions.sql", "original_file_path": "models/velodrome/velodrome__ez_lp_actions.sql", "name": "velodrome__ez_lp_actions", "alias": "ez_lp_actions", "checksum": {"name": "sha256", "checksum": "75dcefd8387ef62dff91666f9b40f35578b099455c6f6e4a4dc9ee6a88cbab1d"}, "tags": ["velodrome"], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "This table contains details about deposits and withdraws into Velodrome liquidity pools.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The address of the Velodrome liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the Velodrome liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_TYPE": {"name": "POOL_TYPE", "description": "The type of liquidity pool, either stable or volatile. Stable pools are designed for assets which have little to no volatility. Volatile pools are designed for assets with high price volatility, and use a generic AMM formula.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER_ADDRESS": {"name": "SENDER_ADDRESS", "description": "The sender of the liquidity action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_ACTION": {"name": "LP_ACTION", "description": "The liquidity action, either deposit or withdraw.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "The symbol of token0 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "The symbol of token1 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_AMOUNT": {"name": "TOKEN0_AMOUNT", "description": "The amount of token0 deposited or withdrawn.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_AMOUNT": {"name": "TOKEN1_AMOUNT", "description": "The amount of token1 deposited or withdrawn.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_AMOUNT_USD": {"name": "TOKEN0_AMOUNT_USD", "description": "The amount of token0 in USD deposited or withdrawn.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_AMOUNT_USD": {"name": "TOKEN1_AMOUNT_USD", "description": "The amount of token1 in USD deposited or withdrawn.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "The address of token0 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "The address of token1 in the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_TOKEN_ACTION": {"name": "LP_TOKEN_ACTION", "description": "The LP token action, either mint or burn.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_TOKEN_AMOUNT": {"name": "LP_TOKEN_AMOUNT", "description": "The amount of LP tokens minted or burned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_TOKEN_AMOUNT_USD": {"name": "LP_TOKEN_AMOUNT_USD", "description": "The amount of LP tokens minted or burned in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/velodrome__ez_lp_actions.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/velodrome__ez_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "tags": ["velodrome"]}, "created_at": 1662493242.7771032, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    pool_address,\n    pool_name,\n    pool_type,\n    sender_address,\n    lp_action,\n    token0_symbol,\n    token1_symbol,\n    token0_amount,\n    token1_amount,\n    token0_amount_usd,\n    token1_amount_usd,\n    token0_address,\n    token1_address,\n    lp_token_action,\n    lp_token_amount,\n    lp_token_amount_usd\nFROM\n    OPTIMISM_DEV.silver.velodrome_LP_actions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.velodrome.ez_lp_actions"}, "model.optimism_models.velodrome__ez_velo_locks": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    tags = ['velodrome']\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    provider_address,\n    velo_action,\n    unlock_date,\n    token_id,\n    velo_amount,\n    velo_amount_usd,\n    deposit_type\nFROM\n    {{ ref('silver__velodrome_locks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["velodrome"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "velodrome", "fqn": ["optimism_models", "velodrome", "velodrome__ez_velo_locks"], "unique_id": "model.optimism_models.velodrome__ez_velo_locks", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "velodrome/velodrome__ez_velo_locks.sql", "original_file_path": "models/velodrome/velodrome__ez_velo_locks.sql", "name": "velodrome__ez_velo_locks", "alias": "ez_velo_locks", "checksum": {"name": "sha256", "checksum": "9d6b2f0d1927056412ebc9e1c4a544462783284b3bdf93789813009e7c6e15df"}, "tags": ["velodrome"], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "This table contains details on the locking and unlocking of VELO positions.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address of the contract interacted with in the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "The index of the event within the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROVIDER_ADDRESS": {"name": "PROVIDER_ADDRESS", "description": "The address of the VELO provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNLOCK_DATE": {"name": "UNLOCK_DATE", "description": "The date at which the lock expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "The token ID of the created lock.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VELO_ACTION": {"name": "VELO_ACTION", "description": "Users can create new VELO locks (deposits) or withdraw their VELO tokens. Either deposit or withdraw.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VELO_AMOUNT": {"name": "VELO_AMOUNT", "description": "The amount of VELO tokens locked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VELO_AMOUNT_USD": {"name": "VELO_AMOUNT_USD", "description": "The amount of VELO tokens locked, in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPOSIT_TYPE": {"name": "DEPOSIT_TYPE", "description": "The type of deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/velodrome/velodrome__ez_velo_locks.yml", "compiled_path": "target/compiled/optimism_models/models/velodrome/velodrome__ez_velo_locks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "tags": ["velodrome"]}, "created_at": 1662493242.782381, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    event_index,\n    provider_address,\n    velo_action,\n    unlock_date,\n    token_id,\n    velo_amount,\n    velo_amount_usd,\n    deposit_type\nFROM\n    OPTIMISM_DEV.silver.velodrome_locks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.velodrome.ez_velo_locks"}, "model.optimism_models.core__ez_nft_sales": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    tokenId,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    {{ ref('silver__quixotic_sales') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__ez_nft_sales"], "unique_id": "model.optimism_models.core__ez_nft_sales", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__ez_nft_sales.sql", "original_file_path": "models/gold/core__ez_nft_sales.sql", "name": "core__ez_nft_sales", "alias": "ez_nft_sales", "checksum": {"name": "sha256", "checksum": "4545c0171cd39313ed9dfdf73c390f4f627b9bd17f49815d3e8f5430e3ffcacd"}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "This table contains NFT sale events on the Optimism blockchain. Currently, only Quixotic sales are supported.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of sale event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "The address of the NFT exchange.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_NAME": {"name": "PLATFORM_NAME", "description": "The name of the NFT exchange.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER_ADDRESS": {"name": "SELLER_ADDRESS", "description": "The seller of the NFT.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BUYER_ADDRESS": {"name": "BUYER_ADDRESS", "description": "The buyer of the NFT.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "The contract address of the NFT.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "The token ID for the NFT address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_SYMBOL": {"name": "CURRENCY_SYMBOL", "description": "The symbol of the payment currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_ADDRESS": {"name": "CURRENCY_ADDRESS", "description": "The contract address of the payment currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "The price of the NFT in the payment currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "The price of the NFT in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__ez_nft_sales.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__ez_nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662493242.961976, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    tokenId,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    OPTIMISM_DEV.silver.quixotic_sales", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.ez_nft_sales"}, "model.optimism_models.core__ez_eth_transfers": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nWITH eth_base AS (\n\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        identifier,\n        _call_id,\n        ingested_at,\n        input\n    FROM\n        {{ ref('silver__traces') }}\n    WHERE\n        eth_value > 0\n        AND tx_status = 'SUCCESS'\n        and gas_used is not null\n),\neth_price AS (\n    SELECT\n        HOUR,\n        AVG(price) AS eth_price\n    FROM\n        {{ source(\n            'ethereum',\n            'fact_hourly_token_prices'\n        ) }}\n    WHERE\n        token_address IS NULL\n        AND symbol IS NULL\n    GROUP BY\n        HOUR\n)\nSELECT\n    A.tx_hash AS tx_hash,\n    A.block_number AS block_number,\n    A.block_timestamp AS block_timestamp,\n    A.identifier AS identifier,\n    tx.from_address AS origin_from_address,\n    tx.to_address AS origin_to_address,\n    tx.origin_function_signature AS origin_function_signature,\n    A.from_address AS eth_from_address,\n    A.to_address AS eth_to_address,\n    A.eth_value AS amount,\n    ROUND(\n        A.eth_value * eth_price,\n        2\n    ) AS amount_usd\nFROM\n    eth_base A\n    LEFT JOIN eth_price\n    ON DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = HOUR\n    JOIN {{ ref('silver__transactions') }}\n    tx\n    ON A.tx_hash = tx.tx_hash", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.optimism_models.ethereum.fact_hourly_token_prices", "model.optimism_models.silver__traces", "model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__ez_eth_transfers"], "unique_id": "model.optimism_models.core__ez_eth_transfers", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__ez_eth_transfers.sql", "original_file_path": "models/gold/core__ez_eth_transfers.sql", "name": "core__ez_eth_transfers", "alias": "ez_eth_transfers", "checksum": {"name": "sha256", "checksum": "5a9e01002a2f26558a008ce1db7e170ee1cd881f5d4cc44c5b5955dd9d71039e"}, "tags": [], "refs": [["silver__traces"], ["silver__transactions"]], "sources": [["ethereum", "fact_hourly_token_prices"]], "metrics": [], "description": "This table contains all native ETH transfers, including equivalent USD amounts. The origin addresses correspond to the to and from addresses from the `fact_transactions` table. The `identifier` and `tx_hash` columns relate this table back to `fact_traces`, which contains more details on the transfers.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_FROM_ADDRESS": {"name": "ETH_FROM_ADDRESS", "description": "The sending address of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_TO_ADDRESS": {"name": "ETH_TO_ADDRESS", "description": "The receiving address of this transfer. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "ETH value transferred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_PRICE": {"name": "TOKEN_PRICE", "description": "The price, if available, for this token at the transfer time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_USD": {"name": "AMOUNT_USD", "description": "ETH value transferred, in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HAS_PRICE": {"name": "HAS_PRICE", "description": "Whether or not our prices model contains this hourly token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDENTIFIER": {"name": "IDENTIFIER", "description": "This field represents the position and type of the trace within the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__ez_eth_transfers.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__ez_eth_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1662493242.9665012, "compiled_sql": "\n\nWITH eth_base AS (\n\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        identifier,\n        _call_id,\n        ingested_at,\n        input\n    FROM\n        OPTIMISM_DEV.silver.traces\n    WHERE\n        eth_value > 0\n        AND tx_status = 'SUCCESS'\n        and gas_used is not null\n),\neth_price AS (\n    SELECT\n        HOUR,\n        AVG(price) AS eth_price\n    FROM\n        ethereum.core.fact_hourly_token_prices\n    WHERE\n        token_address IS NULL\n        AND symbol IS NULL\n    GROUP BY\n        HOUR\n)\nSELECT\n    A.tx_hash AS tx_hash,\n    A.block_number AS block_number,\n    A.block_timestamp AS block_timestamp,\n    A.identifier AS identifier,\n    tx.from_address AS origin_from_address,\n    tx.to_address AS origin_to_address,\n    tx.origin_function_signature AS origin_function_signature,\n    A.from_address AS eth_from_address,\n    A.to_address AS eth_to_address,\n    A.eth_value AS amount,\n    ROUND(\n        A.eth_value * eth_price,\n        2\n    ) AS amount_usd\nFROM\n    eth_base A\n    LEFT JOIN eth_price\n    ON DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = HOUR\n    JOIN OPTIMISM_DEV.silver.transactions\n    tx\n    ON A.tx_hash = tx.tx_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.ez_eth_transfers"}, "model.optimism_models.core__fact_token_transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _log_id\nFROM\n    {{ ref('silver__transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__fact_token_transfers"], "unique_id": "model.optimism_models.core__fact_token_transfers", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__fact_token_transfers.sql", "original_file_path": "models/gold/core__fact_token_transfers.sql", "name": "core__fact_token_transfers", "alias": "fact_token_transfers", "checksum": {"name": "sha256", "checksum": "d1b9ebe7f7db8936e39b0e05ebe220ae27c577a5749141169afb250f0f25c8c2"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "This table contains events on the Optimism Blockchain with an event name of 'Transfer'. The contract address is the token transferred, and the raw amount field is the amount of tokens transferred. Please note this amount is not decimal adjusted. Decimal adjustments for a token address can be found in ```dim_contracts```. This table will not contain transfers of native ETH.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "Contract address of the token being transferred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this transfer. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_AMOUNT": {"name": "RAW_AMOUNT", "description": "The amount of tokens transferred. This value is not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the transfer event occurred. This field can be used to find more details on the event within the ```fact_event_logs``` table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__fact_token_transfers.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_token_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662493242.935055, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _log_id\nFROM\n    OPTIMISM_DEV.silver.transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.fact_token_transfers"}, "model.optimism_models.core__fact_hourly_token_prices": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    HOUR,\n    token_address,\n    symbol,\n    decimals,\n    price,\n    is_imputed\nFROM\n    {{ ref('silver__prices') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__fact_hourly_token_prices"], "unique_id": "model.optimism_models.core__fact_hourly_token_prices", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__fact_hourly_token_prices.sql", "original_file_path": "models/gold/core__fact_hourly_token_prices.sql", "name": "core__fact_hourly_token_prices", "alias": "fact_hourly_token_prices", "checksum": {"name": "sha256", "checksum": "6209f4c2b590675daf85783110c723b96f93ebdab7431d1216b6fc92a4f36d45"}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "This table contains the hourly USD prices for tokens on the Optimism blockchain.", "columns": {"HOUR": {"name": "HOUR", "description": "The hour the token price was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "The Optimism contract address for this token. This is the column used to join to token contract addresses in the other event tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol for this token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The decimals for this token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "The average hourly price for this token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IS_IMPUTED": {"name": "IS_IMPUTED", "description": "This column denotes if we carried forward the last recorded price in order to fill hourly gaps from the source. Either true or false.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__fact_hourly_token_prices.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_hourly_token_prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662493242.937738, "compiled_sql": "\n\nSELECT\n    HOUR,\n    token_address,\n    symbol,\n    decimals,\n    price,\n    is_imputed\nFROM\n    OPTIMISM_DEV.silver.prices", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.fact_hourly_token_prices"}, "model.optimism_models.core__fact_traces": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    eth_value,\n    gas,\n    gas_used,\n    input,\n    output,\n    TYPE,\n    identifier,\n    DATA,\n    tx_status,\n    sub_traces\nFROM\n    {{ ref('silver__traces') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__fact_traces"], "unique_id": "model.optimism_models.core__fact_traces", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__fact_traces.sql", "original_file_path": "models/gold/core__fact_traces.sql", "name": "core__fact_traces", "alias": "fact_traces", "checksum": {"name": "sha256", "checksum": "2792bb3c26477e8d207b32f8b6ba305b57c15269fc878ee1143b79aa052f8c7d"}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "This table contains flattened trace data for internal contract calls on the Optimism Blockchain. Hex encoded fields can be decoded to integers by using `ethereum.public.udf_hex_to_int()`.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "The transaction hash for the trace. Please note, this is not necessarily unique in this table as transactions frequently have multiple traces.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this trace. This is not necessarily the from address of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this trace. This is not necessarily the to address of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_VALUE": {"name": "ETH_VALUE", "description": "The amount of ETH transferred in this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS": {"name": "GAS", "description": "The gas supplied for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The gas used for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INPUT": {"name": "INPUT", "description": "The input data for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OUTPUT": {"name": "OUTPUT", "description": "The output data for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "The type of internal transaction. Common trace types are `CALL`, `DELEGATECALL`, and `STATICCALL`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDENTIFIER": {"name": "IDENTIFIER", "description": "This field represents the position and type of the trace within the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "The raw JSON data for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_STATUS": {"name": "TX_STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUB_TRACES": {"name": "SUB_TRACES", "description": "The amount of nested sub traces for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__fact_traces.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_traces.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662493242.9487119, "compiled_sql": "\n\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    eth_value,\n    gas,\n    gas_used,\n    input,\n    output,\n    TYPE,\n    identifier,\n    DATA,\n    tx_status,\n    sub_traces\nFROM\n    OPTIMISM_DEV.silver.traces", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.fact_traces"}, "model.optimism_models.core__dim_dates": {"raw_sql": "{{ config(\n    materialized = \"table\"\n) }}\n{{ dbt_date.get_date_dimension(\n    '2017-01-01',\n    '2022-12-31'\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_date.get_date_dimension"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__dim_dates"], "unique_id": "model.optimism_models.core__dim_dates", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__dim_dates.sql", "original_file_path": "models/gold/core__dim_dates.sql", "name": "core__dim_dates", "alias": "dim_dates", "checksum": {"name": "sha256", "checksum": "03515c633a2656556ba471da3dcb9af0bd981d6853a00797593a6dc3ede37dbc"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1662493240.378318, "compiled_sql": "\n\n    \nwith base_dates as (\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2190\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2017-01-01' as \n    timestamp_ntz\n)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-12-31' as \n    timestamp_ntz\n)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp_ntz\n) as date_day\nfrom\n    date_spine d\n\n\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast(\n\n    dateadd(\n        year,\n        -1,\n        d.date_day\n        )\n\n as date) as prior_year_date_day,\n        cast(\n\n    dateadd(\n        day,\n        -364,\n        d.date_day\n        )\n\n as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    cast(\n\n    dateadd(\n        day,\n        -1,\n        d.date_day\n        )\n\n as date) as prior_date_day,\n    cast(\n\n    dateadd(\n        day,\n        1,\n        d.date_day\n        )\n\n as date) as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end as day_of_week,\n    date_part('dayofweekiso', d.date_day) as day_of_week_iso,\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname(d.date_day)\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end as day_of_week_name,\n    dayname(d.date_day) as day_of_week_name_short,\n    date_part('day', d.date_day) as day_of_month,\n    date_part('dayofyear', d.date_day) as day_of_year,\n\n    \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end - 1),\n        d.date_day\n        )\n\n as date) as week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end - 1),\n        d.date_day\n        )\n\n as date)\n        )\n\n as date) as week_end_date,\n    \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.prior_year_over_year_date_day) = 7 then 1\n            else date_part('dayofweek', d.prior_year_over_year_date_day) + 1\n        end - 1),\n        d.prior_year_over_year_date_day\n        )\n\n as date) as prior_year_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.prior_year_over_year_date_day) = 7 then 1\n            else date_part('dayofweek', d.prior_year_over_year_date_day) + 1\n        end - 1),\n        d.prior_year_over_year_date_day\n        )\n\n as date)\n        )\n\n as date) as prior_year_week_end_date,\n    cast(date_part('week', d.date_day) as \n    int\n) as week_of_year,\n\n    cast(date_trunc('week', d.date_day) as date) as iso_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        cast(date_trunc('week', d.date_day) as date)\n        )\n\n as date) as iso_week_end_date,\n    cast(date_trunc('week', d.prior_year_over_year_date_day) as date) as prior_year_iso_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        cast(date_trunc('week', d.prior_year_over_year_date_day) as date)\n        )\n\n as date) as prior_year_iso_week_end_date,\n    cast(date_part('weekiso', d.date_day) as \n    int\n) as iso_week_of_year,\n\n    cast(date_part('week', d.prior_year_over_year_date_day) as \n    int\n) as prior_year_week_of_year,\n    cast(date_part('weekiso', d.prior_year_over_year_date_day) as \n    int\n) as prior_year_iso_week_of_year,\n\n    cast(date_part('month', d.date_day) as \n    int\n) as month_of_year,\n    to_char(d.date_day, 'MMMM')  as month_name,\n    to_char(d.date_day, 'MON')  as month_name_short,\n\n    cast(date_trunc('month', d.date_day) as date) as month_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        month,\n        1,\n        date_trunc('month', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as month_end_date,\n\n    cast(date_trunc('month', d.prior_year_date_day) as date) as prior_year_month_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        month,\n        1,\n        date_trunc('month', d.prior_year_date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as prior_year_month_end_date,\n\n    cast(date_part('quarter', d.date_day) as \n    int\n) as quarter_of_year,\n    cast(date_trunc('quarter', d.date_day) as date) as quarter_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        quarter,\n        1,\n        date_trunc('quarter', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as quarter_end_date,\n\n    cast(date_part('year', d.date_day) as \n    int\n) as year_number,\n    cast(date_trunc('year', d.date_day) as date) as year_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.dim_dates"}, "model.optimism_models.core__fact_event_logs": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _log_id\nFROM\n    {{ ref('silver__logs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__fact_event_logs"], "unique_id": "model.optimism_models.core__fact_event_logs", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__fact_event_logs.sql", "original_file_path": "models/gold/core__fact_event_logs.sql", "name": "core__fact_event_logs", "alias": "fact_event_logs", "checksum": {"name": "sha256", "checksum": "29f93e13a4b2e570184152057cd213f07e0553d98206a9675ae4adf94850513d"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "This table contains flattened event logs from transactions on the Optimism Blockchain. Transactions may have multiple events, which are denoted by the event index for a transaction hash. Therefore, this table is unique on the combination of transaction hash and event index. Event names are decoded in this table where possible. The event inputs column will contain the log details in JSON format. Specific fields can be pulled from this column using the following sample format: ```event_inputs:<FILED_NAME>::<DATA TYPE> as <FIELD_NAME>```.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address interacted with for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "The name of the contract or token, where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "The decoded event name for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INPUTS": {"name": "EVENT_INPUTS", "description": "The decoded event inputs for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOPICS": {"name": "TOPICS", "description": "The un-decoded event input topics.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "The un-decoded event data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_REMOVED": {"name": "EVENT_REMOVED", "description": "Whether the event has been removed from the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_STATUS": {"name": "TX_STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__fact_event_logs.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_event_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662493243.0294132, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _log_id\nFROM\n    OPTIMISM_DEV.silver.logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.fact_event_logs"}, "model.optimism_models.core__fact_delegations": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT \n    block_number, \n    block_timestamp, \n    tx_hash, \n    status, \n    delegator, \n    to_delegate, \n    from_delegate, \n    delegation_type\nFROM \n    {{ ref('silver__delegations') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__fact_delegations"], "unique_id": "model.optimism_models.core__fact_delegations", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__fact_delegations.sql", "original_file_path": "models/gold/core__fact_delegations.sql", "name": "core__fact_delegations", "alias": "fact_delegations", "checksum": {"name": "sha256", "checksum": "629a6bafcd59e0f5aa7d8f2e12123e7c91a8adc9d885797808486c6d26e34385"}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "Contains all delegation transactions of OP token voting power to delegators or community members who have volunteered to play an active role in Token House governance.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATOR": {"name": "DELEGATOR", "description": "The wallet address of the user that is delegating their OP tokens.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_DELEGATE": {"name": "TO_DELEGATE", "description": "The wallet address of delegate that the delegator is delegating their OP tokens to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_DELEGATE": {"name": "FROM_DELEGATE", "description": "The wallet address of delegate that the delegator is delegating their OP tokens from when re-delegating.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATION_TYPE": {"name": "DELEGATION_TYPE", "description": "The type of delegation event that is happening in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__fact_delegations.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_delegations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662493243.032352, "compiled_sql": "\n\nSELECT \n    block_number, \n    block_timestamp, \n    tx_hash, \n    status, \n    delegator, \n    to_delegate, \n    from_delegate, \n    delegation_type\nFROM \n    OPTIMISM_DEV.silver.delegations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.fact_delegations"}, "model.optimism_models.core__dim_contracts": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    LOWER(address) :: STRING AS address,\n    symbol :: STRING AS symbol,\n    decimals :: INTEGER AS decimals\nFROM\n    {{ ref('silver__contracts_backfill') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.optimism_models.silver__contracts_backfill"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__dim_contracts"], "unique_id": "model.optimism_models.core__dim_contracts", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__dim_contracts.sql", "original_file_path": "models/gold/core__dim_contracts.sql", "name": "core__dim_contracts", "alias": "dim_contracts", "checksum": {"name": "sha256", "checksum": "62804875ea1f54a7a2caaddd60a6b6dd2daeac6aedd6900f2fcec5c06af9fdf1"}, "tags": [], "refs": [["silver__contracts_backfill"]], "sources": [], "metrics": [], "description": "This table contains contract details for contracts deployed on the Optimism blockchain.", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "The unique Optimism address of the deployed contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol used to represent this contract. Please note this is not necessarily unique.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__dim_contracts.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662493242.9681458, "compiled_sql": "\n\nSELECT\n    LOWER(address) :: STRING AS address,\n    symbol :: STRING AS symbol,\n    decimals :: INTEGER AS decimals\nFROM\n    OPTIMISM_DEV.silver.contracts_backfill", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.dim_contracts"}, "model.optimism_models.core__dim_labels": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    address_name,\n    label_type,\n    label_subtype,\n    project_name\nFROM\n    {{ source(\n        'crosschain',\n        'address_labels'\n    ) }}\nWHERE\n    blockchain = 'optimism'\n    AND address LIKE '0x%'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.optimism_models.crosschain.address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__dim_labels"], "unique_id": "model.optimism_models.core__dim_labels", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__dim_labels.sql", "original_file_path": "models/gold/core__dim_labels.sql", "name": "core__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "40da159c7b2e0a359c82849a7f1d2e201f8d873c4b243c2e2c536242aff43e06"}, "tags": [], "refs": [], "sources": [["crosschain", "address_labels"]], "metrics": [], "description": "This table contains labels for addresses on the Optimism Blockchain.", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "This table contains labels for addresses on the Optimism Blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project for this address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__dim_labels.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662493242.973433, "compiled_sql": "\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    address_name,\n    label_type,\n    label_subtype,\n    project_name\nFROM\n    flipside_prod_db.crosschain.address_labels\nWHERE\n    blockchain = 'optimism'\n    AND address LIKE '0x%'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.dim_labels"}, "model.optimism_models.sushi__ez_swaps": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH swap_events AS (\n\n    SELECT\n        block_number,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        block_timestamp,\n        tx_hash,\n        contract_address,\n        event_name,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[0]::string)::integer\n        ) AS amountIn,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[1]::string)::integer\n        ) AS amountOut,\n        CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS token_out, \n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS token_in,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS tx_to,\n        event_index,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics[0]::string = '0xcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062'\n        AND tx_status = 'SUCCESS'\n        AND contract_address IN (\n            SELECT\n                DISTINCT pool_address\n            FROM\n                {{ ref('sushi__dim_dex_pools') }}\n        )\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_hash,\n        contract_address,\n        event_name,\n        case when token_in = token0_address then amountIn/power( 10, token0_decimals) :: FLOAT \n             when token_in = token1_address then amountIn/power( 10, token1_decimals) :: FLOAT\n             END AS amount_in,\n        case when token_out = token0_address then amountOut/power( 10, token0_decimals) :: FLOAT \n             when token_out = token1_address then amountOut/power( 10, token1_decimals) :: FLOAT\n             END AS amount_out,\n        tx_to,\n        event_index,\n        _log_id,\n        CASE when token_in = token0_address then token0_symbol\n             when token_in = token1_address then token1_symbol\n        END AS symbol_in,\n        CASE when token_out = token0_address then token0_symbol\n             when token_out = token1_address then token1_symbol\n        END AS symbol_out,\n        token_in,\n        token_out,\n        pool_name,\n        _inserted_timestamp\n    FROM\n        swap_events a\n        LEFT JOIN {{ ref('sushi__dim_dex_pools') }} bb\n        ON a.contract_address = bb.pool_address \n),\n\n optimism_prices AS (\n    select \n        symbol,\n        date_trunc('hour',recorded_at) as hour, \n        avg(price) as price \n    from \n        {{ source('prices','prices_v2') }} \n    where symbol in (select token0_symbol as symbol from {{ ref('sushi__dim_dex_pools') }}\n                     union all \n                     select token1_symbol as symbol from {{ ref('sushi__dim_dex_pools') }})\n\n{% if is_incremental() %}\nAND hour :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        swap_events\n)\n{% else %}\n    AND hour :: DATE >= '2021-09-01'\n{% endif %}\n    group by 1,2\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    'sushiswap' AS platform,\n    pool_name,\n    amount_in,\n    case\n    WHEN amount_in * pIn.price <= 5 * amount_out * pOut.price\n    AND amount_out * pOut.price <= 5 * amount_in * pIn.price THEN amount_in * pIn.price\n    when pOut.price is null then amount_in * pIn.price\n    ELSE NULL\n    END AS amount_in_usd,\n    amount_out,\n    CASE\n    WHEN amount_in * pIn.price <= 5 * amount_out * pOut.price\n    AND amount_out * pOut.price <= 5 * amount_in * pIn.price THEN amount_out * pOut.price\n    when pIn.price is null then amount_out * pOut.price\n    ELSE NULL\n    END AS amount_out_usd,\n    tx_to,\n    event_index,\n    token_in,\n    token_out,\n    symbol_in,\n    symbol_out,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL wp\n    LEFT JOIN optimism_prices pIn\n    ON lower(wp.symbol_in) = lower(pIn.symbol)\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pIn.hour\n    LEFT JOIN optimism_prices pOut\n    ON lower(wp.symbol_out) = lower(pOut.symbol)\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pOut.hour", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.optimism_models.prices.prices_v2", "model.optimism_models.silver__logs", "model.optimism_models.sushi__dim_dex_pools", "model.optimism_models.sushi__dim_dex_pools", "model.optimism_models.sushi__dim_dex_pools", "model.optimism_models.sushi__dim_dex_pools"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "sushi", "fqn": ["optimism_models", "sushi", "sushi__ez_swaps"], "unique_id": "model.optimism_models.sushi__ez_swaps", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "sushi/sushi__ez_swaps.sql", "original_file_path": "models/sushi/sushi__ez_swaps.sql", "name": "sushi__ez_swaps", "alias": "ez_swaps", "checksum": {"name": "sha256", "checksum": "0535f345e5bac1f2e35d65d5fe2fbffb3203a3e86ca251cbfee170b7bed98232"}, "tags": [], "refs": [["silver__logs"], ["sushi__dim_dex_pools"], ["sushi__dim_dex_pools"], ["sushi__dim_dex_pools"], ["sushi__dim_dex_pools"]], "sources": [["prices", "prices_v2"]], "metrics": [], "description": "This table currently contains swap events from the ```logs``` table for SushiSwap on optimism, along with other helpful columns including an amount USD where possible. \nNote: A rule has been put in place to null out the amount_USD if that number is too divergent between amount_in_USD and amount_out_usd. This can happen for swaps of less liquid tokens during very high fluctuation of price.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address interacted with for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "The amount of tokens put into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "The amount of tokens taken out of or received from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN_USD": {"name": "AMOUNT_IN_USD", "description": "The amount of tokens put into the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT_USD": {"name": "AMOUNT_OUT_USD", "description": "The amount of tokens taken out of or received from the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_IN": {"name": "TOKEN_IN", "description": "The address of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_OUT": {"name": "TOKEN_OUT", "description": "The address of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_IN": {"name": "SYMBOL_IN", "description": "The symbol of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_OUT": {"name": "SYMBOL_OUT", "description": "The symbol of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "The tx_to is the address who receives the swapped token. This corresponds to the \"to\" field in the swap function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "This field denotes which application the liquidity pool belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of the contract call.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/sushi/sushi__ez_swaps.yml", "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662493243.080071, "compiled_sql": "\n\nWITH swap_events AS (\n\n    SELECT\n        block_number,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        block_timestamp,\n        tx_hash,\n        contract_address,\n        event_name,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[0]::string)::integer\n        ) AS amountIn,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[1]::string)::integer\n        ) AS amountOut,\n        CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS token_out, \n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS token_in,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS tx_to,\n        event_index,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.silver.logs\n    WHERE\n        topics[0]::string = '0xcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062'\n        AND tx_status = 'SUCCESS'\n        AND contract_address IN (\n            SELECT\n                DISTINCT pool_address\n            FROM\n                OPTIMISM_DEV.sushi.dim_dex_pools\n        )\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) :: DATE - 2\n    FROM\n        OPTIMISM_DEV.sushi.ez_swaps\n)\n\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_hash,\n        contract_address,\n        event_name,\n        case when token_in = token0_address then amountIn/power( 10, token0_decimals) :: FLOAT \n             when token_in = token1_address then amountIn/power( 10, token1_decimals) :: FLOAT\n             END AS amount_in,\n        case when token_out = token0_address then amountOut/power( 10, token0_decimals) :: FLOAT \n             when token_out = token1_address then amountOut/power( 10, token1_decimals) :: FLOAT\n             END AS amount_out,\n        tx_to,\n        event_index,\n        _log_id,\n        CASE when token_in = token0_address then token0_symbol\n             when token_in = token1_address then token1_symbol\n        END AS symbol_in,\n        CASE when token_out = token0_address then token0_symbol\n             when token_out = token1_address then token1_symbol\n        END AS symbol_out,\n        token_in,\n        token_out,\n        pool_name,\n        _inserted_timestamp\n    FROM\n        swap_events a\n        LEFT JOIN OPTIMISM_DEV.sushi.dim_dex_pools bb\n        ON a.contract_address = bb.pool_address \n),\n\n optimism_prices AS (\n    select \n        symbol,\n        date_trunc('hour',recorded_at) as hour, \n        avg(price) as price \n    from \n        FLIPSIDE_PROD_DB.SILVER.prices_v2 \n    where symbol in (select token0_symbol as symbol from OPTIMISM_DEV.sushi.dim_dex_pools\n                     union all \n                     select token1_symbol as symbol from OPTIMISM_DEV.sushi.dim_dex_pools)\n\n\nAND hour :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        swap_events\n)\n\n    group by 1,2\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    'sushiswap' AS platform,\n    pool_name,\n    amount_in,\n    case\n    WHEN amount_in * pIn.price <= 5 * amount_out * pOut.price\n    AND amount_out * pOut.price <= 5 * amount_in * pIn.price THEN amount_in * pIn.price\n    when pOut.price is null then amount_in * pIn.price\n    ELSE NULL\n    END AS amount_in_usd,\n    amount_out,\n    CASE\n    WHEN amount_in * pIn.price <= 5 * amount_out * pOut.price\n    AND amount_out * pOut.price <= 5 * amount_in * pIn.price THEN amount_out * pOut.price\n    when pIn.price is null then amount_out * pOut.price\n    ELSE NULL\n    END AS amount_out_usd,\n    tx_to,\n    event_index,\n    token_in,\n    token_out,\n    symbol_in,\n    symbol_out,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL wp\n    LEFT JOIN optimism_prices pIn\n    ON lower(wp.symbol_in) = lower(pIn.symbol)\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pIn.hour\n    LEFT JOIN optimism_prices pOut\n    ON lower(wp.symbol_out) = lower(pOut.symbol)\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pOut.hour", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.sushi.ez_swaps"}, "model.optimism_models.sushi__dim_dex_pools": {"raw_sql": "{{ config(\n    materialized = 'table'\n) }}\n\n    SELECT\n        pool_address,\n        pool as pool_name,\n        fee_tier,\n        TWAP,\n        lower(token0_address) as token0_address,\n        token0_name as token0_symbol,\n        lower(token1_address) as token1_address,\n        token1_name as token1_symbol,\n        token0_decimal as token0_decimals,\n        token1_decimal as token1_decimals \n    FROM\n         {{ source(\n            'optimism_pools',\n            'SUSHI_DIM_DEX_POOLS'\n        ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.optimism_models.optimism_pools.SUSHI_DIM_DEX_POOLS"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "sushi", "fqn": ["optimism_models", "sushi", "sushi__dim_dex_pools"], "unique_id": "model.optimism_models.sushi__dim_dex_pools", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "sushi/sushi__dim_dex_pools.sql", "original_file_path": "models/sushi/sushi__dim_dex_pools.sql", "name": "sushi__dim_dex_pools", "alias": "dim_dex_pools", "checksum": {"name": "sha256", "checksum": "45e2a48345b0ef3e231a0fa9b6aae2cdc243789bd117400c85e5b63aab23ec0f"}, "tags": [], "refs": [], "sources": [["optimism_pools", "SUSHI_DIM_DEX_POOLS"]], "metrics": [], "description": "This table contains details on different Liquidity Pools belonging to sushiswap on the Optimism blockchain", "columns": {"POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The contract address for the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the liquidity pool, where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "Token 0 is the first token in the pair, and will show up first within the event logs for relevant transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "Token 1 is the second token in the pair, and will show up second within the event logs for relevant transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "The symbol belonging to the address of the token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "The symbol belonging to the address of the token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_DECIMALS": {"name": "TOKEN0_DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_DECIMALS": {"name": "TOKEN1_DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/sushi/sushi__dim_dex_pools.yml", "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__dim_dex_pools.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1662493243.200257, "compiled_sql": "\n\n    SELECT\n        pool_address,\n        pool as pool_name,\n        fee_tier,\n        TWAP,\n        lower(token0_address) as token0_address,\n        token0_name as token0_symbol,\n        lower(token1_address) as token1_address,\n        token1_name as token1_symbol,\n        token0_decimal as token0_decimals,\n        token1_decimal as token1_decimals \n    FROM\n         optimism.bronze.SUSHI_DIM_DEX_POOLS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.sushi.dim_dex_pools"}, "test.optimism_models.test_silver__transactions_tx_gap": {"raw_sql": "-- depends_on: {{ ref('silver__blocks') }}\n{{ tx_gaps(ref(\"silver__transactions\")) }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.optimism_models.tx_gaps"], "nodes": ["model.optimism_models.silver__blocks", "model.optimism_models.silver__transactions", "model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "test_silver", "fqn": ["optimism_models", "optimism", "test_silver__transactions_tx_gap"], "unique_id": "test.optimism_models.test_silver__transactions_tx_gap", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "optimism/test_silver__transactions_tx_gap.sql", "original_file_path": "tests/optimism/test_silver__transactions_tx_gap.sql", "name": "test_silver__transactions_tx_gap", "alias": "transactions_tx_gap", "checksum": {"name": "sha256", "checksum": "65c68258e91e8a03312c4c39f19ef870828c3e9edc28b8b5d2f638ed9bf4e24c"}, "tags": [], "refs": [["silver__blocks"], ["silver__transactions"], ["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/tests/optimism/test_silver__transactions_tx_gap.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.671117, "compiled_sql": "-- depends_on: OPTIMISM_DEV.silver.blocks\n\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            OPTIMISM_DEV.silver.blocks\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            OPTIMISM_DEV.silver.transactions\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    tx_count <> model_tx_count\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.test_silver.transactions_tx_gap"}, "seed.optimism_models.bronze__sushi_dim_dex_pools": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "bronze", "fqn": ["optimism_models", "bronze__sushi_dim_dex_pools"], "unique_id": "seed.optimism_models.bronze__sushi_dim_dex_pools", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "bronze__sushi_dim_dex_pools.csv", "original_file_path": "data/bronze__sushi_dim_dex_pools.csv", "name": "bronze__sushi_dim_dex_pools", "alias": "sushi_dim_dex_pools", "checksum": {"name": "sha256", "checksum": "7169bd60444d3be939f9d52e747f56728336acad24a5e7860580cffccfb418f3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1662493240.693286, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.bronze.sushi_dim_dex_pools"}, "seed.optimism_models.silver__velo_gauges_backfill": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver__velo_gauges_backfill"], "unique_id": "seed.optimism_models.silver__velo_gauges_backfill", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver__velo_gauges_backfill.csv", "original_file_path": "data/silver__velo_gauges_backfill.csv", "name": "silver__velo_gauges_backfill", "alias": "velo_gauges_backfill", "checksum": {"name": "sha256", "checksum": "fa10371c71baddcfd0c864ff346aefc0cc606b709b5297e50b5973949b15dea5"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1662493240.695137, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velo_gauges_backfill"}, "seed.optimism_models.silver__velo_tokens_backup": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver__velo_tokens_backup"], "unique_id": "seed.optimism_models.silver__velo_tokens_backup", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver__velo_tokens_backup.csv", "original_file_path": "data/silver__velo_tokens_backup.csv", "name": "silver__velo_tokens_backup", "alias": "velo_tokens_backup", "checksum": {"name": "sha256", "checksum": "054731cc27c241356e144b630fc3e2918c51a508b40f2b350dcc011ea691fc0b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1662493240.69666, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velo_tokens_backup"}, "seed.optimism_models.silver__velo_pool_backfill": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver__velo_pool_backfill"], "unique_id": "seed.optimism_models.silver__velo_pool_backfill", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver__velo_pool_backfill.csv", "original_file_path": "data/silver__velo_pool_backfill.csv", "name": "silver__velo_pool_backfill", "alias": "velo_pool_backfill", "checksum": {"name": "sha256", "checksum": "b913b8d8639fdd0db16960de8471b328b8fbe98dfa2193d398ecaa60cc1c057d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1662493240.698357, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.velo_pool_backfill"}, "seed.optimism_models.silver__contracts_backfill": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver__contracts_backfill"], "unique_id": "seed.optimism_models.silver__contracts_backfill", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver__contracts_backfill.csv", "original_file_path": "data/silver__contracts_backfill.csv", "name": "silver__contracts_backfill", "alias": "contracts_backfill", "checksum": {"name": "sha256", "checksum": "7a292b61f96d0f9114fb0ccb841a126cefa637e04b6b3f00c95624cfec4d3647"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1662493240.700309, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.contracts_backfill"}, "operation.optimism_models.optimism_models-on-run-start-0": {"raw_sql": "{{ create_sps() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.optimism_models.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "optimism_models-on-run-start-0", "fqn": ["optimism_models", "hooks", "optimism_models-on-run-start-0"], "unique_id": "operation.optimism_models.optimism_models-on-run-start-0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "hooks/optimism_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "optimism_models-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "929a207a7c9dd9508bc7d29409d099192c0861563db09e299192a2e0d6296022"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/./dbt_project.yml/hooks/optimism_models-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1662493240.719415, "compiled_sql": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.optimism_models.optimism_models-on-run-start-1": {"raw_sql": "{{ create_udfs() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.optimism_models.create_udfs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "optimism_models-on-run-start-1", "fqn": ["optimism_models", "hooks", "optimism_models-on-run-start-1"], "unique_id": "operation.optimism_models.optimism_models-on-run-start-1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "hooks/optimism_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "name": "optimism_models-on-run-start-1", "alias": "", "checksum": {"name": "sha256", "checksum": "929a207a7c9dd9508bc7d29409d099192c0861563db09e299192a2e0d6296022"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/./dbt_project.yml/hooks/optimism_models-on-run-start-1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1662493240.726719, "compiled_sql": "\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_NUMBER.70f83df7ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_NUMBER.70f83df7ca", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_BLOCK_NUMBER.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_BLOCK_NUMBER", "alias": "quixotic_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.824564, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_NUMBER__NUMBER__FLOAT.d5bc0fd646": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0ec6a55b7171715cfef024ab7d9b76f1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0ec6a55b7171715cfef024ab7d9b76f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_NUMBER__NUMBER__FLOAT.d5bc0fd646", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_0ec6a55b7171715cfef024ab7d9b76f1.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "quixotic_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_0ec6a55b7171715cfef024ab7d9b76f1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0ec6a55b7171715cfef024ab7d9b76f1"}, "created_at": 1662493240.826916, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.quixotic_sales_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_TIMESTAMP.6a8c6a5e2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_TIMESTAMP.6a8c6a5e2b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_BLOCK_TIMESTAMP.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_BLOCK_TIMESTAMP", "alias": "quixotic_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.840289, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales_BLOCK_TIMESTAMP__day__1.d5189a899a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_20289609f3ed117f6e1fa2782547ed24\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_20289609f3ed117f6e1fa2782547ed24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales_BLOCK_TIMESTAMP__day__1.d5189a899a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_20289609f3ed117f6e1fa2782547ed24.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales_BLOCK_TIMESTAMP__day__1", "alias": "quixotic_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_row_va_20289609f3ed117f6e1fa2782547ed24.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_20289609f3ed117f6e1fa2782547ed24"}, "created_at": 1662493240.8424, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.quixotic_sales\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.quixotic_sales_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c57675bdd6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a7b8f5dd7a5157493a5aa00dee19c0c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a7b8f5dd7a5157493a5aa00dee19c0c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c57675bdd6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_9a7b8f5dd7a5157493a5aa00dee19c0c.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "quixotic_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_9a7b8f5dd7a5157493a5aa00dee19c0c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a7b8f5dd7a5157493a5aa00dee19c0c"}, "created_at": 1662493240.8612092, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.quixotic_sales_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_TX_HASH.73d4776795": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_TX_HASH.73d4776795", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_TX_HASH.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_TX_HASH", "alias": "quixotic_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.865649, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_TX_HASH__0_xX_0_9a_fA_F_.864a57e1fc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c829d965d36d725336d34a0d0e3b1b6e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c829d965d36d725336d34a0d0e3b1b6e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_TX_HASH__0_xX_0_9a_fA_F_.864a57e1fc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c829d965d36d725336d34a0d0e3b1b6e.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_TX_HASH__0_xX_0_9a_fA_F_", "alias": "quixotic_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_c829d965d36d725336d34a0d0e3b1b6e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c829d965d36d725336d34a0d0e3b1b6e"}, "created_at": 1662493240.867331, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.quixotic_sales_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_ADDRESS.b320c65317": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_PLATFORM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_ADDRESS.b320c65317", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_PLATFORM_ADDRESS.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_PLATFORM_ADDRESS", "alias": "quixotic_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_PLATFORM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.885141, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere PLATFORM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_PLATFORM_ADDRESS", "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.b8e09a055d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_43d4f11532c44f4997ad190ca026b392\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_43d4f11532c44f4997ad190ca026b392", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.b8e09a055d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_43d4f11532c44f4997ad190ca026b392.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "quixotic_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_43d4f11532c44f4997ad190ca026b392.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_43d4f11532c44f4997ad190ca026b392"}, "created_at": 1662493240.8880482, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(PLATFORM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.quixotic_sales_PLATFORM_ADDRESS", "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_NAME.4f669cf98f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_PLATFORM_NAME"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_NAME.4f669cf98f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_PLATFORM_NAME.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_PLATFORM_NAME", "alias": "quixotic_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_PLATFORM_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.893474, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere PLATFORM_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_PLATFORM_NAME", "column_name": "PLATFORM_NAME", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_PLATFORM_NAME__quixotic.c11519c9fc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_41d4cdf83e944e63b9213ebe9cd9fd14\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["quixotic"], "column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_41d4cdf83e944e63b9213ebe9cd9fd14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_PLATFORM_NAME__quixotic"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_PLATFORM_NAME__quixotic.c11519c9fc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_41d4cdf83e944e63b9213ebe9cd9fd14.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_PLATFORM_NAME__quixotic", "alias": "quixotic_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_41d4cdf83e944e63b9213ebe9cd9fd14.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_41d4cdf83e944e63b9213ebe9cd9fd14"}, "created_at": 1662493240.8952808, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        PLATFORM_NAME as value_field\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('quixotic' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_set_silver.quixotic_sales_PLATFORM_NAME", "column_name": "PLATFORM_NAME", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_SELLER_ADDRESS.0c5df1a76d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_SELLER_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_SELLER_ADDRESS.0c5df1a76d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_SELLER_ADDRESS.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_SELLER_ADDRESS", "alias": "quixotic_sales_SELLER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_SELLER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.90556, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere SELLER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_SELLER_ADDRESS", "column_name": "SELLER_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.e027e64844": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a0691531a632deaa1c276a76e73c3e49\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SELLER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a0691531a632deaa1c276a76e73c3e49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.e027e64844", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_a0691531a632deaa1c276a76e73c3e49.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "quixotic_sales_SELLER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_a0691531a632deaa1c276a76e73c3e49.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a0691531a632deaa1c276a76e73c3e49"}, "created_at": 1662493240.908094, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SELLER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.quixotic_sales_SELLER_ADDRESS", "column_name": "SELLER_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_BUYER_ADDRESS.0acf1d3921": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BUYER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_BUYER_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_BUYER_ADDRESS.0acf1d3921", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_BUYER_ADDRESS.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_BUYER_ADDRESS", "alias": "quixotic_sales_BUYER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_BUYER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.914361, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere BUYER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_BUYER_ADDRESS", "column_name": "BUYER_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.8a823ec7b8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_729641b576d1c9fd9638e99f925ba3e3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "BUYER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_729641b576d1c9fd9638e99f925ba3e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.8a823ec7b8", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_729641b576d1c9fd9638e99f925ba3e3.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "quixotic_sales_BUYER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_729641b576d1c9fd9638e99f925ba3e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_729641b576d1c9fd9638e99f925ba3e3"}, "created_at": 1662493240.916039, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(BUYER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.quixotic_sales_BUYER_ADDRESS", "column_name": "BUYER_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_NFT_ADDRESS.03d9666022": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_NFT_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_NFT_ADDRESS.03d9666022", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_NFT_ADDRESS.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_NFT_ADDRESS", "alias": "quixotic_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_NFT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.921966, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere NFT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_NFT_ADDRESS", "column_name": "NFT_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.fb674f9114": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_200a22a439198a178f0d7d54add298c2\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_200a22a439198a178f0d7d54add298c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.fb674f9114", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_200a22a439198a178f0d7d54add298c2.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "quixotic_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_200a22a439198a178f0d7d54add298c2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_200a22a439198a178f0d7d54add298c2"}, "created_at": 1662493240.9242408, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.quixotic_sales_NFT_ADDRESS", "column_name": "NFT_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_TOKENID.62dfe07e06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKENID", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_TOKENID"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_TOKENID.62dfe07e06", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_TOKENID.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_TOKENID", "alias": "quixotic_sales_TOKENID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_TOKENID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.9293382, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere TOKENID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_TOKENID", "column_name": "TOKENID", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_CURRENCY_ADDRESS.8bb2544e69": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENCY_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_CURRENCY_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_CURRENCY_ADDRESS.8bb2544e69", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_CURRENCY_ADDRESS.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_CURRENCY_ADDRESS", "alias": "quixotic_sales_CURRENCY_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_CURRENCY_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.930969, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere CURRENCY_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_CURRENCY_ADDRESS", "column_name": "CURRENCY_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_PRICE.4dfbfe1d9a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_PRICE"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_PRICE.4dfbfe1d9a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_PRICE.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_PRICE", "alias": "quixotic_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.932873, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_PRICE", "column_name": "PRICE", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE__NUMBER__FLOAT.89e9d65183": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0993291f5a1c0722f35663ad3c8eec19\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0993291f5a1c0722f35663ad3c8eec19", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE__NUMBER__FLOAT.89e9d65183", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_0993291f5a1c0722f35663ad3c8eec19.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE__NUMBER__FLOAT", "alias": "quixotic_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_0993291f5a1c0722f35663ad3c8eec19.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0993291f5a1c0722f35663ad3c8eec19"}, "created_at": 1662493240.9345121, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.quixotic_sales_PRICE", "column_name": "PRICE", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE_USD__NUMBER__FLOAT.082a0b81ca": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3b2d8067a9fd913319b3274ab9135767\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3b2d8067a9fd913319b3274ab9135767", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE_USD__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE_USD__NUMBER__FLOAT.082a0b81ca", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3b2d8067a9fd913319b3274ab9135767.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE_USD__NUMBER__FLOAT", "alias": "quixotic_sales_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_3b2d8067a9fd913319b3274ab9135767.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3b2d8067a9fd913319b3274ab9135767"}, "created_at": 1662493240.94101, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.quixotic_sales_PRICE_USD", "column_name": "PRICE_USD", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales__INSERTED_TIMESTAMP.f67ee5b673": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales__INSERTED_TIMESTAMP.f67ee5b673", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales__INSERTED_TIMESTAMP.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales__INSERTED_TIMESTAMP", "alias": "quixotic_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.9461272, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales__INSERTED_TIMESTAMP__day__1.95964877e9": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_c02c0900b6bdabcd6e85074b8d78f81b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_c02c0900b6bdabcd6e85074b8d78f81b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales__INSERTED_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales__INSERTED_TIMESTAMP__day__1.95964877e9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_c02c0900b6bdabcd6e85074b8d78f81b.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales__INSERTED_TIMESTAMP__day__1", "alias": "quixotic_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_row_va_c02c0900b6bdabcd6e85074b8d78f81b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_c02c0900b6bdabcd6e85074b8d78f81b"}, "created_at": 1662493240.947753, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.quixotic_sales\n    where\n        -- to exclude erroneous future dates\n        cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.quixotic_sales", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.e4335684a7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_77d0287443e7a6a1708a67c691f47972\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_77d0287443e7a6a1708a67c691f47972", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.e4335684a7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_77d0287443e7a6a1708a67c691f47972.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "quixotic_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_77d0287443e7a6a1708a67c691f47972.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_77d0287443e7a6a1708a67c691f47972"}, "created_at": 1662493240.954359, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.quixotic_sales", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FROM_ADDRESS.4c7061f7be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FROM_ADDRESS.4c7061f7be", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_ORIGIN_FROM_ADDRESS", "alias": "quixotic_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.9613938, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3508543092": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bd2322e8ee7a0bba5715fefbcfbbf0b4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd2322e8ee7a0bba5715fefbcfbbf0b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3508543092", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_bd2322e8ee7a0bba5715fefbcfbbf0b4.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "quixotic_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_bd2322e8ee7a0bba5715fefbcfbbf0b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bd2322e8ee7a0bba5715fefbcfbbf0b4"}, "created_at": 1662493240.963166, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.quixotic_sales_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_TO_ADDRESS.bf4d5ee339": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_ORIGIN_TO_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_TO_ADDRESS.bf4d5ee339", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_ORIGIN_TO_ADDRESS", "alias": "quixotic_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.970996, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4e70413fbf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7993f2c72fdaadbcdc0e8528985f7089\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7993f2c72fdaadbcdc0e8528985f7089", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4e70413fbf", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_7993f2c72fdaadbcdc0e8528985f7089.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "quixotic_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_7993f2c72fdaadbcdc0e8528985f7089.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7993f2c72fdaadbcdc0e8528985f7089"}, "created_at": 1662493240.973164, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.quixotic_sales_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE.c625f03712": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE.c625f03712", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE", "alias": "quixotic_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.9792361, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.69cb94d5e6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1a3228b2d308c478fce04eba1fde9be4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1a3228b2d308c478fce04eba1fde9be4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.69cb94d5e6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_1a3228b2d308c478fce04eba1fde9be4.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "quixotic_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_1a3228b2d308c478fce04eba1fde9be4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1a3228b2d308c478fce04eba1fde9be4"}, "created_at": 1662493240.9812748, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.quixotic_sales_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__quixotic_sales_EVENT_TYPE.43592e3da0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "quixotic", "not_null_silver__quixotic_sales_EVENT_TYPE"], "unique_id": "test.optimism_models.not_null_silver__quixotic_sales_EVENT_TYPE.43592e3da0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__quixotic_sales_EVENT_TYPE.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "not_null_silver__quixotic_sales_EVENT_TYPE", "alias": "quixotic_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/not_null_silver__quixotic_sales_EVENT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493240.987127, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.quixotic_sales\nwhere EVENT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.quixotic_sales_EVENT_TYPE", "column_name": "EVENT_TYPE", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_EVENT_TYPE__bid_won__sale.3b9573950f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7f292262d66c09b387f02713360dd624\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["bid_won", "sale"], "column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7f292262d66c09b387f02713360dd624", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["optimism_models", "quixotic", "dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_EVENT_TYPE__bid_won__sale"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_EVENT_TYPE__bid_won__sale.3b9573950f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_7f292262d66c09b387f02713360dd624.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_EVENT_TYPE__bid_won__sale", "alias": "quixotic_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_expectations_expect_column_7f292262d66c09b387f02713360dd624.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7f292262d66c09b387f02713360dd624"}, "created_at": 1662493240.9898481, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        EVENT_TYPE as value_field\n\n    from OPTIMISM_DEV.silver.quixotic_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('bid_won' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('sale' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_set_silver.quixotic_sales_EVENT_TYPE", "column_name": "EVENT_TYPE", "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__quixotic_sales__log_id.de4afadaef": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_df0bfba7b7fc7246ca15d40e570f0cd0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver__quixotic_sales')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__quixotic_sales"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_df0bfba7b7fc7246ca15d40e570f0cd0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "quixotic", "dbt_utils_unique_combination_of_columns_silver__quixotic_sales__log_id"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__quixotic_sales__log_id.de4afadaef", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_df0bfba7b7fc7246ca15d40e570f0cd0.sql", "original_file_path": "models/quixotic/silver__quixotic_sales.yml", "name": "dbt_utils_unique_combination_of_columns_silver__quixotic_sales__log_id", "alias": "quixotic_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__quixotic_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/quixotic/silver__quixotic_sales.yml/dbt_utils_unique_combination_o_df0bfba7b7fc7246ca15d40e570f0cd0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_df0bfba7b7fc7246ca15d40e570f0cd0"}, "created_at": 1662493240.99615, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from OPTIMISM_DEV.silver.quixotic_sales\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.quixotic_sales", "column_name": null, "file_key_name": "models.silver__quixotic_sales"}, "test.optimism_models.not_null_silver__delegations_BLOCK_NUMBER.9e98d78e82": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__delegations_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__delegations_BLOCK_NUMBER.9e98d78e82", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__delegations_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "not_null_silver__delegations_BLOCK_NUMBER", "alias": "delegations_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/not_null_silver__delegations_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.0138419, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.delegations\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.delegations_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_NUMBER__NUMBER__FLOAT.6df66f7c87": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_77134ac23c9bc966263386ee2e37c408\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_77134ac23c9bc966263386ee2e37c408", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_NUMBER__NUMBER__FLOAT.6df66f7c87", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_77134ac23c9bc966263386ee2e37c408.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "delegations_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_expectations_expect_column_77134ac23c9bc966263386ee2e37c408.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_77134ac23c9bc966263386ee2e37c408"}, "created_at": 1662493241.016961, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DELEGATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DELEGATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.delegations_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__delegations"}, "test.optimism_models.not_null_silver__delegations_BLOCK_TIMESTAMP.35dd022b83": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__delegations_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__delegations_BLOCK_TIMESTAMP.35dd022b83", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__delegations_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "not_null_silver__delegations_BLOCK_TIMESTAMP", "alias": "delegations_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/not_null_silver__delegations_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.023464, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.delegations\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.delegations_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__delegations_BLOCK_TIMESTAMP__day__1.08b9fccdc2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_5856e03ab1057b9e6ce9f4c7d035e60c\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_5856e03ab1057b9e6ce9f4c7d035e60c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__delegations_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__delegations_BLOCK_TIMESTAMP__day__1.08b9fccdc2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_5856e03ab1057b9e6ce9f4c7d035e60c.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__delegations_BLOCK_TIMESTAMP__day__1", "alias": "delegations_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_expectations_expect_row_va_5856e03ab1057b9e6ce9f4c7d035e60c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_5856e03ab1057b9e6ce9f4c7d035e60c"}, "created_at": 1662493241.0269382, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.delegations\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.delegations_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ca31b3721": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ccdb55b7c3aff712fb8d63acc11a85d3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ccdb55b7c3aff712fb8d63acc11a85d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ca31b3721", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ccdb55b7c3aff712fb8d63acc11a85d3.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "delegations_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_expectations_expect_column_ccdb55b7c3aff712fb8d63acc11a85d3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ccdb55b7c3aff712fb8d63acc11a85d3"}, "created_at": 1662493241.033994, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DELEGATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DELEGATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.delegations_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__delegations"}, "test.optimism_models.not_null_silver__delegations_TX_HASH.c9a8e85892": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__delegations_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__delegations_TX_HASH.c9a8e85892", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__delegations_TX_HASH.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "not_null_silver__delegations_TX_HASH", "alias": "delegations_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/not_null_silver__delegations_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.041632, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.delegations\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.delegations_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TX_HASH__0_xX_0_9a_fA_F_.7dbf3786bf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9378774d4cb2cc2e4f7413a0d344aef4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9378774d4cb2cc2e4f7413a0d344aef4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TX_HASH__0_xX_0_9a_fA_F_.7dbf3786bf", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_9378774d4cb2cc2e4f7413a0d344aef4.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TX_HASH__0_xX_0_9a_fA_F_", "alias": "delegations_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_expectations_expect_column_9378774d4cb2cc2e4f7413a0d344aef4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9378774d4cb2cc2e4f7413a0d344aef4"}, "created_at": 1662493241.043545, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.delegations\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.delegations_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__delegations"}, "test.optimism_models.not_null_silver__delegations_STATUS.8316771be1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__delegations_STATUS"], "unique_id": "test.optimism_models.not_null_silver__delegations_STATUS.8316771be1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__delegations_STATUS.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "not_null_silver__delegations_STATUS", "alias": "delegations_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/not_null_silver__delegations_STATUS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.0489862, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.delegations\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.delegations_STATUS", "column_name": "STATUS", "file_key_name": "models.silver__delegations"}, "test.optimism_models.not_null_silver__delegations_DELEGATOR.72a15524b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DELEGATOR", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__delegations_DELEGATOR"], "unique_id": "test.optimism_models.not_null_silver__delegations_DELEGATOR.72a15524b0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__delegations_DELEGATOR.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "not_null_silver__delegations_DELEGATOR", "alias": "delegations_DELEGATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/not_null_silver__delegations_DELEGATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.052165, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.delegations\nwhere DELEGATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.delegations_DELEGATOR", "column_name": "DELEGATOR", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_DELEGATOR__0_xX_0_9a_fA_F_.432cc57b32": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8467997861fb2d572f70960ffae6a59c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "DELEGATOR", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8467997861fb2d572f70960ffae6a59c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__delegations_DELEGATOR__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_DELEGATOR__0_xX_0_9a_fA_F_.432cc57b32", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_8467997861fb2d572f70960ffae6a59c.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__delegations_DELEGATOR__0_xX_0_9a_fA_F_", "alias": "delegations_DELEGATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_expectations_expect_column_8467997861fb2d572f70960ffae6a59c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8467997861fb2d572f70960ffae6a59c"}, "created_at": 1662493241.055261, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(DELEGATOR, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.delegations\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.delegations_DELEGATOR", "column_name": "DELEGATOR", "file_key_name": "models.silver__delegations"}, "test.optimism_models.not_null_silver__delegations_TO_DELEGATE.564317e0d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"STATUS = 'SUCCESS'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_DELEGATE", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "STATUS = 'SUCCESS'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__delegations_TO_DELEGATE"], "unique_id": "test.optimism_models.not_null_silver__delegations_TO_DELEGATE.564317e0d5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__delegations_TO_DELEGATE.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "not_null_silver__delegations_TO_DELEGATE", "alias": "delegations_TO_DELEGATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/not_null_silver__delegations_TO_DELEGATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "STATUS = 'SUCCESS'"}, "created_at": 1662493241.062662, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.delegations where STATUS = 'SUCCESS') dbt_subquery\nwhere TO_DELEGATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.delegations_TO_DELEGATE", "column_name": "TO_DELEGATE", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TO_DELEGATE__0_xX_0_9a_fA_F_.0bcad7e027": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b767bfe7434185b184c90bdddbba48f3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_DELEGATE", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b767bfe7434185b184c90bdddbba48f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TO_DELEGATE__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TO_DELEGATE__0_xX_0_9a_fA_F_.0bcad7e027", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_b767bfe7434185b184c90bdddbba48f3.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TO_DELEGATE__0_xX_0_9a_fA_F_", "alias": "delegations_TO_DELEGATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_expectations_expect_column_b767bfe7434185b184c90bdddbba48f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b767bfe7434185b184c90bdddbba48f3"}, "created_at": 1662493241.0643032, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_DELEGATE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.delegations\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.delegations_TO_DELEGATE", "column_name": "TO_DELEGATE", "file_key_name": "models.silver__delegations"}, "test.optimism_models.not_null_silver__delegations_FROM_DELEGATE.22fab527f0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DELEGATION_TYPE = 'Re-Delegation' AND STATUS = 'SUCCESS'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_DELEGATE", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DELEGATION_TYPE = 'Re-Delegation' AND STATUS = 'SUCCESS'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__delegations_FROM_DELEGATE"], "unique_id": "test.optimism_models.not_null_silver__delegations_FROM_DELEGATE.22fab527f0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__delegations_FROM_DELEGATE.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "not_null_silver__delegations_FROM_DELEGATE", "alias": "delegations_FROM_DELEGATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/not_null_silver__delegations_FROM_DELEGATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DELEGATION_TYPE = 'Re-Delegation' AND STATUS = 'SUCCESS'"}, "created_at": 1662493241.0733771, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.delegations where DELEGATION_TYPE = 'Re-Delegation' AND STATUS = 'SUCCESS') dbt_subquery\nwhere FROM_DELEGATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.delegations_FROM_DELEGATE", "column_name": "FROM_DELEGATE", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_FROM_DELEGATE__0_xX_0_9a_fA_F_.33f77eec0c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a0883b799993945c5f68d0d8f5fb9310\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_DELEGATE", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a0883b799993945c5f68d0d8f5fb9310", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__delegations_FROM_DELEGATE__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_FROM_DELEGATE__0_xX_0_9a_fA_F_.33f77eec0c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_a0883b799993945c5f68d0d8f5fb9310.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__delegations_FROM_DELEGATE__0_xX_0_9a_fA_F_", "alias": "delegations_FROM_DELEGATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_expectations_expect_column_a0883b799993945c5f68d0d8f5fb9310.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a0883b799993945c5f68d0d8f5fb9310"}, "created_at": 1662493241.075379, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_DELEGATE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.delegations\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.delegations_FROM_DELEGATE", "column_name": "FROM_DELEGATE", "file_key_name": "models.silver__delegations"}, "test.optimism_models.not_null_silver__delegations_DELEGATION_TYPE.758fb43fca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DELEGATION_TYPE", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__delegations_DELEGATION_TYPE"], "unique_id": "test.optimism_models.not_null_silver__delegations_DELEGATION_TYPE.758fb43fca", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__delegations_DELEGATION_TYPE.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "not_null_silver__delegations_DELEGATION_TYPE", "alias": "delegations_DELEGATION_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/not_null_silver__delegations_DELEGATION_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.080967, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.delegations\nwhere DELEGATION_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.delegations_DELEGATION_TYPE", "column_name": "DELEGATION_TYPE", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__delegations_DELEGATION_TYPE__First_Time_Delegator__First_Time_Delegator_Self_Delegation__Self_Delegation__Re_Delegation.d93a91975f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_35d9a35531fcc0915915e78fc0067217\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["First Time Delegator", "First Time Delegator - Self Delegation", "Self-Delegation", "Re-Delegation"], "column_name": "DELEGATION_TYPE", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_35d9a35531fcc0915915e78fc0067217", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__delegations_DELEGATION_TYPE__First_Time_Delegator__First_Time_Delegator_Self_Delegation__Self_Delegation__Re_Delegation"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__delegations_DELEGATION_TYPE__First_Time_Delegator__First_Time_Delegator_Self_Delegation__Self_Delegation__Re_Delegation.d93a91975f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_35d9a35531fcc0915915e78fc0067217.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__delegations_DELEGATION_TYPE__First_Time_Delegator__First_Time_Delegator_Self_Delegation__Self_Delegation__Re_Delegation", "alias": "delegations_DELEGATION_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_expectations_expect_column_35d9a35531fcc0915915e78fc0067217.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_35d9a35531fcc0915915e78fc0067217"}, "created_at": 1662493241.084107, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        DELEGATION_TYPE as value_field\n\n    from OPTIMISM_DEV.silver.delegations\n    \n\n),\nset_values as (\n\n    select\n        cast('First Time Delegator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('First Time Delegator - Self Delegation' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('Self-Delegation' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('Re-Delegation' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_set_silver.delegations_DELEGATION_TYPE", "column_name": "DELEGATION_TYPE", "file_key_name": "models.silver__delegations"}, "test.optimism_models.not_null_silver__delegations__INSERTED_TIMESTAMP.02ca6a9b60": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__delegations__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__delegations__INSERTED_TIMESTAMP.02ca6a9b60", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__delegations__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "not_null_silver__delegations__INSERTED_TIMESTAMP", "alias": "delegations", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/not_null_silver__delegations__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.093471, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.delegations\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.delegations", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8ecbad1539": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f5b0de2b3b593bc4c82e4d369392e9a4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f5b0de2b3b593bc4c82e4d369392e9a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8ecbad1539", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_f5b0de2b3b593bc4c82e4d369392e9a4.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "delegations", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_expectations_expect_column_f5b0de2b3b593bc4c82e4d369392e9a4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f5b0de2b3b593bc4c82e4d369392e9a4"}, "created_at": 1662493241.095225, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DELEGATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DELEGATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.delegations", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__delegations"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__delegations_TX_HASH.2612691b94": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b6789e4662fecfb35483dbdacba60701\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_HASH"], "model": "{{ get_where_subquery(ref('silver__delegations')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__delegations"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b6789e4662fecfb35483dbdacba60701", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "silver", "dbt_utils_unique_combination_of_columns_silver__delegations_TX_HASH"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__delegations_TX_HASH.2612691b94", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_b6789e4662fecfb35483dbdacba60701.sql", "original_file_path": "models/silver/silver__delegations.yml", "name": "dbt_utils_unique_combination_of_columns_silver__delegations_TX_HASH", "alias": "delegations_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__delegations.yml/dbt_utils_unique_combination_o_b6789e4662fecfb35483dbdacba60701.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_b6789e4662fecfb35483dbdacba60701"}, "created_at": 1662493241.099711, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_HASH\n    from OPTIMISM_DEV.silver.delegations\n    group by TX_HASH\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.delegations_TX_HASH", "column_name": null, "file_key_name": "models.silver__delegations"}, "test.optimism_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_BLOCK_NUMBER", "alias": "logs_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.114709, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER", "alias": "logs_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248"}, "created_at": 1662493241.118127, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_BLOCK_TIMESTAMP", "alias": "logs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.124971, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_246437673a44a698488babf02633f091\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_246437673a44a698488babf02633f091", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_246437673a44a698488babf02633f091.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1", "alias": "logs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_row_va_246437673a44a698488babf02633f091.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_246437673a44a698488babf02633f091"}, "created_at": 1662493241.126862, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.logs\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.logs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "logs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df"}, "created_at": 1662493241.132591, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs_TX_HASH.18b09ee14d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__logs_TX_HASH.18b09ee14d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_TX_HASH.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_TX_HASH", "alias": "logs_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.140082, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_", "alias": "logs_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65"}, "created_at": 1662493241.142315, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.logs_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_EVENT_INDEX"], "unique_id": "test.optimism_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_EVENT_INDEX.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_EVENT_INDEX", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.147299, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43"}, "created_at": 1662493241.149212, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_CONTRACT_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_CONTRACT_ADDRESS", "alias": "logs_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.156477, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "logs_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9"}, "created_at": 1662493241.158606, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.logs_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVENT_NAME", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR", "alias": "logs_EVENT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5"}, "created_at": 1662493241.16309, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_EVENT_NAME", "column_name": "EVENT_NAME", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "EVENT_INPUTS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT", "alias": "logs_EVENT_INPUTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5"}, "created_at": 1662493241.169277, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INPUTS'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_EVENT_INPUTS", "column_name": "EVENT_INPUTS", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs_TOPICS.f042e94d85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOPICS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_TOPICS"], "unique_id": "test.optimism_models.not_null_silver__logs_TOPICS.f042e94d85", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_TOPICS.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_TOPICS", "alias": "logs_TOPICS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_TOPICS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.231104, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere TOPICS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_TOPICS", "column_name": "TOPICS", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs_DATA.c5fac5c4a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_DATA"], "unique_id": "test.optimism_models.not_null_silver__logs_DATA.c5fac5c4a4", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_DATA.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_DATA", "alias": "logs_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.232952, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_DATA", "column_name": "DATA", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_REMOVED", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_EVENT_REMOVED"], "unique_id": "test.optimism_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_EVENT_REMOVED.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_EVENT_REMOVED", "alias": "logs_EVENT_REMOVED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_EVENT_REMOVED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.235384, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere EVENT_REMOVED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_EVENT_REMOVED", "column_name": "EVENT_REMOVED", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs__LOG_ID.8c3f196b2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs__LOG_ID"], "unique_id": "test.optimism_models.not_null_silver__logs__LOG_ID.8c3f196b2a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs__LOG_ID.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs__LOG_ID", "alias": "logs", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.238688, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs", "column_name": "_LOG_ID", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE", "alias": "logs_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.241106, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__logs_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__logs_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_ORIGIN_FROM_ADDRESS", "alias": "logs_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/not_null_silver__logs_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.2433941, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.logs\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.logs_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "logs_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900"}, "created_at": 1662493241.245305, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.logs_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "logs_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6"}, "created_at": 1662493241.2509508, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.logs_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__logs"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "silver", "dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID", "alias": "logs", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.2579122, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from OPTIMISM_DEV.silver.logs\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.logs", "column_name": null, "file_key_name": "models.silver__logs"}, "test.optimism_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"partition_by": ["BLOCK_NUMBER", "TX_HASH"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.optimism_models.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "sequence_gaps_silver", "fqn": ["optimism_models", "silver", "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH"], "unique_id": "test.optimism_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__logs.yml/sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662493241.2627351, "compiled_sql": "WITH source AS (\n    SELECT\n        BLOCK_NUMBER, TX_HASH,\n        EVENT_INDEX,\n        LAG(\n            EVENT_INDEX,\n            1\n        ) over (\n            PARTITION BY BLOCK_NUMBER, TX_HASH\n            ORDER BY\n                EVENT_INDEX ASC\n        ) AS prev_EVENT_INDEX\n    FROM\n        (select * from OPTIMISM_DEV.silver.logs where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    BLOCK_NUMBER, TX_HASH,\n    prev_EVENT_INDEX,\n    EVENT_INDEX,\n    EVENT_INDEX - prev_EVENT_INDEX\n    - 1 AS gap\nFROM\n    source\nWHERE\n    EVENT_INDEX - prev_EVENT_INDEX <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.sequence_gaps_silver.logs_EVENT_INDEX", "column_name": null, "file_key_name": "models.silver__logs"}, "test.optimism_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__traces_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__traces_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_BLOCK_NUMBER", "alias": "traces_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/not_null_silver__traces_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.2766888, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.traces\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.traces_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__traces"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "traces_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9"}, "created_at": 1662493241.278423, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTIFIER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_CALL_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUB_TRACES' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.traces_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__traces"}, "test.optimism_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__traces_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__traces_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_BLOCK_TIMESTAMP", "alias": "traces_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/not_null_silver__traces_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.283417, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.traces\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.traces_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__traces"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1", "alias": "traces_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0"}, "created_at": 1662493241.286245, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.traces\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.traces_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__traces"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "traces_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590"}, "created_at": 1662493241.29318, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTIFIER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_CALL_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUB_TRACES' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.traces_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__traces"}, "test.optimism_models.not_null_silver__traces_TX_HASH.ccbdeb5e91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__traces_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__traces_TX_HASH.ccbdeb5e91", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__traces_TX_HASH.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_TX_HASH", "alias": "traces_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/not_null_silver__traces_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.297573, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.traces\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.traces_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__traces"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_", "alias": "traces_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060"}, "created_at": 1662493241.299309, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.traces\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.traces_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__traces"}, "test.optimism_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"TYPE <> 'SELFDESTRUCT'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TYPE <> 'SELFDESTRUCT'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__traces_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__traces_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_FROM_ADDRESS", "alias": "traces_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/not_null_silver__traces_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TYPE <> 'SELFDESTRUCT'"}, "created_at": 1662493241.3068469, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.traces where TYPE <> 'SELFDESTRUCT') dbt_subquery\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.traces_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__traces"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "traces_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f"}, "created_at": 1662493241.309073, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.traces\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.traces_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__traces"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(where=\"TO_ADDRESS IS NOT NULL\",alias=\"dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TO_ADDRESS IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "traces_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TO_ADDRESS IS NOT NULL", "alias": "dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb"}, "created_at": 1662493241.314469, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from OPTIMISM_DEV.silver.traces where TO_ADDRESS IS NOT NULL) dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.traces_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__traces"}, "test.optimism_models.not_null_silver__traces_IDENTIFIER.ee73127ec0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IDENTIFIER", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__traces_IDENTIFIER"], "unique_id": "test.optimism_models.not_null_silver__traces_IDENTIFIER.ee73127ec0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__traces_IDENTIFIER.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_IDENTIFIER", "alias": "traces_IDENTIFIER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/not_null_silver__traces_IDENTIFIER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.320429, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.traces\nwhere IDENTIFIER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.traces_IDENTIFIER", "column_name": "IDENTIFIER", "file_key_name": "models.silver__traces"}, "test.optimism_models.not_null_silver__traces_ETH_VALUE.c271895d72": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ETH_VALUE", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__traces_ETH_VALUE"], "unique_id": "test.optimism_models.not_null_silver__traces_ETH_VALUE.c271895d72", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__traces_ETH_VALUE.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_ETH_VALUE", "alias": "traces_ETH_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/not_null_silver__traces_ETH_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.3228002, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.traces\nwhere ETH_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.traces_ETH_VALUE", "column_name": "ETH_VALUE", "file_key_name": "models.silver__traces"}, "test.optimism_models.not_null_silver__traces_GAS.53d7bbcf6a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__traces_GAS"], "unique_id": "test.optimism_models.not_null_silver__traces_GAS.53d7bbcf6a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__traces_GAS.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_GAS", "alias": "traces_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/not_null_silver__traces_GAS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.32494, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.traces\nwhere GAS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.traces_GAS", "column_name": "GAS", "file_key_name": "models.silver__traces"}, "test.optimism_models.not_null_silver__traces_GAS_USED.eb9bf97ca1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__traces_GAS_USED"], "unique_id": "test.optimism_models.not_null_silver__traces_GAS_USED.eb9bf97ca1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__traces_GAS_USED.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_GAS_USED", "alias": "traces_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/not_null_silver__traces_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.326796, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.traces\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.traces_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__traces"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_CALL_ID"], "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "silver", "dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID", "alias": "traces", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__traces.yml/dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.328346, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _CALL_ID\n    from OPTIMISM_DEV.silver.traces\n    group by _CALL_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.traces", "column_name": null, "file_key_name": "models.silver__traces"}, "test.optimism_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_NUMBER", "alias": "transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.6059651, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transfers\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02"}, "created_at": 1662493241.607661, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transfers"}, "test.optimism_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.612118, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d"}, "created_at": 1662493241.613628, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.transfers\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1"}, "created_at": 1662493241.619172, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.optimism_models.not_null_silver__transfers_TX_HASH.9444c39bdc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__transfers_TX_HASH.9444c39bdc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers_TX_HASH.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_HASH", "alias": "transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.624668, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transfers\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_", "alias": "transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab"}, "created_at": 1662493241.6262531, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__transfers"}, "test.optimism_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers_CONTRACT_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_CONTRACT_ADDRESS", "alias": "transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.631089, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transfers\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde"}, "created_at": 1662493241.6328268, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.optimism_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_FROM_ADDRESS", "alias": "transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1662493241.6388009, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.transfers where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16"}, "created_at": 1662493241.64083, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.optimism_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers_TO_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TO_ADDRESS", "alias": "transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.645049, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transfers\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc"}, "created_at": 1662493241.646942, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.optimism_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RAW_AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers_RAW_AMOUNT"], "unique_id": "test.optimism_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers_RAW_AMOUNT.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_RAW_AMOUNT", "alias": "transfers_RAW_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers_RAW_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.6513731, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transfers\nwhere RAW_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers_RAW_AMOUNT", "column_name": "RAW_AMOUNT", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RAW_AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT", "alias": "transfers_RAW_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d"}, "created_at": 1662493241.654403, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RAW_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_RAW_AMOUNT", "column_name": "RAW_AMOUNT", "file_key_name": "models.silver__transfers"}, "test.optimism_models.not_null_silver__transfers__LOG_ID.29bb073a40": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers__LOG_ID"], "unique_id": "test.optimism_models.not_null_silver__transfers__LOG_ID.29bb073a40", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers__LOG_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers__LOG_ID", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.660043, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transfers\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers", "column_name": "_LOG_ID", "file_key_name": "models.silver__transfers"}, "test.optimism_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE", "alias": "transfers_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.661599, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transfers\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__transfers"}, "test.optimism_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transfers_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transfers_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_ORIGIN_FROM_ADDRESS", "alias": "transfers_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/not_null_silver__transfers_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.663139, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transfers\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transfers_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83"}, "created_at": 1662493241.6646452, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c"}, "created_at": 1662493241.669794, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transfers.yml/dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d"}, "created_at": 1662493241.674999, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from OPTIMISM_DEV.silver.transfers\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.transfers", "column_name": null, "file_key_name": "models.silver__transfers"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_HOUR__day__1.4eaeec6525": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_af058793d3b89d372434830485897405\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "HOUR", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_af058793d3b89d372434830485897405", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_HOUR__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_HOUR__day__1.4eaeec6525", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_af058793d3b89d372434830485897405.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_HOUR__day__1", "alias": "prices_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__prices.yml/dbt_expectations_expect_row_va_af058793d3b89d372434830485897405.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_af058793d3b89d372434830485897405"}, "created_at": 1662493241.680949, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(HOUR as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.prices\n    where\n        -- to exclude erroneous future dates\n        cast(HOUR as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.prices_HOUR", "column_name": "HOUR", "file_key_name": "models.silver__prices"}, "test.optimism_models.not_null_silver__prices_PRICE.09dcf418d9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__prices_PRICE"], "unique_id": "test.optimism_models.not_null_silver__prices_PRICE.09dcf418d9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__prices_PRICE.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_PRICE", "alias": "prices_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__prices.yml/not_null_silver__prices_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.687215, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.prices\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.prices_PRICE", "column_name": "PRICE", "file_key_name": "models.silver__prices"}, "test.optimism_models.not_null_silver__prices_TOKEN_ADDRESS.88e8e36eb7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"SYMBOL <> 'ETH'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "SYMBOL <> 'ETH'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__prices_TOKEN_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__prices_TOKEN_ADDRESS.88e8e36eb7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__prices_TOKEN_ADDRESS.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_TOKEN_ADDRESS", "alias": "prices_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__prices.yml/not_null_silver__prices_TOKEN_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "SYMBOL <> 'ETH'"}, "created_at": 1662493241.690531, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.prices where SYMBOL <> 'ETH') dbt_subquery\nwhere TOKEN_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.prices_TOKEN_ADDRESS", "column_name": "TOKEN_ADDRESS", "file_key_name": "models.silver__prices"}, "test.optimism_models.not_null_silver__prices_SYMBOL.1202ffaafb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__prices_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__prices_SYMBOL.1202ffaafb", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__prices_SYMBOL.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_SYMBOL", "alias": "prices_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__prices.yml/not_null_silver__prices_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.692236, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.prices\nwhere SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.prices_SYMBOL", "column_name": "SYMBOL", "file_key_name": "models.silver__prices"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__prices_HOUR__TOKEN_ADDRESS.81be2f1610": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_13b05ffe0f843a701033b77ecdcd8f11\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["HOUR", "TOKEN_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__prices"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_13b05ffe0f843a701033b77ecdcd8f11", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "silver", "dbt_utils_unique_combination_of_columns_silver__prices_HOUR__TOKEN_ADDRESS"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__prices_HOUR__TOKEN_ADDRESS.81be2f1610", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_13b05ffe0f843a701033b77ecdcd8f11.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "dbt_utils_unique_combination_of_columns_silver__prices_HOUR__TOKEN_ADDRESS", "alias": "prices_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__prices.yml/dbt_utils_unique_combination_o_13b05ffe0f843a701033b77ecdcd8f11.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_13b05ffe0f843a701033b77ecdcd8f11"}, "created_at": 1662493241.693773, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        HOUR, TOKEN_ADDRESS\n    from OPTIMISM_DEV.silver.prices\n    group by HOUR, TOKEN_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.prices_HOUR", "column_name": null, "file_key_name": "models.silver__prices"}, "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_NUMBER.d17e3300f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_NUMBER.d17e3300f5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_BLOCK_NUMBER.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_BLOCK_NUMBER", "alias": "velodrome_votes_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.706429, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_NUMBER__NUMBER__FLOAT.95ae3b4ebb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dc5c8144b7ef5d098d0599fcd5f278ec\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc5c8144b7ef5d098d0599fcd5f278ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_NUMBER__NUMBER__FLOAT.95ae3b4ebb", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_dc5c8144b7ef5d098d0599fcd5f278ec.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "velodrome_votes_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_dc5c8144b7ef5d098d0599fcd5f278ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dc5c8144b7ef5d098d0599fcd5f278ec"}, "created_at": 1662493241.708351, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_votes_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_TIMESTAMP.5064d85700": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_TIMESTAMP.5064d85700", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_BLOCK_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_BLOCK_TIMESTAMP", "alias": "velodrome_votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.7130518, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes_BLOCK_TIMESTAMP__day__1.7abc261f64": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0f9715fc1291c4208cde5ebeaf44d55d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0f9715fc1291c4208cde5ebeaf44d55d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes_BLOCK_TIMESTAMP__day__1.7abc261f64", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_0f9715fc1291c4208cde5ebeaf44d55d.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes_BLOCK_TIMESTAMP__day__1", "alias": "velodrome_votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_row_va_0f9715fc1291c4208cde5ebeaf44d55d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_0f9715fc1291c4208cde5ebeaf44d55d"}, "created_at": 1662493241.714568, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_votes\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_votes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ddc69ebd9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4ff8e2d31832862866d1628708766647\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4ff8e2d31832862866d1628708766647", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ddc69ebd9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_4ff8e2d31832862866d1628708766647.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_4ff8e2d31832862866d1628708766647.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4ff8e2d31832862866d1628708766647"}, "created_at": 1662493241.7213912, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_votes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_TX_HASH.ea782b936f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_TX_HASH.ea782b936f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_TX_HASH.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_TX_HASH", "alias": "velodrome_votes_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.7264378, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_TX_HASH__0_xX_0_9a_fA_F_.f2181aeccc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4b15100a0579731d48a1bf157475490d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4b15100a0579731d48a1bf157475490d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_TX_HASH__0_xX_0_9a_fA_F_.f2181aeccc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_4b15100a0579731d48a1bf157475490d.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_TX_HASH__0_xX_0_9a_fA_F_", "alias": "velodrome_votes_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_4b15100a0579731d48a1bf157475490d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4b15100a0579731d48a1bf157475490d"}, "created_at": 1662493241.728068, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_votes_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE.34fb7206f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE.34fb7206f3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE", "alias": "velodrome_votes_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.732338, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.5aa7c03bb2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7c5f01512397ac3b8266c9f738b6e31d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7c5f01512397ac3b8266c9f738b6e31d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.5aa7c03bb2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_7c5f01512397ac3b8266c9f738b6e31d.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "velodrome_votes_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_7c5f01512397ac3b8266c9f738b6e31d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7c5f01512397ac3b8266c9f738b6e31d"}, "created_at": 1662493241.7339132, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_votes_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FROM_ADDRESS.ac4015265a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FROM_ADDRESS.ac4015265a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_ORIGIN_FROM_ADDRESS", "alias": "velodrome_votes_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.739628, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.b240acd078": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cf368c81739b79ddc0ac174e17a4265a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cf368c81739b79ddc0ac174e17a4265a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.b240acd078", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_cf368c81739b79ddc0ac174e17a4265a.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_votes_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_cf368c81739b79ddc0ac174e17a4265a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cf368c81739b79ddc0ac174e17a4265a"}, "created_at": 1662493241.741173, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_votes_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_TO_ADDRESS.f80609c528": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_ORIGIN_TO_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_TO_ADDRESS.f80609c528", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_ORIGIN_TO_ADDRESS", "alias": "velodrome_votes_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.745641, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4cf19b01c1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aad28f04f541cd430562500151955cd2\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aad28f04f541cd430562500151955cd2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4cf19b01c1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_aad28f04f541cd430562500151955cd2.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_votes_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_aad28f04f541cd430562500151955cd2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_aad28f04f541cd430562500151955cd2"}, "created_at": 1662493241.747189, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_votes_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_GAUGE_ADDRESS.f4e37b3299": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAUGE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_GAUGE_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_GAUGE_ADDRESS.f4e37b3299", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_GAUGE_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_GAUGE_ADDRESS", "alias": "velodrome_votes_GAUGE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_GAUGE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.751647, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere GAUGE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_GAUGE_ADDRESS", "column_name": "GAUGE_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.b3a9d2fb21": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0a7f544543cb1411bebb62f7d356bcde\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "GAUGE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0a7f544543cb1411bebb62f7d356bcde", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_GAUGE_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.b3a9d2fb21", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_0a7f544543cb1411bebb62f7d356bcde.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_GAUGE_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_votes_GAUGE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_0a7f544543cb1411bebb62f7d356bcde.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0a7f544543cb1411bebb62f7d356bcde"}, "created_at": 1662493241.754123, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(GAUGE_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_votes_GAUGE_ADDRESS", "column_name": "GAUGE_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS.d72bac0566": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTERNAL_BRIBE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS.d72bac0566", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS", "alias": "velodrome_votes_EXTERNAL_BRIBE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.760027, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere EXTERNAL_BRIBE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_EXTERNAL_BRIBE_ADDRESS", "column_name": "EXTERNAL_BRIBE_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.80c8df0851": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f97090722a8d050ae3a8bbfce93a217f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "EXTERNAL_BRIBE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f97090722a8d050ae3a8bbfce93a217f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.80c8df0851", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_f97090722a8d050ae3a8bbfce93a217f.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_votes_EXTERNAL_BRIBE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_f97090722a8d050ae3a8bbfce93a217f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f97090722a8d050ae3a8bbfce93a217f"}, "created_at": 1662493241.76191, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(EXTERNAL_BRIBE_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_votes_EXTERNAL_BRIBE_ADDRESS", "column_name": "EXTERNAL_BRIBE_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS.5ddfa8b438": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTERNAL_BRIBE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS.5ddfa8b438", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS", "alias": "velodrome_votes_INTERNAL_BRIBE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.766753, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere INTERNAL_BRIBE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_INTERNAL_BRIBE_ADDRESS", "column_name": "INTERNAL_BRIBE_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.5045a7c004": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_68e41a78f221a4cd6578b2827cd0fa16\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "INTERNAL_BRIBE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_68e41a78f221a4cd6578b2827cd0fa16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.5045a7c004", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_68e41a78f221a4cd6578b2827cd0fa16.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_votes_INTERNAL_BRIBE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_68e41a78f221a4cd6578b2827cd0fa16.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_68e41a78f221a4cd6578b2827cd0fa16"}, "created_at": 1662493241.768561, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(INTERNAL_BRIBE_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_votes_INTERNAL_BRIBE_ADDRESS", "column_name": "INTERNAL_BRIBE_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_POOL_ADDRESS.b3deb110eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_POOL_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_POOL_ADDRESS.b3deb110eb", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_POOL_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_POOL_ADDRESS", "alias": "velodrome_votes_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.77456, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_POOL_ADDRESS__0_xX_0_9a_fA_F_.26bc1d2bb8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_01de68f352829e7217880ab354231f0d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_01de68f352829e7217880ab354231f0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_POOL_ADDRESS__0_xX_0_9a_fA_F_.26bc1d2bb8", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_01de68f352829e7217880ab354231f0d.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_votes_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_01de68f352829e7217880ab354231f0d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_01de68f352829e7217880ab354231f0d"}, "created_at": 1662493241.7770472, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_votes_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_POOL_NAME.5b3dbc180f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">50\",error_if=\">100\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">50", "error_if": ">100"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_POOL_NAME"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_POOL_NAME.5b3dbc180f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_POOL_NAME.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_POOL_NAME", "alias": "velodrome_votes_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">50", "error_if": ">100"}, "created_at": 1662493241.782623, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_POOL_NAME__STRING__VARCHAR.6f0b909e53": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4b32eb39bd9bc7acebfdfe80e6bcf5f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4b32eb39bd9bc7acebfdfe80e6bcf5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_POOL_NAME__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_POOL_NAME__STRING__VARCHAR.6f0b909e53", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_d4b32eb39bd9bc7acebfdfe80e6bcf5f.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_POOL_NAME__STRING__VARCHAR", "alias": "velodrome_votes_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_d4b32eb39bd9bc7acebfdfe80e6bcf5f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d4b32eb39bd9bc7acebfdfe80e6bcf5f"}, "created_at": 1662493241.7842, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_votes_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_FROM_ADDRESS.032c3f8bac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_FROM_ADDRESS.032c3f8bac", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_FROM_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_FROM_ADDRESS", "alias": "velodrome_votes_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.790446, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_FROM_ADDRESS__0_xX_0_9a_fA_F_.e41cb331b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b3590a80b5d5dd114edc0ff66fee487e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b3590a80b5d5dd114edc0ff66fee487e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_FROM_ADDRESS__0_xX_0_9a_fA_F_.e41cb331b6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_b3590a80b5d5dd114edc0ff66fee487e.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_votes_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_b3590a80b5d5dd114edc0ff66fee487e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b3590a80b5d5dd114edc0ff66fee487e"}, "created_at": 1662493241.792107, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_votes_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_TOKEN_ID.960e2f017a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_TOKEN_ID"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_TOKEN_ID.960e2f017a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_TOKEN_ID.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_TOKEN_ID", "alias": "velodrome_votes_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_TOKEN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.7965639, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere TOKEN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_TOKEN_ID", "column_name": "TOKEN_ID", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_TOKEN_ID__FLOAT__NUMBER.5cb13a6161": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_27eddf085b5bf1cb737e07b8ac00ca73\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "NUMBER"], "column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_27eddf085b5bf1cb737e07b8ac00ca73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_TOKEN_ID__FLOAT__NUMBER"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_TOKEN_ID__FLOAT__NUMBER.5cb13a6161", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_27eddf085b5bf1cb737e07b8ac00ca73.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_TOKEN_ID__FLOAT__NUMBER", "alias": "velodrome_votes_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_27eddf085b5bf1cb737e07b8ac00ca73.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_27eddf085b5bf1cb737e07b8ac00ca73"}, "created_at": 1662493241.798111, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN_ID'\n            and\n            relation_column_type not in ('FLOAT', 'NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_votes_TOKEN_ID", "column_name": "TOKEN_ID", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_VOTE_AMOUNT.78cf4c6dcb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_VOTE_AMOUNT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_VOTE_AMOUNT.78cf4c6dcb", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_VOTE_AMOUNT.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_VOTE_AMOUNT", "alias": "velodrome_votes_VOTE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_VOTE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.804246, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere VOTE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_VOTE_AMOUNT", "column_name": "VOTE_AMOUNT", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_AMOUNT__FLOAT__NUMBER.c7aeda3803": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0d0b373e2ce21dddf9cd8bec1ad8d8bc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "NUMBER"], "column_name": "VOTE_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0d0b373e2ce21dddf9cd8bec1ad8d8bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_AMOUNT__FLOAT__NUMBER"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_AMOUNT__FLOAT__NUMBER.c7aeda3803", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_0d0b373e2ce21dddf9cd8bec1ad8d8bc.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_AMOUNT__FLOAT__NUMBER", "alias": "velodrome_votes_VOTE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_0d0b373e2ce21dddf9cd8bec1ad8d8bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0d0b373e2ce21dddf9cd8bec1ad8d8bc"}, "created_at": 1662493241.806533, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTE_AMOUNT'\n            and\n            relation_column_type not in ('FLOAT', 'NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_votes_VOTE_AMOUNT", "column_name": "VOTE_AMOUNT", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes_VOTE_ACTION.24dfa35add": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_ACTION", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes_VOTE_ACTION"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes_VOTE_ACTION.24dfa35add", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes_VOTE_ACTION.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes_VOTE_ACTION", "alias": "velodrome_votes_VOTE_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes_VOTE_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.811096, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere VOTE_ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes_VOTE_ACTION", "column_name": "VOTE_ACTION", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_ACTION__STRING__VARCHAR.8e15743fa5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d05293f728e74085cd301034ba71849\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "VOTE_ACTION", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3d05293f728e74085cd301034ba71849", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_ACTION__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_ACTION__STRING__VARCHAR.8e15743fa5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3d05293f728e74085cd301034ba71849.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_ACTION__STRING__VARCHAR", "alias": "velodrome_votes_VOTE_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_3d05293f728e74085cd301034ba71849.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3d05293f728e74085cd301034ba71849"}, "created_at": 1662493241.812748, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTE_ACTION'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_votes_VOTE_ACTION", "column_name": "VOTE_ACTION", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_votes__INSERTED_TIMESTAMP.0837416a25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_votes__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_votes__INSERTED_TIMESTAMP.0837416a25", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_votes__INSERTED_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "not_null_silver__velodrome_votes__INSERTED_TIMESTAMP", "alias": "velodrome_votes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/not_null_silver__velodrome_votes__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.817085, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_votes\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_votes", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes__INSERTED_TIMESTAMP__day__1.8b45a70e4f": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_2586befa877666b26e83356130568c85\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_2586befa877666b26e83356130568c85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes__INSERTED_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes__INSERTED_TIMESTAMP__day__1.8b45a70e4f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_2586befa877666b26e83356130568c85.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes__INSERTED_TIMESTAMP__day__1", "alias": "velodrome_votes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_row_va_2586befa877666b26e83356130568c85.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_2586befa877666b26e83356130568c85"}, "created_at": 1662493241.8197398, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_votes\n    where\n        -- to exclude erroneous future dates\n        cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_votes", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8bac0c2d50": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a84b0685a4cee16f9ed7a51d9f7cd0f9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a84b0685a4cee16f9ed7a51d9f7cd0f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8bac0c2d50", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_a84b0685a4cee16f9ed7a51d9f7cd0f9.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_votes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_expectations_expect_column_a84b0685a4cee16f9ed7a51d9f7cd0f9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a84b0685a4cee16f9ed7a51d9f7cd0f9"}, "created_at": 1662493241.826438, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_votes", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_votes__log_id.8be8eccea7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fc16c683580c465400229fcb25d11299\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver__velodrome_votes')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_votes"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fc16c683580c465400229fcb25d11299", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "velodrome", "dbt_utils_unique_combination_of_columns_silver__velodrome_votes__log_id"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_votes__log_id.8be8eccea7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_fc16c683580c465400229fcb25d11299.sql", "original_file_path": "models/velodrome/silver__velodrome_votes.yml", "name": "dbt_utils_unique_combination_of_columns_silver__velodrome_votes__log_id", "alias": "velodrome_votes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_votes.yml/dbt_utils_unique_combination_o_fc16c683580c465400229fcb25d11299.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_fc16c683580c465400229fcb25d11299"}, "created_at": 1662493241.830313, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from OPTIMISM_DEV.silver.velodrome_votes\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.velodrome_votes", "column_name": null, "file_key_name": "models.silver__velodrome_votes"}, "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_NUMBER.e8df9c6e4b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_NUMBER.e8df9c6e4b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_BLOCK_NUMBER.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_BLOCK_NUMBER", "alias": "velodrome_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.845353, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_NUMBER__NUMBER__FLOAT.46b48a749f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fbebb1928580a5fcde9ce172446fbb14\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fbebb1928580a5fcde9ce172446fbb14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_NUMBER__NUMBER__FLOAT.46b48a749f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_fbebb1928580a5fcde9ce172446fbb14.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "velodrome_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_fbebb1928580a5fcde9ce172446fbb14.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fbebb1928580a5fcde9ce172446fbb14"}, "created_at": 1662493241.84708, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_TIMESTAMP.e3e77a703d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_TIMESTAMP.e3e77a703d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_BLOCK_TIMESTAMP", "alias": "velodrome_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.852896, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps_BLOCK_TIMESTAMP__day__1.81893be36d": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0dcf9b5b494034d13eb41422a7067213\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0dcf9b5b494034d13eb41422a7067213", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps_BLOCK_TIMESTAMP__day__1.81893be36d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_0dcf9b5b494034d13eb41422a7067213.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps_BLOCK_TIMESTAMP__day__1", "alias": "velodrome_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_row_va_0dcf9b5b494034d13eb41422a7067213.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_0dcf9b5b494034d13eb41422a7067213"}, "created_at": 1662493241.855458, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_swaps\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0aefbd7419": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c9c6e6f97dd443e71fb4f7e214f1721\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c9c6e6f97dd443e71fb4f7e214f1721", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0aefbd7419", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_6c9c6e6f97dd443e71fb4f7e214f1721.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_6c9c6e6f97dd443e71fb4f7e214f1721.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6c9c6e6f97dd443e71fb4f7e214f1721"}, "created_at": 1662493241.8619351, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_TX_HASH.f9411778f6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_TX_HASH.f9411778f6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_TX_HASH.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_TX_HASH", "alias": "velodrome_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.866079, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TX_HASH__0_xX_0_9a_fA_F_.e02f06e3c5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c4e08675bfac5bcea183eee829bbb36a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c4e08675bfac5bcea183eee829bbb36a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TX_HASH__0_xX_0_9a_fA_F_.e02f06e3c5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c4e08675bfac5bcea183eee829bbb36a.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TX_HASH__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_c4e08675bfac5bcea183eee829bbb36a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c4e08675bfac5bcea183eee829bbb36a"}, "created_at": 1662493241.867711, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE.a4fd66528f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE.a4fd66528f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE", "alias": "velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.8736541, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS.927461b93a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS.927461b93a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS", "alias": "velodrome_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.875251, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c470cb8ae4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ec91222a6c034870513d39d53a983153\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ec91222a6c034870513d39d53a983153", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c470cb8ae4", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ec91222a6c034870513d39d53a983153.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_ec91222a6c034870513d39d53a983153.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ec91222a6c034870513d39d53a983153"}, "created_at": 1662493241.8772118, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_TO_ADDRESS.718a3d0724": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_ORIGIN_TO_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_TO_ADDRESS.718a3d0724", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_ORIGIN_TO_ADDRESS", "alias": "velodrome_swaps_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.88177, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d19844470c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ba9ec8dcc08cb9664cfaec835674ca33\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ba9ec8dcc08cb9664cfaec835674ca33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d19844470c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ba9ec8dcc08cb9664cfaec835674ca33.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_ba9ec8dcc08cb9664cfaec835674ca33.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ba9ec8dcc08cb9664cfaec835674ca33"}, "created_at": 1662493241.883391, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_CONTRACT_ADDRESS.9492333191": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_CONTRACT_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_CONTRACT_ADDRESS.9492333191", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_CONTRACT_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_CONTRACT_ADDRESS", "alias": "velodrome_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.88944, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.a31fdba461": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3c8c3a04c34b7c1473be68a9c6a09270\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3c8c3a04c34b7c1473be68a9c6a09270", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.a31fdba461", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3c8c3a04c34b7c1473be68a9c6a09270.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_3c8c3a04c34b7c1473be68a9c6a09270.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3c8c3a04c34b7c1473be68a9c6a09270"}, "created_at": 1662493241.891378, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_POOL_ADDRESS.b7f8a1f0df": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_POOL_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_POOL_ADDRESS.b7f8a1f0df", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_POOL_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_POOL_ADDRESS", "alias": "velodrome_swaps_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.89616, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.36f7e2cdb0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f22386c52b4df711f485716cb654659c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f22386c52b4df711f485716cb654659c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.36f7e2cdb0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_f22386c52b4df711f485716cb654659c.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_f22386c52b4df711f485716cb654659c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f22386c52b4df711f485716cb654659c"}, "created_at": 1662493241.89771, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_EVENT_INDEX.ded8be8ef9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_EVENT_INDEX"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_EVENT_INDEX.ded8be8ef9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_EVENT_INDEX.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_EVENT_INDEX", "alias": "velodrome_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.902678, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_EVENT_INDEX__NUMBER__FLOAT.33a5411d6d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52445338d7a8bc85f0add91a4c949eab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_52445338d7a8bc85f0add91a4c949eab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_EVENT_INDEX__NUMBER__FLOAT.33a5411d6d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_52445338d7a8bc85f0add91a4c949eab.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_EVENT_INDEX__NUMBER__FLOAT", "alias": "velodrome_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_52445338d7a8bc85f0add91a4c949eab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_52445338d7a8bc85f0add91a4c949eab"}, "created_at": 1662493241.905169, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_POOL_NAME.dbfc07b184": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_POOL_NAME"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_POOL_NAME.dbfc07b184", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_POOL_NAME.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_POOL_NAME", "alias": "velodrome_swaps_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493241.9107652, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_POOL_NAME__STRING__VARCHAR.8a3bdf2656": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2d9cc25fbb40bc96b4e88442e73b340e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2d9cc25fbb40bc96b4e88442e73b340e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_POOL_NAME__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_POOL_NAME__STRING__VARCHAR.8a3bdf2656", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_2d9cc25fbb40bc96b4e88442e73b340e.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_POOL_NAME__STRING__VARCHAR", "alias": "velodrome_swaps_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_2d9cc25fbb40bc96b4e88442e73b340e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2d9cc25fbb40bc96b4e88442e73b340e"}, "created_at": 1662493241.9123058, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_IN.78c1f72d43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_AMOUNT_IN"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_IN.78c1f72d43", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_AMOUNT_IN.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_AMOUNT_IN", "alias": "velodrome_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_AMOUNT_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.9167411, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere AMOUNT_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_AMOUNT_IN", "column_name": "AMOUNT_IN", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_IN__FLOAT__NUMBER.bb6566c5da": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ff97a7a78fb8afe38ea11ec1e01f94b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "NUMBER"], "column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ff97a7a78fb8afe38ea11ec1e01f94b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_IN__FLOAT__NUMBER"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_IN__FLOAT__NUMBER.bb6566c5da", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_7ff97a7a78fb8afe38ea11ec1e01f94b.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_IN__FLOAT__NUMBER", "alias": "velodrome_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_7ff97a7a78fb8afe38ea11ec1e01f94b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7ff97a7a78fb8afe38ea11ec1e01f94b"}, "created_at": 1662493241.918498, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN'\n            and\n            relation_column_type not in ('FLOAT', 'NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_AMOUNT_IN", "column_name": "AMOUNT_IN", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_OUT.0ef7186ec5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_AMOUNT_OUT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_OUT.0ef7186ec5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_AMOUNT_OUT.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_AMOUNT_OUT", "alias": "velodrome_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_AMOUNT_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.9244218, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere AMOUNT_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_AMOUNT_OUT", "column_name": "AMOUNT_OUT", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_OUT__FLOAT__NUMBER.a6be3a5b60": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_df97ed3411c46c78199334df82c91460\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "NUMBER"], "column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_df97ed3411c46c78199334df82c91460", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_OUT__FLOAT__NUMBER"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_OUT__FLOAT__NUMBER.a6be3a5b60", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_df97ed3411c46c78199334df82c91460.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_OUT__FLOAT__NUMBER", "alias": "velodrome_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_df97ed3411c46c78199334df82c91460.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_df97ed3411c46c78199334df82c91460"}, "created_at": 1662493241.926952, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT'\n            and\n            relation_column_type not in ('FLOAT', 'NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_AMOUNT_OUT", "column_name": "AMOUNT_OUT", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_SENDER_ADDRESS.79cfd325b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_SENDER_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_SENDER_ADDRESS.79cfd325b1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_SENDER_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_SENDER_ADDRESS", "alias": "velodrome_swaps_SENDER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_SENDER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.931382, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere SENDER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_SENDER_ADDRESS", "column_name": "SENDER_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_SENDER_ADDRESS__0_xX_0_9a_fA_F_.6448e66b13": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_af39d6138cbf1358421c1a706882c090\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SENDER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_af39d6138cbf1358421c1a706882c090", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_SENDER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_SENDER_ADDRESS__0_xX_0_9a_fA_F_.6448e66b13", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_af39d6138cbf1358421c1a706882c090.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_SENDER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_SENDER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_af39d6138cbf1358421c1a706882c090.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_af39d6138cbf1358421c1a706882c090"}, "created_at": 1662493241.933245, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SENDER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_SENDER_ADDRESS", "column_name": "SENDER_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_TO_ADDRESS.558be35c08": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_TO_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_TO_ADDRESS.558be35c08", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_TO_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_TO_ADDRESS", "alias": "velodrome_swaps_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.938816, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TO_ADDRESS__0_xX_0_9a_fA_F_.926fec60ca": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7f2c5810434a61e0605505bd58d26e52\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7f2c5810434a61e0605505bd58d26e52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TO_ADDRESS__0_xX_0_9a_fA_F_.926fec60ca", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_7f2c5810434a61e0605505bd58d26e52.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_7f2c5810434a61e0605505bd58d26e52.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7f2c5810434a61e0605505bd58d26e52"}, "created_at": 1662493241.941272, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_PLATFORM.faaf662fa3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_PLATFORM"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_PLATFORM.faaf662fa3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_PLATFORM.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_PLATFORM", "alias": "velodrome_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_PLATFORM.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493241.9464629, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere PLATFORM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_PLATFORM", "column_name": "PLATFORM", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_PLATFORM__STRING__VARCHAR.ca106130da": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ba03e9cdbc44e9200773f7d3848fe2ab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ba03e9cdbc44e9200773f7d3848fe2ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_PLATFORM__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_PLATFORM__STRING__VARCHAR.ca106130da", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ba03e9cdbc44e9200773f7d3848fe2ab.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_PLATFORM__STRING__VARCHAR", "alias": "velodrome_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_ba03e9cdbc44e9200773f7d3848fe2ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ba03e9cdbc44e9200773f7d3848fe2ab"}, "created_at": 1662493241.9480152, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_PLATFORM", "column_name": "PLATFORM", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_IN.da702ffd72": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL_IN", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_SYMBOL_IN"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_IN.da702ffd72", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_SYMBOL_IN.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_SYMBOL_IN", "alias": "velodrome_swaps_SYMBOL_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_SYMBOL_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493241.954773, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere SYMBOL_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_SYMBOL_IN", "column_name": "SYMBOL_IN", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_IN__STRING__VARCHAR.10f3f47599": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_31ad1f5ff723bf090c5a5a6d4a32fb18\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_IN", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_31ad1f5ff723bf090c5a5a6d4a32fb18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_IN__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_IN__STRING__VARCHAR.10f3f47599", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_31ad1f5ff723bf090c5a5a6d4a32fb18.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_IN__STRING__VARCHAR", "alias": "velodrome_swaps_SYMBOL_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_31ad1f5ff723bf090c5a5a6d4a32fb18.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_31ad1f5ff723bf090c5a5a6d4a32fb18"}, "created_at": 1662493241.95701, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_IN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_SYMBOL_IN", "column_name": "SYMBOL_IN", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_OUT.f1b9a3cc2c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL_OUT", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_SYMBOL_OUT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_OUT.f1b9a3cc2c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_SYMBOL_OUT.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_SYMBOL_OUT", "alias": "velodrome_swaps_SYMBOL_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_SYMBOL_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493241.962986, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere SYMBOL_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_SYMBOL_OUT", "column_name": "SYMBOL_OUT", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_OUT__STRING__VARCHAR.2f1b3dc3ae": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c8f97e2135ac48487f70f267dad6ca0c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_OUT", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c8f97e2135ac48487f70f267dad6ca0c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_OUT__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_OUT__STRING__VARCHAR.2f1b3dc3ae", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c8f97e2135ac48487f70f267dad6ca0c.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_OUT__STRING__VARCHAR", "alias": "velodrome_swaps_SYMBOL_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_c8f97e2135ac48487f70f267dad6ca0c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c8f97e2135ac48487f70f267dad6ca0c"}, "created_at": 1662493241.9645681, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_OUT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_SYMBOL_OUT", "column_name": "SYMBOL_OUT", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_IN.9fc512660f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DECIMALS_IN", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_DECIMALS_IN"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_IN.9fc512660f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_DECIMALS_IN.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_DECIMALS_IN", "alias": "velodrome_swaps_DECIMALS_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_DECIMALS_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493241.9715042, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere DECIMALS_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_DECIMALS_IN", "column_name": "DECIMALS_IN", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_IN__NUMBER__FLOAT.3dc13b2012": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a8489e290a76d13f9429a7fe751199bb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DECIMALS_IN", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a8489e290a76d13f9429a7fe751199bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_IN__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_IN__NUMBER__FLOAT.3dc13b2012", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_a8489e290a76d13f9429a7fe751199bb.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_IN__NUMBER__FLOAT", "alias": "velodrome_swaps_DECIMALS_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_a8489e290a76d13f9429a7fe751199bb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a8489e290a76d13f9429a7fe751199bb"}, "created_at": 1662493241.9737191, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DECIMALS_IN'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_DECIMALS_IN", "column_name": "DECIMALS_IN", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_OUT.060ebf71e5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DECIMALS_OUT", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_DECIMALS_OUT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_OUT.060ebf71e5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_DECIMALS_OUT.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_DECIMALS_OUT", "alias": "velodrome_swaps_DECIMALS_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_DECIMALS_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493241.9787269, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere DECIMALS_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_DECIMALS_OUT", "column_name": "DECIMALS_OUT", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_OUT__NUMBER__FLOAT.1a1ac75514": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c3eacbbd935e67699811f09ccbeb78a3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DECIMALS_OUT", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c3eacbbd935e67699811f09ccbeb78a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_OUT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_OUT__NUMBER__FLOAT.1a1ac75514", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c3eacbbd935e67699811f09ccbeb78a3.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_OUT__NUMBER__FLOAT", "alias": "velodrome_swaps_DECIMALS_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_c3eacbbd935e67699811f09ccbeb78a3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c3eacbbd935e67699811f09ccbeb78a3"}, "created_at": 1662493241.980507, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DECIMALS_OUT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_DECIMALS_OUT", "column_name": "DECIMALS_OUT", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN0_SYMBOL.847de78afa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_TOKEN0_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN0_SYMBOL.847de78afa", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_TOKEN0_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_TOKEN0_SYMBOL", "alias": "velodrome_swaps_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_TOKEN0_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493241.9865549, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere TOKEN0_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN0_SYMBOL__STRING__VARCHAR.fe785554ed": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5f017cc69c4e5e4a43291c98e297ed53\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5f017cc69c4e5e4a43291c98e297ed53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN0_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN0_SYMBOL__STRING__VARCHAR.fe785554ed", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5f017cc69c4e5e4a43291c98e297ed53.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN0_SYMBOL__STRING__VARCHAR", "alias": "velodrome_swaps_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_5f017cc69c4e5e4a43291c98e297ed53.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5f017cc69c4e5e4a43291c98e297ed53"}, "created_at": 1662493241.989262, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN0_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN1_SYMBOL.739ac5c900": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_TOKEN1_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN1_SYMBOL.739ac5c900", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_TOKEN1_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_TOKEN1_SYMBOL", "alias": "velodrome_swaps_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_TOKEN1_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493241.995681, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere TOKEN1_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN1_SYMBOL__STRING__VARCHAR.d5652f71d9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4c2c0f4cabf4a1c5a9a6841e97d4415f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4c2c0f4cabf4a1c5a9a6841e97d4415f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN1_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN1_SYMBOL__STRING__VARCHAR.d5652f71d9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_4c2c0f4cabf4a1c5a9a6841e97d4415f.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN1_SYMBOL__STRING__VARCHAR", "alias": "velodrome_swaps_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_4c2c0f4cabf4a1c5a9a6841e97d4415f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4c2c0f4cabf4a1c5a9a6841e97d4415f"}, "created_at": 1662493241.9972448, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN1_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_IN.e56286904c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ADDRESS_IN", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_TOKEN_ADDRESS_IN"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_IN.e56286904c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_TOKEN_ADDRESS_IN.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_TOKEN_ADDRESS_IN", "alias": "velodrome_swaps_TOKEN_ADDRESS_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_TOKEN_ADDRESS_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.003337, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere TOKEN_ADDRESS_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_TOKEN_ADDRESS_IN", "column_name": "TOKEN_ADDRESS_IN", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_IN__0_xX_0_9a_fA_F_.b221684840": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8fea926f15b286f0457c6ec0e1f3e043\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_ADDRESS_IN", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8fea926f15b286f0457c6ec0e1f3e043", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_IN__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_IN__0_xX_0_9a_fA_F_.b221684840", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_8fea926f15b286f0457c6ec0e1f3e043.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_IN__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_TOKEN_ADDRESS_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_8fea926f15b286f0457c6ec0e1f3e043.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8fea926f15b286f0457c6ec0e1f3e043"}, "created_at": 1662493242.005544, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_ADDRESS_IN, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_TOKEN_ADDRESS_IN", "column_name": "TOKEN_ADDRESS_IN", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_OUT.924b20aec3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ADDRESS_OUT", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_TOKEN_ADDRESS_OUT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_OUT.924b20aec3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_TOKEN_ADDRESS_OUT.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_TOKEN_ADDRESS_OUT", "alias": "velodrome_swaps_TOKEN_ADDRESS_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_TOKEN_ADDRESS_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.011282, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere TOKEN_ADDRESS_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_TOKEN_ADDRESS_OUT", "column_name": "TOKEN_ADDRESS_OUT", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_OUT__0_xX_0_9a_fA_F_.f6e8e74317": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ffdd384bfd4c2d7d9a3b16cf41e19f40\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_ADDRESS_OUT", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ffdd384bfd4c2d7d9a3b16cf41e19f40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_OUT__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_OUT__0_xX_0_9a_fA_F_.f6e8e74317", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ffdd384bfd4c2d7d9a3b16cf41e19f40.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_OUT__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_TOKEN_ADDRESS_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_ffdd384bfd4c2d7d9a3b16cf41e19f40.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ffdd384bfd4c2d7d9a3b16cf41e19f40"}, "created_at": 1662493242.0128021, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_ADDRESS_OUT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_TOKEN_ADDRESS_OUT", "column_name": "TOKEN_ADDRESS_OUT", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE.c114b84530": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_FEE", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_LP_FEE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE.c114b84530", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_LP_FEE.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_LP_FEE", "alias": "velodrome_swaps_LP_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_LP_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.017656, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere LP_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_LP_FEE", "column_name": "LP_FEE", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE__NUMBER__FLOAT.ee486d300f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c2477964290e5d4c92e33e9567fdd617\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "LP_FEE", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c2477964290e5d4c92e33e9567fdd617", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE__NUMBER__FLOAT.ee486d300f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c2477964290e5d4c92e33e9567fdd617.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE__NUMBER__FLOAT", "alias": "velodrome_swaps_LP_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_c2477964290e5d4c92e33e9567fdd617.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c2477964290e5d4c92e33e9567fdd617"}, "created_at": 1662493242.020342, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LP_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_LP_FEE", "column_name": "LP_FEE", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE_SYMBOL__STRING__VARCHAR.0d643a6936": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06dedf8f4b08f3c83d3d6f69a7c563d1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LP_FEE_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06dedf8f4b08f3c83d3d6f69a7c563d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE_SYMBOL__STRING__VARCHAR.0d643a6936", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_06dedf8f4b08f3c83d3d6f69a7c563d1.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE_SYMBOL__STRING__VARCHAR", "alias": "velodrome_swaps_LP_FEE_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_06dedf8f4b08f3c83d3d6f69a7c563d1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_06dedf8f4b08f3c83d3d6f69a7c563d1"}, "created_at": 1662493242.0256221, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LP_FEE_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps_LP_FEE_SYMBOL", "column_name": "LP_FEE_SYMBOL", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS.f0080516be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"LP_FEE <> 0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_FEE_TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "LP_FEE <> 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS.f0080516be", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS", "alias": "velodrome_swaps_LP_FEE_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "LP_FEE <> 0"}, "created_at": 1662493242.0307682, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.velodrome_swaps where LP_FEE <> 0) dbt_subquery\nwhere LP_FEE_TOKEN_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps_LP_FEE_TOKEN_ADDRESS", "column_name": "LP_FEE_TOKEN_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.bfd23ef096": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_218195b6eab8eb8f131eb67782d02d4c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "LP_FEE_TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_218195b6eab8eb8f131eb67782d02d4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.bfd23ef096", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_218195b6eab8eb8f131eb67782d02d4c.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_swaps_LP_FEE_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_218195b6eab8eb8f131eb67782d02d4c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_218195b6eab8eb8f131eb67782d02d4c"}, "created_at": 1662493242.032714, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(LP_FEE_TOKEN_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_swaps_LP_FEE_TOKEN_ADDRESS", "column_name": "LP_FEE_TOKEN_ADDRESS", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_swaps__INSERTED_TIMESTAMP.18fef846e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_swaps__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_swaps__INSERTED_TIMESTAMP.18fef846e1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_swaps__INSERTED_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "not_null_silver__velodrome_swaps__INSERTED_TIMESTAMP", "alias": "velodrome_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/not_null_silver__velodrome_swaps__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.038769, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_swaps\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_swaps", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps__INSERTED_TIMESTAMP__day__1.0a1fcbc4be": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9bd8fa1d010ba9588aa45a78b2ddc942\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9bd8fa1d010ba9588aa45a78b2ddc942", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps__INSERTED_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps__INSERTED_TIMESTAMP__day__1.0a1fcbc4be", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_9bd8fa1d010ba9588aa45a78b2ddc942.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps__INSERTED_TIMESTAMP__day__1", "alias": "velodrome_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_row_va_9bd8fa1d010ba9588aa45a78b2ddc942.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_9bd8fa1d010ba9588aa45a78b2ddc942"}, "created_at": 1662493242.040998, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_swaps\n    where\n        -- to exclude erroneous future dates\n        cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_swaps", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3a0f72f5bb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_35bba206f79208451c5781b522e4d8cb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_35bba206f79208451c5781b522e4d8cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3a0f72f5bb", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_35bba206f79208451c5781b522e4d8cb.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_expectations_expect_column_35bba206f79208451c5781b522e4d8cb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_35bba206f79208451c5781b522e4d8cb"}, "created_at": 1662493242.047282, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS_OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_FEE_TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_swaps", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_swaps__log_id.9690b8bd9d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_120354d204ae99a8691896822f1bc4db\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver__velodrome_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_swaps"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_120354d204ae99a8691896822f1bc4db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "velodrome", "dbt_utils_unique_combination_of_columns_silver__velodrome_swaps__log_id"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_swaps__log_id.9690b8bd9d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_120354d204ae99a8691896822f1bc4db.sql", "original_file_path": "models/velodrome/silver__velodrome_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_silver__velodrome_swaps__log_id", "alias": "velodrome_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_swaps.yml/dbt_utils_unique_combination_o_120354d204ae99a8691896822f1bc4db.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_120354d204ae99a8691896822f1bc4db"}, "created_at": 1662493242.052335, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from OPTIMISM_DEV.silver.velodrome_swaps\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.velodrome_swaps", "column_name": null, "file_key_name": "models.silver__velodrome_swaps"}, "test.optimism_models.not_null_silver__velodrome_pools_POOL_ADDRESS.b22263023f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools_POOL_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools_POOL_ADDRESS.b22263023f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools_POOL_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools_POOL_ADDRESS", "alias": "velodrome_pools_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.0627022, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_POOL_ADDRESS__0_xX_0_9a_fA_F_.a6f5b5b5ac": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d708fa665fc39c945cee2b6c506fefed\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d708fa665fc39c945cee2b6c506fefed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_POOL_ADDRESS__0_xX_0_9a_fA_F_.a6f5b5b5ac", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_d708fa665fc39c945cee2b6c506fefed.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_pools_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_d708fa665fc39c945cee2b6c506fefed.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d708fa665fc39c945cee2b6c506fefed"}, "created_at": 1662493242.064362, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_pools\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_pools_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_pools_POOL_NAME.1464154d9c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">5\",error_if=\">10\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": ">10"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools_POOL_NAME"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools_POOL_NAME.1464154d9c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools_POOL_NAME.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools_POOL_NAME", "alias": "velodrome_pools_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">5", "error_if": ">10"}, "created_at": 1662493242.07072, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_NAME__STRING__VARCHAR.9f0deccdb3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c27f384b80c871d5c90218d719414274\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c27f384b80c871d5c90218d719414274", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_NAME__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_NAME__STRING__VARCHAR.9f0deccdb3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c27f384b80c871d5c90218d719414274.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_NAME__STRING__VARCHAR", "alias": "velodrome_pools_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_c27f384b80c871d5c90218d719414274.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c27f384b80c871d5c90218d719414274"}, "created_at": 1662493242.072681, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_BLOCK' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_pools_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_pools_POOL_TYPE.27d8a09174": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools_POOL_TYPE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools_POOL_TYPE.27d8a09174", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools_POOL_TYPE.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools_POOL_TYPE", "alias": "velodrome_pools_POOL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools_POOL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.0773299, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere POOL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools_POOL_TYPE", "column_name": "POOL_TYPE", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_TYPE__STRING__VARCHAR.ef989feef8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5506eb0953e1e884fc823ceab17dc6ba\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "POOL_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5506eb0953e1e884fc823ceab17dc6ba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_TYPE__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_TYPE__STRING__VARCHAR.ef989feef8", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5506eb0953e1e884fc823ceab17dc6ba.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_TYPE__STRING__VARCHAR", "alias": "velodrome_pools_POOL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_5506eb0953e1e884fc823ceab17dc6ba.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5506eb0953e1e884fc823ceab17dc6ba"}, "created_at": 1662493242.0789518, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_BLOCK' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_pools_POOL_TYPE", "column_name": "POOL_TYPE", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_ADDRESS.a068a4c7ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools_TOKEN0_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_ADDRESS.a068a4c7ed", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools_TOKEN0_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools_TOKEN0_ADDRESS", "alias": "velodrome_pools_TOKEN0_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools_TOKEN0_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.0831869, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere TOKEN0_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools_TOKEN0_ADDRESS", "column_name": "TOKEN0_ADDRESS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.b2b7cfc620": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_79e3c22db52446ac6858a86666a7a4c8\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN0_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_79e3c22db52446ac6858a86666a7a4c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.b2b7cfc620", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_79e3c22db52446ac6858a86666a7a4c8.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_pools_TOKEN0_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_79e3c22db52446ac6858a86666a7a4c8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_79e3c22db52446ac6858a86666a7a4c8"}, "created_at": 1662493242.0851939, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN0_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_pools\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_pools_TOKEN0_ADDRESS", "column_name": "TOKEN0_ADDRESS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_ADDRESS.073866a28b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools_TOKEN1_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_ADDRESS.073866a28b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools_TOKEN1_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools_TOKEN1_ADDRESS", "alias": "velodrome_pools_TOKEN1_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools_TOKEN1_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.091548, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere TOKEN1_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools_TOKEN1_ADDRESS", "column_name": "TOKEN1_ADDRESS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.2d505d5f45": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a612a4edde7a3ed389931e5734111b2\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN1_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a612a4edde7a3ed389931e5734111b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.2d505d5f45", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_9a612a4edde7a3ed389931e5734111b2.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_pools_TOKEN1_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_9a612a4edde7a3ed389931e5734111b2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a612a4edde7a3ed389931e5734111b2"}, "created_at": 1662493242.093539, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN1_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_pools\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_pools_TOKEN1_ADDRESS", "column_name": "TOKEN1_ADDRESS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_SYMBOL.a9b216cc08": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">5\",error_if=\">10\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": ">10"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools_TOKEN0_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_SYMBOL.a9b216cc08", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools_TOKEN0_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools_TOKEN0_SYMBOL", "alias": "velodrome_pools_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools_TOKEN0_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">5", "error_if": ">10"}, "created_at": 1662493242.098729, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere TOKEN0_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_SYMBOL__STRING__VARCHAR.479c7ce2c3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a90b0c933af237f4a0d0e42cc2d4c294\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a90b0c933af237f4a0d0e42cc2d4c294", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_SYMBOL__STRING__VARCHAR.479c7ce2c3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_a90b0c933af237f4a0d0e42cc2d4c294.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_SYMBOL__STRING__VARCHAR", "alias": "velodrome_pools_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_a90b0c933af237f4a0d0e42cc2d4c294.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a90b0c933af237f4a0d0e42cc2d4c294"}, "created_at": 1662493242.1007302, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_BLOCK' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN0_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_pools_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_SYMBOL.67a2956e58": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">5\",error_if=\">10\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": ">10"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools_TOKEN1_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_SYMBOL.67a2956e58", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools_TOKEN1_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools_TOKEN1_SYMBOL", "alias": "velodrome_pools_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools_TOKEN1_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">5", "error_if": ">10"}, "created_at": 1662493242.107711, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere TOKEN1_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_SYMBOL__STRING__VARCHAR.cf92832817": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ebf093b6580836bf4e671f70f7d1eedf\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ebf093b6580836bf4e671f70f7d1eedf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_SYMBOL__STRING__VARCHAR.cf92832817", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ebf093b6580836bf4e671f70f7d1eedf.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_SYMBOL__STRING__VARCHAR", "alias": "velodrome_pools_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_ebf093b6580836bf4e671f70f7d1eedf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ebf093b6580836bf4e671f70f7d1eedf"}, "created_at": 1662493242.109289, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_BLOCK' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN1_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_pools_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_DECIMALS.87a6bcda86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">5\",error_if=\">10\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_DECIMALS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": ">10"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools_TOKEN1_DECIMALS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_DECIMALS.87a6bcda86", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools_TOKEN1_DECIMALS.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools_TOKEN1_DECIMALS", "alias": "velodrome_pools_TOKEN1_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools_TOKEN1_DECIMALS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">5", "error_if": ">10"}, "created_at": 1662493242.114344, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere TOKEN1_DECIMALS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools_TOKEN1_DECIMALS", "column_name": "TOKEN1_DECIMALS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_DECIMALS__NUMBER__FLOAT.45542d1c45": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dc1f64ff604468990958720d35d6de6a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOKEN1_DECIMALS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc1f64ff604468990958720d35d6de6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_DECIMALS__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_DECIMALS__NUMBER__FLOAT.45542d1c45", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_dc1f64ff604468990958720d35d6de6a.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_DECIMALS__NUMBER__FLOAT", "alias": "velodrome_pools_TOKEN1_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_dc1f64ff604468990958720d35d6de6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dc1f64ff604468990958720d35d6de6a"}, "created_at": 1662493242.1159308, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_BLOCK' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN1_DECIMALS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_pools_TOKEN1_DECIMALS", "column_name": "TOKEN1_DECIMALS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_DECIMALS.122edf1b2e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">5\",error_if=\">10\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_DECIMALS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": ">10"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools_TOKEN0_DECIMALS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_DECIMALS.122edf1b2e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools_TOKEN0_DECIMALS.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools_TOKEN0_DECIMALS", "alias": "velodrome_pools_TOKEN0_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools_TOKEN0_DECIMALS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">5", "error_if": ">10"}, "created_at": 1662493242.1235259, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere TOKEN0_DECIMALS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools_TOKEN0_DECIMALS", "column_name": "TOKEN0_DECIMALS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_DECIMALS__NUMBER__FLOAT.a90243ee3a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ed1eec48f73091d71574859bec32181\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOKEN0_DECIMALS", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ed1eec48f73091d71574859bec32181", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_DECIMALS__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_DECIMALS__NUMBER__FLOAT.a90243ee3a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_7ed1eec48f73091d71574859bec32181.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_DECIMALS__NUMBER__FLOAT", "alias": "velodrome_pools_TOKEN0_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_7ed1eec48f73091d71574859bec32181.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7ed1eec48f73091d71574859bec32181"}, "created_at": 1662493242.12589, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_BLOCK' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN0_DECIMALS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_pools_TOKEN0_DECIMALS", "column_name": "TOKEN0_DECIMALS", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_pools__INSERTED_TIMESTAMP.3c2661f0f6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_pools__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_pools__INSERTED_TIMESTAMP.3c2661f0f6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_pools__INSERTED_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "not_null_silver__velodrome_pools__INSERTED_TIMESTAMP", "alias": "velodrome_pools", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/not_null_silver__velodrome_pools__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.130862, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_pools\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_pools", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a3b1910422": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6be7e14e6f23c6c04819f953f20271df\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6be7e14e6f23c6c04819f953f20271df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a3b1910422", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_6be7e14e6f23c6c04819f953f20271df.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_pools", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_expectations_expect_column_6be7e14e6f23c6c04819f953f20271df.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6be7e14e6f23c6c04819f953f20271df"}, "created_at": 1662493242.132684, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_BLOCK' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_pools", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_pools_POOL_ADDRESS.3673c0019a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ce703a1354b23751476e99055f21c038\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["POOL_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__velodrome_pools')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_pools"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ce703a1354b23751476e99055f21c038", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "velodrome", "dbt_utils_unique_combination_of_columns_silver__velodrome_pools_POOL_ADDRESS"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_pools_POOL_ADDRESS.3673c0019a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_ce703a1354b23751476e99055f21c038.sql", "original_file_path": "models/velodrome/silver__velodrome_pools.yml", "name": "dbt_utils_unique_combination_of_columns_silver__velodrome_pools_POOL_ADDRESS", "alias": "velodrome_pools_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_pools.yml/dbt_utils_unique_combination_o_ce703a1354b23751476e99055f21c038.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_ce703a1354b23751476e99055f21c038"}, "created_at": 1662493242.1388118, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        POOL_ADDRESS\n    from OPTIMISM_DEV.silver.velodrome_pools\n    group by POOL_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.velodrome_pools_POOL_ADDRESS", "column_name": null, "file_key_name": "models.silver__velodrome_pools"}, "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_NUMBER.db66882206": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_NUMBER.db66882206", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_BLOCK_NUMBER.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_BLOCK_NUMBER", "alias": "velodrome_gauges_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.15077, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_NUMBER__NUMBER__FLOAT.075f69b847": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8dd1e33390d53fa4d2ac78707bada8cf\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8dd1e33390d53fa4d2ac78707bada8cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_NUMBER__NUMBER__FLOAT.075f69b847", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_8dd1e33390d53fa4d2ac78707bada8cf.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "velodrome_gauges_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_8dd1e33390d53fa4d2ac78707bada8cf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8dd1e33390d53fa4d2ac78707bada8cf"}, "created_at": 1662493242.153415, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_gauges_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_TIMESTAMP.c0310ba7e8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_TIMESTAMP.c0310ba7e8", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_BLOCK_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_BLOCK_TIMESTAMP", "alias": "velodrome_gauges_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.159263, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d04a8b81e6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c7c015c2288b2734d59f91023d2e7d58\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c7c015c2288b2734d59f91023d2e7d58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d04a8b81e6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c7c015c2288b2734d59f91023d2e7d58.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_gauges_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_c7c015c2288b2734d59f91023d2e7d58.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c7c015c2288b2734d59f91023d2e7d58"}, "created_at": 1662493242.1608598, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_gauges_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_TX_HASH.e188fd7277": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_TX_HASH.e188fd7277", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_TX_HASH.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_TX_HASH", "alias": "velodrome_gauges_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.164929, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TX_HASH__0_xX_0_9a_fA_F_.da4b324b57": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d923460e881c6edabd643608d58dc9bd\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d923460e881c6edabd643608d58dc9bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TX_HASH__0_xX_0_9a_fA_F_.da4b324b57", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_d923460e881c6edabd643608d58dc9bd.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TX_HASH__0_xX_0_9a_fA_F_", "alias": "velodrome_gauges_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_d923460e881c6edabd643608d58dc9bd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d923460e881c6edabd643608d58dc9bd"}, "created_at": 1662493242.16657, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_gauges_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_EVENT_INDEX.847db96e41": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_EVENT_INDEX"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_EVENT_INDEX.847db96e41", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_EVENT_INDEX.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_EVENT_INDEX", "alias": "velodrome_gauges_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.172631, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_EVENT_INDEX__NUMBER__FLOAT.afee298092": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_051cef320df46110104c5f08c995f026\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_051cef320df46110104c5f08c995f026", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_EVENT_INDEX__NUMBER__FLOAT.afee298092", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_051cef320df46110104c5f08c995f026.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_EVENT_INDEX__NUMBER__FLOAT", "alias": "velodrome_gauges_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_051cef320df46110104c5f08c995f026.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_051cef320df46110104c5f08c995f026"}, "created_at": 1662493242.174166, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_gauges_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_CONTRACT_ADDRESS.d7c0ffcf81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_CONTRACT_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_CONTRACT_ADDRESS.d7c0ffcf81", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_CONTRACT_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_CONTRACT_ADDRESS", "alias": "velodrome_gauges_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.1785622, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.dc13300f69": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_919a18e076d23266dfc73166388d2d82\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_919a18e076d23266dfc73166388d2d82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.dc13300f69", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_919a18e076d23266dfc73166388d2d82.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_gauges_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_919a18e076d23266dfc73166388d2d82.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_919a18e076d23266dfc73166388d2d82"}, "created_at": 1662493242.18011, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_gauges_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_GAUGE_ADDRESS.c3c33a8921": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAUGE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_GAUGE_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_GAUGE_ADDRESS.c3c33a8921", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_GAUGE_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_GAUGE_ADDRESS", "alias": "velodrome_gauges_GAUGE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_GAUGE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.1847339, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere GAUGE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_GAUGE_ADDRESS", "column_name": "GAUGE_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.28282e04c0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bae223fded21c2742e7436eda5347874\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "GAUGE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bae223fded21c2742e7436eda5347874", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_GAUGE_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.28282e04c0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_bae223fded21c2742e7436eda5347874.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_GAUGE_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_gauges_GAUGE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_bae223fded21c2742e7436eda5347874.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bae223fded21c2742e7436eda5347874"}, "created_at": 1662493242.187867, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(GAUGE_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_gauges_GAUGE_ADDRESS", "column_name": "GAUGE_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS.b10eb9d144": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTERNAL_BRIBE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS.b10eb9d144", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS", "alias": "velodrome_gauges_EXTERNAL_BRIBE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.193244, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere EXTERNAL_BRIBE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_EXTERNAL_BRIBE_ADDRESS", "column_name": "EXTERNAL_BRIBE_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.7f3467ff74": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_133000a1f56eafbaef34bedec847adb2\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "EXTERNAL_BRIBE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_133000a1f56eafbaef34bedec847adb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.7f3467ff74", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_133000a1f56eafbaef34bedec847adb2.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_gauges_EXTERNAL_BRIBE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_133000a1f56eafbaef34bedec847adb2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_133000a1f56eafbaef34bedec847adb2"}, "created_at": 1662493242.1951098, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(EXTERNAL_BRIBE_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_gauges_EXTERNAL_BRIBE_ADDRESS", "column_name": "EXTERNAL_BRIBE_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS.4f825859d9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTERNAL_BRIBE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS.4f825859d9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS", "alias": "velodrome_gauges_INTERNAL_BRIBE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.1994, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere INTERNAL_BRIBE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_INTERNAL_BRIBE_ADDRESS", "column_name": "INTERNAL_BRIBE_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.634c71699a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5051c6090f29880c9158cd13f88b9810\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "INTERNAL_BRIBE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5051c6090f29880c9158cd13f88b9810", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.634c71699a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5051c6090f29880c9158cd13f88b9810.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_gauges_INTERNAL_BRIBE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_5051c6090f29880c9158cd13f88b9810.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5051c6090f29880c9158cd13f88b9810"}, "created_at": 1662493242.20148, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(INTERNAL_BRIBE_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_gauges_INTERNAL_BRIBE_ADDRESS", "column_name": "INTERNAL_BRIBE_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_CREATOR_ADDRESS.94c9fafe0b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_CREATOR_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_CREATOR_ADDRESS.94c9fafe0b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_CREATOR_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_CREATOR_ADDRESS", "alias": "velodrome_gauges_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_CREATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.208626, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere CREATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_CREATOR_ADDRESS", "column_name": "CREATOR_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.dc68a13b64": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_715d31a83e90ae1b26e9724071006685\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_715d31a83e90ae1b26e9724071006685", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CREATOR_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.dc68a13b64", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_715d31a83e90ae1b26e9724071006685.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CREATOR_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_gauges_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_715d31a83e90ae1b26e9724071006685.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_715d31a83e90ae1b26e9724071006685"}, "created_at": 1662493242.210855, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CREATOR_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_gauges_CREATOR_ADDRESS", "column_name": "CREATOR_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_POOL_ADDRESS.62e1712c02": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_POOL_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_POOL_ADDRESS.62e1712c02", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_POOL_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_POOL_ADDRESS", "alias": "velodrome_gauges_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.215764, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_POOL_ADDRESS__0_xX_0_9a_fA_F_.d5d5aa33ba": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b3f251ed5358d094eb53ee389640f12f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b3f251ed5358d094eb53ee389640f12f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_POOL_ADDRESS__0_xX_0_9a_fA_F_.d5d5aa33ba", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_b3f251ed5358d094eb53ee389640f12f.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_gauges_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_b3f251ed5358d094eb53ee389640f12f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b3f251ed5358d094eb53ee389640f12f"}, "created_at": 1662493242.2173781, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_gauges_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_ADDRESS.dffed249fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_TOKEN0_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_ADDRESS.dffed249fe", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_TOKEN0_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_TOKEN0_ADDRESS", "alias": "velodrome_gauges_TOKEN0_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_TOKEN0_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.224004, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere TOKEN0_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_TOKEN0_ADDRESS", "column_name": "TOKEN0_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.ebc0a56334": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fa7350c7c73a8239e0b6819b1f8da112\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN0_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fa7350c7c73a8239e0b6819b1f8da112", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.ebc0a56334", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_fa7350c7c73a8239e0b6819b1f8da112.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_gauges_TOKEN0_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_fa7350c7c73a8239e0b6819b1f8da112.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fa7350c7c73a8239e0b6819b1f8da112"}, "created_at": 1662493242.2256231, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN0_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_gauges_TOKEN0_ADDRESS", "column_name": "TOKEN0_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_ADDRESS.ca236f2308": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_TOKEN1_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_ADDRESS.ca236f2308", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_TOKEN1_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_TOKEN1_ADDRESS", "alias": "velodrome_gauges_TOKEN1_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_TOKEN1_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.230104, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere TOKEN1_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_TOKEN1_ADDRESS", "column_name": "TOKEN1_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.d9319cb22a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_51fef1f249926471a04c069fa22aa563\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN1_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_51fef1f249926471a04c069fa22aa563", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.d9319cb22a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_51fef1f249926471a04c069fa22aa563.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_gauges_TOKEN1_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_51fef1f249926471a04c069fa22aa563.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_51fef1f249926471a04c069fa22aa563"}, "created_at": 1662493242.231835, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN1_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_gauges_TOKEN1_ADDRESS", "column_name": "TOKEN1_ADDRESS", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_SYMBOL.11b915fd71": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">5\",error_if=\">10\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": ">10"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_TOKEN0_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_SYMBOL.11b915fd71", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_TOKEN0_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_TOKEN0_SYMBOL", "alias": "velodrome_gauges_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_TOKEN0_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">5", "error_if": ">10"}, "created_at": 1662493242.238465, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere TOKEN0_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN0_SYMBOL__STRING__VARCHAR.c08774a1b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b3de15fe088d6e1da9e0802f7da2c65\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b3de15fe088d6e1da9e0802f7da2c65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN0_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN0_SYMBOL__STRING__VARCHAR.c08774a1b6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5b3de15fe088d6e1da9e0802f7da2c65.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN0_SYMBOL__STRING__VARCHAR", "alias": "velodrome_gauges_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_5b3de15fe088d6e1da9e0802f7da2c65.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5b3de15fe088d6e1da9e0802f7da2c65"}, "created_at": 1662493242.240661, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN0_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_gauges_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_SYMBOL.8f042bb9ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">5\",error_if=\">10\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": ">10"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_TOKEN1_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_SYMBOL.8f042bb9ad", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_TOKEN1_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_TOKEN1_SYMBOL", "alias": "velodrome_gauges_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_TOKEN1_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">5", "error_if": ">10"}, "created_at": 1662493242.245909, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere TOKEN1_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN1_SYMBOL__STRING__VARCHAR.c4793d4319": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1c1b53540fbcbee85f197d33df0f1387\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1c1b53540fbcbee85f197d33df0f1387", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN1_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN1_SYMBOL__STRING__VARCHAR.c4793d4319", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_1c1b53540fbcbee85f197d33df0f1387.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN1_SYMBOL__STRING__VARCHAR", "alias": "velodrome_gauges_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_1c1b53540fbcbee85f197d33df0f1387.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1c1b53540fbcbee85f197d33df0f1387"}, "created_at": 1662493242.2482932, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN1_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_gauges_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges_POOL_NAME.316bb0ab2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">5\",error_if=\">10\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": ">10"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges_POOL_NAME"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges_POOL_NAME.316bb0ab2b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges_POOL_NAME.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges_POOL_NAME", "alias": "velodrome_gauges_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">5", "error_if": ">10"}, "created_at": 1662493242.256267, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_POOL_NAME__STRING__VARCHAR.500a13b310": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_877e5378eebc653276d84dd43a26e492\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_877e5378eebc653276d84dd43a26e492", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_POOL_NAME__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_POOL_NAME__STRING__VARCHAR.500a13b310", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_877e5378eebc653276d84dd43a26e492.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_POOL_NAME__STRING__VARCHAR", "alias": "velodrome_gauges_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_877e5378eebc653276d84dd43a26e492.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_877e5378eebc653276d84dd43a26e492"}, "created_at": 1662493242.258272, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_gauges_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_gauges__INSERTED_TIMESTAMP.d1161c3d84": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_gauges__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_gauges__INSERTED_TIMESTAMP.d1161c3d84", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_gauges__INSERTED_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "not_null_silver__velodrome_gauges__INSERTED_TIMESTAMP", "alias": "velodrome_gauges", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/not_null_silver__velodrome_gauges__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.263089, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_gauges\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_gauges", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9ee131e5c7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_36694b992f3585811953f080280aed27\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_36694b992f3585811953f080280aed27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9ee131e5c7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_36694b992f3585811953f080280aed27.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_gauges", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_expectations_expect_column_36694b992f3585811953f080280aed27.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_36694b992f3585811953f080280aed27"}, "created_at": 1662493242.2646022, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INTERNAL_BRIBE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_gauges", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_gauges_GAUGE_ADDRESS.931f433d89": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_96cc975a3e087931ef9a4062f9173d14\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["GAUGE_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__velodrome_gauges')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_gauges"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_96cc975a3e087931ef9a4062f9173d14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "velodrome", "dbt_utils_unique_combination_of_columns_silver__velodrome_gauges_GAUGE_ADDRESS"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_gauges_GAUGE_ADDRESS.931f433d89", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_96cc975a3e087931ef9a4062f9173d14.sql", "original_file_path": "models/velodrome/silver__velodrome_gauges.yml", "name": "dbt_utils_unique_combination_of_columns_silver__velodrome_gauges_GAUGE_ADDRESS", "alias": "velodrome_gauges_GAUGE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_gauges"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_gauges.yml/dbt_utils_unique_combination_o_96cc975a3e087931ef9a4062f9173d14.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_96cc975a3e087931ef9a4062f9173d14"}, "created_at": 1662493242.270755, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        GAUGE_ADDRESS\n    from OPTIMISM_DEV.silver.velodrome_gauges\n    group by GAUGE_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.velodrome_gauges_GAUGE_ADDRESS", "column_name": null, "file_key_name": "models.silver__velodrome_gauges"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_NUMBER.867112395c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_NUMBER.867112395c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_BLOCK_NUMBER.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_BLOCK_NUMBER", "alias": "velodrome_claimed_rewards_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.282112, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_NUMBER__NUMBER__FLOAT.5077382b71": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_48ae3785ba886d9e8158bebbd9166643\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_48ae3785ba886d9e8158bebbd9166643", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_NUMBER__NUMBER__FLOAT.5077382b71", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_48ae3785ba886d9e8158bebbd9166643.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "velodrome_claimed_rewards_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_48ae3785ba886d9e8158bebbd9166643.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_48ae3785ba886d9e8158bebbd9166643"}, "created_at": 1662493242.283884, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARD_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIM_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_claimed_rewards_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP.273af3e478": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP.273af3e478", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP", "alias": "velodrome_claimed_rewards_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.290334, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__day__1.0f2adaafec": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_5189fe05950d716675e6db00d291f79a\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_5189fe05950d716675e6db00d291f79a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__day__1.0f2adaafec", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_5189fe05950d716675e6db00d291f79a.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__day__1", "alias": "velodrome_claimed_rewards_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_row_va_5189fe05950d716675e6db00d291f79a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_5189fe05950d716675e6db00d291f79a"}, "created_at": 1662493242.292037, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_claimed_rewards_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.494792a80e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_20d27c2bdfa76514f26f86695434239e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_20d27c2bdfa76514f26f86695434239e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.494792a80e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_20d27c2bdfa76514f26f86695434239e.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_claimed_rewards_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_20d27c2bdfa76514f26f86695434239e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_20d27c2bdfa76514f26f86695434239e"}, "created_at": 1662493242.2973409, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARD_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIM_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_claimed_rewards_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TX_HASH.740d98d451": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TX_HASH.740d98d451", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_TX_HASH.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_TX_HASH", "alias": "velodrome_claimed_rewards_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.302036, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TX_HASH__0_xX_0_9a_fA_F_.768035d13e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ee1cbfc3be9a34da9ace5ce9955d74bf\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ee1cbfc3be9a34da9ace5ce9955d74bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TX_HASH__0_xX_0_9a_fA_F_.768035d13e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ee1cbfc3be9a34da9ace5ce9955d74bf.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TX_HASH__0_xX_0_9a_fA_F_", "alias": "velodrome_claimed_rewards_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_ee1cbfc3be9a34da9ace5ce9955d74bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ee1cbfc3be9a34da9ace5ce9955d74bf"}, "created_at": 1662493242.304411, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_claimed_rewards_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE.76fbc99ec2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__velodrome_cla_e64261a39bbc4478e3b894df5fb38d7b\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "not_null_silver__velodrome_cla_e64261a39bbc4478e3b894df5fb38d7b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE.76fbc99ec2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_cla_e64261a39bbc4478e3b894df5fb38d7b.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE", "alias": "velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_cla_e64261a39bbc4478e3b894df5fb38d7b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__velodrome_cla_e64261a39bbc4478e3b894df5fb38d7b"}, "created_at": 1662493242.3101661, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.51142a4ab8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_240173496472466cf8435c2fc6de0f18\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_240173496472466cf8435c2fc6de0f18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.51142a4ab8", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_240173496472466cf8435c2fc6de0f18.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_240173496472466cf8435c2fc6de0f18.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_240173496472466cf8435c2fc6de0f18"}, "created_at": 1662493242.31169, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS.5f39a9634a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS.5f39a9634a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS", "alias": "velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.315992, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.693727d4bc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dd1c45c22a8a6987718f21d16bafc320\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dd1c45c22a8a6987718f21d16bafc320", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.693727d4bc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_dd1c45c22a8a6987718f21d16bafc320.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_dd1c45c22a8a6987718f21d16bafc320.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dd1c45c22a8a6987718f21d16bafc320"}, "created_at": 1662493242.317479, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS.c497aefd3c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS.c497aefd3c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS", "alias": "velodrome_claimed_rewards_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.322983, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.01580727be": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_942fa5da79247f616a7b5c3e3ea5e0b3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_942fa5da79247f616a7b5c3e3ea5e0b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.01580727be", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_942fa5da79247f616a7b5c3e3ea5e0b3.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_claimed_rewards_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_942fa5da79247f616a7b5c3e3ea5e0b3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_942fa5da79247f616a7b5c3e3ea5e0b3"}, "created_at": 1662493242.3252869, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_claimed_rewards_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS.f1a269cb7b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS.f1a269cb7b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS", "alias": "velodrome_claimed_rewards_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.329328, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.96b1f8942b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f00097cbf8368a75d814216a849664c9\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f00097cbf8368a75d814216a849664c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.96b1f8942b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_f00097cbf8368a75d814216a849664c9.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_claimed_rewards_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_f00097cbf8368a75d814216a849664c9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f00097cbf8368a75d814216a849664c9"}, "created_at": 1662493242.331039, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_claimed_rewards_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_EVENT_INDEX.e0ddce03fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_EVENT_INDEX"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_EVENT_INDEX.e0ddce03fe", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_EVENT_INDEX.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_EVENT_INDEX", "alias": "velodrome_claimed_rewards_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.33502, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_EVENT_INDEX__NUMBER__FLOAT.967b32b024": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4b83444f7426fd08d20b86131faebda\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4b83444f7426fd08d20b86131faebda", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_EVENT_INDEX__NUMBER__FLOAT.967b32b024", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_e4b83444f7426fd08d20b86131faebda.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_EVENT_INDEX__NUMBER__FLOAT", "alias": "velodrome_claimed_rewards_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_e4b83444f7426fd08d20b86131faebda.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e4b83444f7426fd08d20b86131faebda"}, "created_at": 1662493242.337941, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARD_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIM_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_claimed_rewards_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_REWARD_TYPE.4be428306d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARD_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_REWARD_TYPE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_REWARD_TYPE.4be428306d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_REWARD_TYPE.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_REWARD_TYPE", "alias": "velodrome_claimed_rewards_REWARD_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_REWARD_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.344405, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere REWARD_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_REWARD_TYPE", "column_name": "REWARD_TYPE", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__velodrome_claimed_rewards_REWARD_TYPE__venft_distribution__lp_reward__voter_reward.522f29f356": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_67ce8a59d70924160ec2db2315ceacf5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["venft_distribution", "lp_reward", "voter_reward"], "column_name": "REWARD_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_67ce8a59d70924160ec2db2315ceacf5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_set_silver__velodrome_claimed_rewards_REWARD_TYPE__venft_distribution__lp_reward__voter_reward"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__velodrome_claimed_rewards_REWARD_TYPE__venft_distribution__lp_reward__voter_reward.522f29f356", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_67ce8a59d70924160ec2db2315ceacf5.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__velodrome_claimed_rewards_REWARD_TYPE__venft_distribution__lp_reward__voter_reward", "alias": "velodrome_claimed_rewards_REWARD_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_67ce8a59d70924160ec2db2315ceacf5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_67ce8a59d70924160ec2db2315ceacf5"}, "created_at": 1662493242.346145, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        REWARD_TYPE as value_field\n\n    from OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    \n\n),\nset_values as (\n\n    select\n        cast('venft_distribution' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('lp_reward' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('voter_reward' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_set_silver.velodrome_claimed_rewards_REWARD_TYPE", "column_name": "REWARD_TYPE", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ID.f6b162d6e5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"REWARD_TYPE = 'venft_distribution'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "REWARD_TYPE = 'venft_distribution'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_TOKEN_ID"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ID.f6b162d6e5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_TOKEN_ID.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_TOKEN_ID", "alias": "velodrome_claimed_rewards_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_TOKEN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "REWARD_TYPE = 'venft_distribution'"}, "created_at": 1662493242.35249, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.velodrome_claimed_rewards where REWARD_TYPE = 'venft_distribution') dbt_subquery\nwhere TOKEN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_TOKEN_ID", "column_name": "TOKEN_ID", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_ID__NUMBER__FLOAT.354aca98a0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4484480b2acc9bbc49158c0a390ca608\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4484480b2acc9bbc49158c0a390ca608", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_ID__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_ID__NUMBER__FLOAT.354aca98a0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_4484480b2acc9bbc49158c0a390ca608.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_ID__NUMBER__FLOAT", "alias": "velodrome_claimed_rewards_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_4484480b2acc9bbc49158c0a390ca608.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4484480b2acc9bbc49158c0a390ca608"}, "created_at": 1662493242.354879, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARD_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIM_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_claimed_rewards_TOKEN_ID", "column_name": "TOKEN_ID", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT.909a3ff4d6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CLAIMED_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT.909a3ff4d6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT", "alias": "velodrome_claimed_rewards_CLAIMED_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.359549, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere CLAIMED_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_CLAIMED_AMOUNT", "column_name": "CLAIMED_AMOUNT", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT__NUMBER__FLOAT.f22caa5247": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8b567a41b545a0443eb336c12ec4e2fe\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CLAIMED_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8b567a41b545a0443eb336c12ec4e2fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT__NUMBER__FLOAT.f22caa5247", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_8b567a41b545a0443eb336c12ec4e2fe.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT__NUMBER__FLOAT", "alias": "velodrome_claimed_rewards_CLAIMED_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_8b567a41b545a0443eb336c12ec4e2fe.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8b567a41b545a0443eb336c12ec4e2fe"}, "created_at": 1662493242.361071, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARD_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIM_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CLAIMED_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_claimed_rewards_CLAIMED_AMOUNT", "column_name": "CLAIMED_AMOUNT", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_SYMBOL__STRING__VARCHAR.7f4548e2c3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7e41940624b64b96d0f17e3b78f63b70\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7e41940624b64b96d0f17e3b78f63b70", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_SYMBOL__STRING__VARCHAR.7f4548e2c3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_7e41940624b64b96d0f17e3b78f63b70.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_SYMBOL__STRING__VARCHAR", "alias": "velodrome_claimed_rewards_TOKEN_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_7e41940624b64b96d0f17e3b78f63b70.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7e41940624b64b96d0f17e3b78f63b70"}, "created_at": 1662493242.365546, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARD_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIM_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_claimed_rewards_TOKEN_SYMBOL", "column_name": "TOKEN_SYMBOL", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ADDRESS.6951c79e87": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_TOKEN_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ADDRESS.6951c79e87", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_TOKEN_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_TOKEN_ADDRESS", "alias": "velodrome_claimed_rewards_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_TOKEN_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.371038, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere TOKEN_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_TOKEN_ADDRESS", "column_name": "TOKEN_ADDRESS", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.d279fceb6d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_42cee6db5a1f255294c8a977c3add80a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_42cee6db5a1f255294c8a977c3add80a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TOKEN_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.d279fceb6d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_42cee6db5a1f255294c8a977c3add80a.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TOKEN_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_claimed_rewards_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_42cee6db5a1f255294c8a977c3add80a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_42cee6db5a1f255294c8a977c3add80a"}, "created_at": 1662493242.3732412, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_claimed_rewards_TOKEN_ADDRESS", "column_name": "TOKEN_ADDRESS", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIM_EPOCH.a84dfaafe7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"REWARD_TYPE = 'venft_distribution'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CLAIM_EPOCH", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "REWARD_TYPE = 'venft_distribution'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_CLAIM_EPOCH"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIM_EPOCH.a84dfaafe7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_CLAIM_EPOCH.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_CLAIM_EPOCH", "alias": "velodrome_claimed_rewards_CLAIM_EPOCH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_CLAIM_EPOCH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "REWARD_TYPE = 'venft_distribution'"}, "created_at": 1662493242.3786812, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.velodrome_claimed_rewards where REWARD_TYPE = 'venft_distribution') dbt_subquery\nwhere CLAIM_EPOCH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_CLAIM_EPOCH", "column_name": "CLAIM_EPOCH", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIM_EPOCH__NUMBER__FLOAT.16a8a49ba0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5a76d040d59543fd2fda5d6339c200b9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CLAIM_EPOCH", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5a76d040d59543fd2fda5d6339c200b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIM_EPOCH__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIM_EPOCH__NUMBER__FLOAT.16a8a49ba0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5a76d040d59543fd2fda5d6339c200b9.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIM_EPOCH__NUMBER__FLOAT", "alias": "velodrome_claimed_rewards_CLAIM_EPOCH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_5a76d040d59543fd2fda5d6339c200b9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5a76d040d59543fd2fda5d6339c200b9"}, "created_at": 1662493242.38023, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARD_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIM_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CLAIM_EPOCH'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_claimed_rewards_CLAIM_EPOCH", "column_name": "CLAIM_EPOCH", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards_MAX_EPOCH.1e9e5275e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"REWARD_TYPE = 'venft_distribution'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_EPOCH", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "REWARD_TYPE = 'venft_distribution'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards_MAX_EPOCH"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards_MAX_EPOCH.1e9e5275e4", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards_MAX_EPOCH.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards_MAX_EPOCH", "alias": "velodrome_claimed_rewards_MAX_EPOCH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards_MAX_EPOCH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "REWARD_TYPE = 'venft_distribution'"}, "created_at": 1662493242.385802, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.velodrome_claimed_rewards where REWARD_TYPE = 'venft_distribution') dbt_subquery\nwhere MAX_EPOCH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards_MAX_EPOCH", "column_name": "MAX_EPOCH", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_MAX_EPOCH__NUMBER__FLOAT.bfa0081e38": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6a45c7bbadcf069da97a5de5345dea8a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MAX_EPOCH", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6a45c7bbadcf069da97a5de5345dea8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_MAX_EPOCH__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_MAX_EPOCH__NUMBER__FLOAT.bfa0081e38", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_6a45c7bbadcf069da97a5de5345dea8a.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_MAX_EPOCH__NUMBER__FLOAT", "alias": "velodrome_claimed_rewards_MAX_EPOCH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_6a45c7bbadcf069da97a5de5345dea8a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6a45c7bbadcf069da97a5de5345dea8a"}, "created_at": 1662493242.388559, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARD_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIM_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MAX_EPOCH'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_claimed_rewards_MAX_EPOCH", "column_name": "MAX_EPOCH", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP.6b00d1c03b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP.6b00d1c03b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "not_null_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP", "alias": "velodrome_claimed_rewards", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/not_null_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.393249, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_claimed_rewards\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_claimed_rewards", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__day__1.dfba6825cc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_16b2f09b51dd60d9f6633ccf1e8635c4\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_16b2f09b51dd60d9f6633ccf1e8635c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__day__1.dfba6825cc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_16b2f09b51dd60d9f6633ccf1e8635c4.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__day__1", "alias": "velodrome_claimed_rewards", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_row_va_16b2f09b51dd60d9f6633ccf1e8635c4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_16b2f09b51dd60d9f6633ccf1e8635c4"}, "created_at": 1662493242.3948312, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    where\n        -- to exclude erroneous future dates\n        cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_claimed_rewards", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0162275e37": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_75722000163f7440ffda0f6a5820cde1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_75722000163f7440ffda0f6a5820cde1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0162275e37", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_75722000163f7440ffda0f6a5820cde1.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_claimed_rewards", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_expectations_expect_column_75722000163f7440ffda0f6a5820cde1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_75722000163f7440ffda0f6a5820cde1"}, "created_at": 1662493242.4017549, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARD_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIMED_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLAIM_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_EPOCH' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_claimed_rewards", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_claimed_rewards__log_id.9041f8ac5c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_adcc85fbdb1c7f4b0e93c1ead70cba0a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver__velodrome_claimed_rewards')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_claimed_rewards"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_adcc85fbdb1c7f4b0e93c1ead70cba0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "velodrome", "dbt_utils_unique_combination_of_columns_silver__velodrome_claimed_rewards__log_id"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_claimed_rewards__log_id.9041f8ac5c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_adcc85fbdb1c7f4b0e93c1ead70cba0a.sql", "original_file_path": "models/velodrome/silver__velodrome_claimed_rewards.yml", "name": "dbt_utils_unique_combination_of_columns_silver__velodrome_claimed_rewards__log_id", "alias": "velodrome_claimed_rewards", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_claimed_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_claimed_rewards.yml/dbt_utils_unique_combination_o_adcc85fbdb1c7f4b0e93c1ead70cba0a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_adcc85fbdb1c7f4b0e93c1ead70cba0a"}, "created_at": 1662493242.407362, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from OPTIMISM_DEV.silver.velodrome_claimed_rewards\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.velodrome_claimed_rewards", "column_name": null, "file_key_name": "models.silver__velodrome_claimed_rewards"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_NUMBER.0c8d62348b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_NUMBER.0c8d62348b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_BLOCK_NUMBER.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_BLOCK_NUMBER", "alias": "velodrome_LP_actions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.425832, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_NUMBER__NUMBER__FLOAT.01b32d6d97": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_56eb79f9f1349995da04abdbb676cc7c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_56eb79f9f1349995da04abdbb676cc7c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_NUMBER__NUMBER__FLOAT.01b32d6d97", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_56eb79f9f1349995da04abdbb676cc7c.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "velodrome_LP_actions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_56eb79f9f1349995da04abdbb676cc7c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_56eb79f9f1349995da04abdbb676cc7c"}, "created_at": 1662493242.427757, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_TIMESTAMP.17262e258e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_TIMESTAMP.17262e258e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_BLOCK_TIMESTAMP", "alias": "velodrome_LP_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.4319491, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__day__1.d4491742bb": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_43703320321f8a8b95f7fc9d7afb3a8b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_43703320321f8a8b95f7fc9d7afb3a8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__day__1.d4491742bb", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_43703320321f8a8b95f7fc9d7afb3a8b.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__day__1", "alias": "velodrome_LP_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_row_va_43703320321f8a8b95f7fc9d7afb3a8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_43703320321f8a8b95f7fc9d7afb3a8b"}, "created_at": 1662493242.433701, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_LP_actions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_LP_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.fc7bcab5bc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ae446bdb76f26454a1f3c9657c64db9e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ae446bdb76f26454a1f3c9657c64db9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.fc7bcab5bc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ae446bdb76f26454a1f3c9657c64db9e.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_LP_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_ae446bdb76f26454a1f3c9657c64db9e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ae446bdb76f26454a1f3c9657c64db9e"}, "created_at": 1662493242.440769, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_TX_HASH.61c8cd66de": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_TX_HASH.61c8cd66de", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_TX_HASH.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_TX_HASH", "alias": "velodrome_LP_actions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.4454, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TX_HASH__0_xX_0_9a_fA_F_.f498ec7f97": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5f29aab819840d70b245a3e1ae198118\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5f29aab819840d70b245a3e1ae198118", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TX_HASH__0_xX_0_9a_fA_F_.f498ec7f97", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5f29aab819840d70b245a3e1ae198118.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TX_HASH__0_xX_0_9a_fA_F_", "alias": "velodrome_LP_actions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_5f29aab819840d70b245a3e1ae198118.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5f29aab819840d70b245a3e1ae198118"}, "created_at": 1662493242.446986, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_LP_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_LP_actions_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE.5926b88f99": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE.5926b88f99", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE", "alias": "velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.451375, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.0c6e7ce360": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_41ae7c9353317d04372770e4ae283d67\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_41ae7c9353317d04372770e4ae283d67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.0c6e7ce360", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_41ae7c9353317d04372770e4ae283d67.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_41ae7c9353317d04372770e4ae283d67.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_41ae7c9353317d04372770e4ae283d67"}, "created_at": 1662493242.454634, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_LP_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS.870b67eafa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS.870b67eafa", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS", "alias": "velodrome_LP_actions_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.459626, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.338045b848": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6dc6658a5ccd7a554d268e985f119449\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6dc6658a5ccd7a554d268e985f119449", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.338045b848", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_6dc6658a5ccd7a554d268e985f119449.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_LP_actions_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_6dc6658a5ccd7a554d268e985f119449.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6dc6658a5ccd7a554d268e985f119449"}, "created_at": 1662493242.461131, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_LP_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_LP_actions_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS.1812f59ae9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS.1812f59ae9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS", "alias": "velodrome_LP_actions_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.465717, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.93de5e2c54": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1de9562f3d8c865c0d7386efdfe6dd34\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1de9562f3d8c865c0d7386efdfe6dd34", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.93de5e2c54", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_1de9562f3d8c865c0d7386efdfe6dd34.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_LP_actions_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_1de9562f3d8c865c0d7386efdfe6dd34.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1de9562f3d8c865c0d7386efdfe6dd34"}, "created_at": 1662493242.46734, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_LP_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_LP_actions_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_ADDRESS.c301aacd27": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_POOL_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_ADDRESS.c301aacd27", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_POOL_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_POOL_ADDRESS", "alias": "velodrome_LP_actions_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.473564, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.8d522d3a86": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_71900fe32e341c4872823d368aa18041\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_71900fe32e341c4872823d368aa18041", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.8d522d3a86", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_71900fe32e341c4872823d368aa18041.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_LP_actions_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_71900fe32e341c4872823d368aa18041.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_71900fe32e341c4872823d368aa18041"}, "created_at": 1662493242.475273, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_LP_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_LP_actions_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_EVENT_INDEX.83a7d6cda9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_EVENT_INDEX"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_EVENT_INDEX.83a7d6cda9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_EVENT_INDEX.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_EVENT_INDEX", "alias": "velodrome_LP_actions_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.4801989, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_EVENT_INDEX__NUMBER__FLOAT.f4fcf2e44a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5880817ef22f683131bf9b3074e242f1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5880817ef22f683131bf9b3074e242f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_EVENT_INDEX__NUMBER__FLOAT.f4fcf2e44a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5880817ef22f683131bf9b3074e242f1.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_EVENT_INDEX__NUMBER__FLOAT", "alias": "velodrome_LP_actions_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_5880817ef22f683131bf9b3074e242f1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5880817ef22f683131bf9b3074e242f1"}, "created_at": 1662493242.481911, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_NAME.17ee6c9396": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">50\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">50", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_POOL_NAME"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_NAME.17ee6c9396", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_POOL_NAME.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_POOL_NAME", "alias": "velodrome_LP_actions_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">50", "error_if": ">1000"}, "created_at": 1662493242.488449, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_NAME__STRING__VARCHAR.66185f625f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6d08ef17f4870bbc9c5664c14a1568b0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6d08ef17f4870bbc9c5664c14a1568b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_NAME__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_NAME__STRING__VARCHAR.66185f625f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_6d08ef17f4870bbc9c5664c14a1568b0.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_NAME__STRING__VARCHAR", "alias": "velodrome_LP_actions_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_6d08ef17f4870bbc9c5664c14a1568b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6d08ef17f4870bbc9c5664c14a1568b0"}, "created_at": 1662493242.4909241, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_TYPE.cf35baf138": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_POOL_TYPE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_TYPE.cf35baf138", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_POOL_TYPE.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_POOL_TYPE", "alias": "velodrome_LP_actions_POOL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_POOL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.495357, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere POOL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_POOL_TYPE", "column_name": "POOL_TYPE", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_TYPE__STRING__VARCHAR.c8d0c45b32": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3eb6e244c94376ab9233fafd4217dfa2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "POOL_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3eb6e244c94376ab9233fafd4217dfa2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_TYPE__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_TYPE__STRING__VARCHAR.c8d0c45b32", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3eb6e244c94376ab9233fafd4217dfa2.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_TYPE__STRING__VARCHAR", "alias": "velodrome_LP_actions_POOL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_3eb6e244c94376ab9233fafd4217dfa2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3eb6e244c94376ab9233fafd4217dfa2"}, "created_at": 1662493242.497141, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_POOL_TYPE", "column_name": "POOL_TYPE", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_SENDER_ADDRESS.a90cf18f0d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_SENDER_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_SENDER_ADDRESS.a90cf18f0d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_SENDER_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_SENDER_ADDRESS", "alias": "velodrome_LP_actions_SENDER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_SENDER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.502456, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere SENDER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_SENDER_ADDRESS", "column_name": "SENDER_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_SENDER_ADDRESS__0_xX_0_9a_fA_F_.41c53b96ae": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4ec0d3f9d98181e8cfa574c3836852d0\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SENDER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4ec0d3f9d98181e8cfa574c3836852d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_SENDER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_SENDER_ADDRESS__0_xX_0_9a_fA_F_.41c53b96ae", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_4ec0d3f9d98181e8cfa574c3836852d0.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_SENDER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_LP_actions_SENDER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_4ec0d3f9d98181e8cfa574c3836852d0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4ec0d3f9d98181e8cfa574c3836852d0"}, "created_at": 1662493242.505007, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SENDER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_LP_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_LP_actions_SENDER_ADDRESS", "column_name": "SENDER_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_ACTION.1642313e2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_ACTION", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_LP_ACTION"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_ACTION.1642313e2b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_LP_ACTION.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_LP_ACTION", "alias": "velodrome_LP_actions_LP_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_LP_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.510067, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere LP_ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_LP_ACTION", "column_name": "LP_ACTION", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_ACTION__STRING__VARCHAR.0d0cc79321": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_007474eea5e96358e21047ae933d930d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LP_ACTION", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_007474eea5e96358e21047ae933d930d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_ACTION__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_ACTION__STRING__VARCHAR.0d0cc79321", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_007474eea5e96358e21047ae933d930d.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_ACTION__STRING__VARCHAR", "alias": "velodrome_LP_actions_LP_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_007474eea5e96358e21047ae933d930d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_007474eea5e96358e21047ae933d930d"}, "created_at": 1662493242.5119302, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LP_ACTION'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_LP_ACTION", "column_name": "LP_ACTION", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_SYMBOL.ccc899f706": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">50\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">50", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_TOKEN0_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_SYMBOL.ccc899f706", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_TOKEN0_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_TOKEN0_SYMBOL", "alias": "velodrome_LP_actions_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_TOKEN0_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">50", "error_if": ">1000"}, "created_at": 1662493242.518781, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere TOKEN0_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_SYMBOL__STRING__VARCHAR.1281795ed3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_510dbf8be38c9108f374cfc88665cc8c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_510dbf8be38c9108f374cfc88665cc8c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_SYMBOL__STRING__VARCHAR.1281795ed3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_510dbf8be38c9108f374cfc88665cc8c.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_SYMBOL__STRING__VARCHAR", "alias": "velodrome_LP_actions_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_510dbf8be38c9108f374cfc88665cc8c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_510dbf8be38c9108f374cfc88665cc8c"}, "created_at": 1662493242.5213819, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN0_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_SYMBOL.6a7a4492c8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">50\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">50", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_TOKEN1_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_SYMBOL.6a7a4492c8", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_TOKEN1_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_TOKEN1_SYMBOL", "alias": "velodrome_LP_actions_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_TOKEN1_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">50", "error_if": ">1000"}, "created_at": 1662493242.527528, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere TOKEN1_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_SYMBOL__STRING__VARCHAR.cf591ca414": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ea47a28a6f477fbf33cb444866ea17e9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ea47a28a6f477fbf33cb444866ea17e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_SYMBOL__STRING__VARCHAR.cf591ca414", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ea47a28a6f477fbf33cb444866ea17e9.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_SYMBOL__STRING__VARCHAR", "alias": "velodrome_LP_actions_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_ea47a28a6f477fbf33cb444866ea17e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ea47a28a6f477fbf33cb444866ea17e9"}, "created_at": 1662493242.529139, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN1_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_AMOUNT.258a084613": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_TOKEN0_AMOUNT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_AMOUNT.258a084613", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_TOKEN0_AMOUNT.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_TOKEN0_AMOUNT", "alias": "velodrome_LP_actions_TOKEN0_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_TOKEN0_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.5337422, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere TOKEN0_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_TOKEN0_AMOUNT", "column_name": "TOKEN0_AMOUNT", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_AMOUNT__NUMBER__FLOAT.cec7460a83": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8466817db055fed7ec6d2b2d21027218\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOKEN0_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8466817db055fed7ec6d2b2d21027218", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_AMOUNT__NUMBER__FLOAT.cec7460a83", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_8466817db055fed7ec6d2b2d21027218.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_AMOUNT__NUMBER__FLOAT", "alias": "velodrome_LP_actions_TOKEN0_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_8466817db055fed7ec6d2b2d21027218.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8466817db055fed7ec6d2b2d21027218"}, "created_at": 1662493242.536343, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN0_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_TOKEN0_AMOUNT", "column_name": "TOKEN0_AMOUNT", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_AMOUNT.f7ae01ab06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_TOKEN1_AMOUNT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_AMOUNT.f7ae01ab06", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_TOKEN1_AMOUNT.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_TOKEN1_AMOUNT", "alias": "velodrome_LP_actions_TOKEN1_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_TOKEN1_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.541933, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere TOKEN1_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_TOKEN1_AMOUNT", "column_name": "TOKEN1_AMOUNT", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_AMOUNT__NUMBER__FLOAT.9de4830e55": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3c133e0c0b2b946798089705d420b783\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOKEN1_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3c133e0c0b2b946798089705d420b783", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_AMOUNT__NUMBER__FLOAT.9de4830e55", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3c133e0c0b2b946798089705d420b783.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_AMOUNT__NUMBER__FLOAT", "alias": "velodrome_LP_actions_TOKEN1_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_3c133e0c0b2b946798089705d420b783.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3c133e0c0b2b946798089705d420b783"}, "created_at": 1662493242.543585, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN1_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_TOKEN1_AMOUNT", "column_name": "TOKEN1_AMOUNT", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_ADDRESS.4d145705b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_TOKEN0_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_ADDRESS.4d145705b6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_TOKEN0_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_TOKEN0_ADDRESS", "alias": "velodrome_LP_actions_TOKEN0_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_TOKEN0_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.548034, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere TOKEN0_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_TOKEN0_ADDRESS", "column_name": "TOKEN0_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.7783e3c07c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_77c9e94002a86ef9a318dda43fd89120\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN0_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_77c9e94002a86ef9a318dda43fd89120", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.7783e3c07c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_77c9e94002a86ef9a318dda43fd89120.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_LP_actions_TOKEN0_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_77c9e94002a86ef9a318dda43fd89120.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_77c9e94002a86ef9a318dda43fd89120"}, "created_at": 1662493242.549574, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN0_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_LP_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_LP_actions_TOKEN0_ADDRESS", "column_name": "TOKEN0_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_ADDRESS.de0b5c759e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_TOKEN1_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_ADDRESS.de0b5c759e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_TOKEN1_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_TOKEN1_ADDRESS", "alias": "velodrome_LP_actions_TOKEN1_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_TOKEN1_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.55516, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere TOKEN1_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_TOKEN1_ADDRESS", "column_name": "TOKEN1_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.8ac6a05161": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8a2108d23794918a95d827f53df6d8b2\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN1_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8a2108d23794918a95d827f53df6d8b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.8ac6a05161", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_8a2108d23794918a95d827f53df6d8b2.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_LP_actions_TOKEN1_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_8a2108d23794918a95d827f53df6d8b2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8a2108d23794918a95d827f53df6d8b2"}, "created_at": 1662493242.556743, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN1_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_LP_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_LP_actions_TOKEN1_ADDRESS", "column_name": "TOKEN1_ADDRESS", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_ACTION.46c749b81c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_TOKEN_ACTION", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_LP_TOKEN_ACTION"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_ACTION.46c749b81c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_LP_TOKEN_ACTION.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_LP_TOKEN_ACTION", "alias": "velodrome_LP_actions_LP_TOKEN_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_LP_TOKEN_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.561891, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere LP_TOKEN_ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_LP_TOKEN_ACTION", "column_name": "LP_TOKEN_ACTION", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_ACTION__STRING__VARCHAR.dcdab855bc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4fbeb3ccaa2e9eeac175c0b0a2883a44\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LP_TOKEN_ACTION", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4fbeb3ccaa2e9eeac175c0b0a2883a44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_ACTION__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_ACTION__STRING__VARCHAR.dcdab855bc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_4fbeb3ccaa2e9eeac175c0b0a2883a44.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_ACTION__STRING__VARCHAR", "alias": "velodrome_LP_actions_LP_TOKEN_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_4fbeb3ccaa2e9eeac175c0b0a2883a44.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4fbeb3ccaa2e9eeac175c0b0a2883a44"}, "created_at": 1662493242.5635111, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LP_TOKEN_ACTION'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_LP_TOKEN_ACTION", "column_name": "LP_TOKEN_ACTION", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT.8c59651af4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_TOKEN_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT.8c59651af4", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT", "alias": "velodrome_LP_actions_LP_TOKEN_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.5702841, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere LP_TOKEN_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions_LP_TOKEN_AMOUNT", "column_name": "LP_TOKEN_AMOUNT", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.6e77152a60": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8ca1ab50eb7675245968e631546f1bb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "LP_TOKEN_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d8ca1ab50eb7675245968e631546f1bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.6e77152a60", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_d8ca1ab50eb7675245968e631546f1bb.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT", "alias": "velodrome_LP_actions_LP_TOKEN_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_d8ca1ab50eb7675245968e631546f1bb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d8ca1ab50eb7675245968e631546f1bb"}, "created_at": 1662493242.572556, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LP_TOKEN_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions_LP_TOKEN_AMOUNT", "column_name": "LP_TOKEN_AMOUNT", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_LP_actions__INSERTED_TIMESTAMP.9227acd465": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_LP_actions__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_LP_actions__INSERTED_TIMESTAMP.9227acd465", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_LP_actions__INSERTED_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "not_null_silver__velodrome_LP_actions__INSERTED_TIMESTAMP", "alias": "velodrome_LP_actions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/not_null_silver__velodrome_LP_actions__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.577513, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_LP_actions\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_LP_actions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__day__1.4e5ebafba5": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_45ba3521154179603621ea8fc0a2224a\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_45ba3521154179603621ea8fc0a2224a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__day__1.4e5ebafba5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_45ba3521154179603621ea8fc0a2224a.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__day__1", "alias": "velodrome_LP_actions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_row_va_45ba3521154179603621ea8fc0a2224a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_45ba3521154179603621ea8fc0a2224a"}, "created_at": 1662493242.579294, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_LP_actions\n    where\n        -- to exclude erroneous future dates\n        cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_LP_actions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0c422d391e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_466f292984fbeb9f95dc57441dcee212\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_466f292984fbeb9f95dc57441dcee212", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0c422d391e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_466f292984fbeb9f95dc57441dcee212.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_LP_actions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_expectations_expect_column_466f292984fbeb9f95dc57441dcee212.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_466f292984fbeb9f95dc57441dcee212"}, "created_at": 1662493242.585258, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_LP_actions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_LP_actions__log_id.ccd2557d22": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ccbd99166ab1ed9669aa4f553fa704a3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver__velodrome_LP_actions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_LP_actions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ccbd99166ab1ed9669aa4f553fa704a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "velodrome", "dbt_utils_unique_combination_of_columns_silver__velodrome_LP_actions__log_id"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_LP_actions__log_id.ccd2557d22", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_ccbd99166ab1ed9669aa4f553fa704a3.sql", "original_file_path": "models/velodrome/silver__velodrome_LP_actions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__velodrome_LP_actions__log_id", "alias": "velodrome_LP_actions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_LP_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_LP_actions.yml/dbt_utils_unique_combination_o_ccbd99166ab1ed9669aa4f553fa704a3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_ccbd99166ab1ed9669aa4f553fa704a3"}, "created_at": 1662493242.591268, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from OPTIMISM_DEV.silver.velodrome_LP_actions\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.velodrome_LP_actions", "column_name": null, "file_key_name": "models.silver__velodrome_LP_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_NUMBER.5d644db8af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_NUMBER.5d644db8af", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_BLOCK_NUMBER.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_BLOCK_NUMBER", "alias": "velodrome_staking_actions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.609998, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_NUMBER__NUMBER__FLOAT.1a3e7436d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3af58d46b9237fc031c22d281236d4aa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3af58d46b9237fc031c22d281236d4aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_NUMBER__NUMBER__FLOAT.1a3e7436d3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3af58d46b9237fc031c22d281236d4aa.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "velodrome_staking_actions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_3af58d46b9237fc031c22d281236d4aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3af58d46b9237fc031c22d281236d4aa"}, "created_at": 1662493242.611722, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_TIMESTAMP.8e723334bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_TIMESTAMP.8e723334bf", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_BLOCK_TIMESTAMP", "alias": "velodrome_staking_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.616118, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__day__1.0721745b42": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a2aaaf0630f242afd901eec3f15096c6\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a2aaaf0630f242afd901eec3f15096c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__day__1.0721745b42", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_a2aaaf0630f242afd901eec3f15096c6.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__day__1", "alias": "velodrome_staking_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_row_va_a2aaaf0630f242afd901eec3f15096c6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_a2aaaf0630f242afd901eec3f15096c6"}, "created_at": 1662493242.6178088, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_staking_actions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_staking_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d7899fefa5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_59c0a18c2091acf056b743c458f652c2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_59c0a18c2091acf056b743c458f652c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d7899fefa5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_59c0a18c2091acf056b743c458f652c2.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_staking_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_59c0a18c2091acf056b743c458f652c2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_59c0a18c2091acf056b743c458f652c2"}, "created_at": 1662493242.624825, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_TX_HASH.e89122421a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_TX_HASH.e89122421a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_TX_HASH.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_TX_HASH", "alias": "velodrome_staking_actions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.628747, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TX_HASH__0_xX_0_9a_fA_F_.56b7e8cea4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8ae17b1f7259c62641c001881071a344\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8ae17b1f7259c62641c001881071a344", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TX_HASH__0_xX_0_9a_fA_F_.56b7e8cea4", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_8ae17b1f7259c62641c001881071a344.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TX_HASH__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_8ae17b1f7259c62641c001881071a344.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8ae17b1f7259c62641c001881071a344"}, "created_at": 1662493242.630947, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE.d7259bf014": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__velodrome_sta_0706ab14c09d33582da8e3e64c36e738\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "not_null_silver__velodrome_sta_0706ab14c09d33582da8e3e64c36e738", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE.d7259bf014", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_sta_0706ab14c09d33582da8e3e64c36e738.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE", "alias": "velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_sta_0706ab14c09d33582da8e3e64c36e738.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__velodrome_sta_0706ab14c09d33582da8e3e64c36e738"}, "created_at": 1662493242.635991, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.68aca2d8a1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5df363551154464a2bde1015d375460d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5df363551154464a2bde1015d375460d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.68aca2d8a1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5df363551154464a2bde1015d375460d.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_5df363551154464a2bde1015d375460d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5df363551154464a2bde1015d375460d"}, "created_at": 1662493242.638548, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS.cd1ca51e37": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS.cd1ca51e37", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS", "alias": "velodrome_staking_actions_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.643958, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.568834eac9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_90e3bed96c723b277dccd69876e61d74\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_90e3bed96c723b277dccd69876e61d74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.568834eac9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_90e3bed96c723b277dccd69876e61d74.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_90e3bed96c723b277dccd69876e61d74.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_90e3bed96c723b277dccd69876e61d74"}, "created_at": 1662493242.6455839, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS.a6dffcce13": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS.a6dffcce13", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS", "alias": "velodrome_staking_actions_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.6500711, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.b4b6ee55f2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7d5353b821a67a1dd87b17b6cc59c0db\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7d5353b821a67a1dd87b17b6cc59c0db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.b4b6ee55f2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_7d5353b821a67a1dd87b17b6cc59c0db.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_7d5353b821a67a1dd87b17b6cc59c0db.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7d5353b821a67a1dd87b17b6cc59c0db"}, "created_at": 1662493242.6523242, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_CONTRACT_ADDRESS.5060042aa5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_CONTRACT_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_CONTRACT_ADDRESS.5060042aa5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_CONTRACT_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_CONTRACT_ADDRESS", "alias": "velodrome_staking_actions_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.658224, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.042ba630d4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_15a323023792831c7ac64ff1449a4211\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_15a323023792831c7ac64ff1449a4211", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.042ba630d4", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_15a323023792831c7ac64ff1449a4211.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_15a323023792831c7ac64ff1449a4211.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_15a323023792831c7ac64ff1449a4211"}, "created_at": 1662493242.6601331, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_ADDRESS.6efec8b758": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_POOL_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_ADDRESS.6efec8b758", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_POOL_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_POOL_ADDRESS", "alias": "velodrome_staking_actions_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.664524, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.fe271b790b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d2f2caca04c078d1bfcc8306b598306c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d2f2caca04c078d1bfcc8306b598306c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.fe271b790b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_d2f2caca04c078d1bfcc8306b598306c.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_d2f2caca04c078d1bfcc8306b598306c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d2f2caca04c078d1bfcc8306b598306c"}, "created_at": 1662493242.666116, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_POOL_ADDRESS", "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_EVENT_INDEX.7bbd8665ee": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_EVENT_INDEX"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_EVENT_INDEX.7bbd8665ee", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_EVENT_INDEX.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_EVENT_INDEX", "alias": "velodrome_staking_actions_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.67169, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_EVENT_INDEX__NUMBER__FLOAT.52570d7dea": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1c13aa990ff45b379f1dc77d04e0473a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1c13aa990ff45b379f1dc77d04e0473a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_EVENT_INDEX__NUMBER__FLOAT.52570d7dea", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_1c13aa990ff45b379f1dc77d04e0473a.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_EVENT_INDEX__NUMBER__FLOAT", "alias": "velodrome_staking_actions_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_1c13aa990ff45b379f1dc77d04e0473a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1c13aa990ff45b379f1dc77d04e0473a"}, "created_at": 1662493242.674122, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_NAME.20d0d74174": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_POOL_NAME"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_NAME.20d0d74174", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_POOL_NAME.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_POOL_NAME", "alias": "velodrome_staking_actions_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493242.6794538, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_NAME__STRING__VARCHAR.1b4e1f666e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ed087f1436cb358df8d50f4146adf17a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ed087f1436cb358df8d50f4146adf17a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_NAME__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_NAME__STRING__VARCHAR.1b4e1f666e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ed087f1436cb358df8d50f4146adf17a.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_NAME__STRING__VARCHAR", "alias": "velodrome_staking_actions_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_ed087f1436cb358df8d50f4146adf17a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ed087f1436cb358df8d50f4146adf17a"}, "created_at": 1662493242.681283, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_STAKING_ACTION_TYPE.a44cdbdfba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKING_ACTION_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_STAKING_ACTION_TYPE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_STAKING_ACTION_TYPE.a44cdbdfba", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_STAKING_ACTION_TYPE.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_STAKING_ACTION_TYPE", "alias": "velodrome_staking_actions_STAKING_ACTION_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_STAKING_ACTION_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.686591, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere STAKING_ACTION_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_STAKING_ACTION_TYPE", "column_name": "STAKING_ACTION_TYPE", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_STAKING_ACTION_TYPE__STRING__VARCHAR.82f2f657ef": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be7f5bd2fc27da3d25fa24e2813f7916\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "STAKING_ACTION_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be7f5bd2fc27da3d25fa24e2813f7916", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_STAKING_ACTION_TYPE__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_STAKING_ACTION_TYPE__STRING__VARCHAR.82f2f657ef", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_be7f5bd2fc27da3d25fa24e2813f7916.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_STAKING_ACTION_TYPE__STRING__VARCHAR", "alias": "velodrome_staking_actions_STAKING_ACTION_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_be7f5bd2fc27da3d25fa24e2813f7916.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_be7f5bd2fc27da3d25fa24e2813f7916"}, "created_at": 1662493242.6891441, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'STAKING_ACTION_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions_STAKING_ACTION_TYPE", "column_name": "STAKING_ACTION_TYPE", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_GAUGE_ADDRESS.822c043f4b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAUGE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_GAUGE_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_GAUGE_ADDRESS.822c043f4b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_GAUGE_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_GAUGE_ADDRESS", "alias": "velodrome_staking_actions_GAUGE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_GAUGE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.693755, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere GAUGE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_GAUGE_ADDRESS", "column_name": "GAUGE_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.94eb0e3622": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9febdffbb06554a74cc213e119676ca7\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "GAUGE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9febdffbb06554a74cc213e119676ca7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_GAUGE_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.94eb0e3622", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_9febdffbb06554a74cc213e119676ca7.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_GAUGE_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_GAUGE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_9febdffbb06554a74cc213e119676ca7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9febdffbb06554a74cc213e119676ca7"}, "created_at": 1662493242.695549, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(GAUGE_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_GAUGE_ADDRESS", "column_name": "GAUGE_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS.be5b83938f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_PROVIDER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS.be5b83938f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS", "alias": "velodrome_staking_actions_LP_PROVIDER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.699692, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere LP_PROVIDER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_LP_PROVIDER_ADDRESS", "column_name": "LP_PROVIDER_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.519ae0b0d0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_25373405074c9f39c42e31c3b6cedd56\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "LP_PROVIDER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_25373405074c9f39c42e31c3b6cedd56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.519ae0b0d0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_25373405074c9f39c42e31c3b6cedd56.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_LP_PROVIDER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_25373405074c9f39c42e31c3b6cedd56.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_25373405074c9f39c42e31c3b6cedd56"}, "created_at": 1662493242.701814, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(LP_PROVIDER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_LP_PROVIDER_ADDRESS", "column_name": "LP_PROVIDER_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_TYPE.caf8f6eeb0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_POOL_TYPE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_TYPE.caf8f6eeb0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_POOL_TYPE.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_POOL_TYPE", "alias": "velodrome_staking_actions_POOL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_POOL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.70794, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere POOL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_POOL_TYPE", "column_name": "POOL_TYPE", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_TYPE__STRING__VARCHAR.83867f6bef": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_97c31b74474a3443f745bbb3f8bab95d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "POOL_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_97c31b74474a3443f745bbb3f8bab95d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_TYPE__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_TYPE__STRING__VARCHAR.83867f6bef", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_97c31b74474a3443f745bbb3f8bab95d.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_TYPE__STRING__VARCHAR", "alias": "velodrome_staking_actions_POOL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_97c31b74474a3443f745bbb3f8bab95d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_97c31b74474a3443f745bbb3f8bab95d"}, "created_at": 1662493242.709506, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions_POOL_TYPE", "column_name": "POOL_TYPE", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_SYMBOL.1252a25607": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_TOKEN0_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_SYMBOL.1252a25607", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_TOKEN0_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_TOKEN0_SYMBOL", "alias": "velodrome_staking_actions_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_TOKEN0_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493242.714676, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere TOKEN0_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN0_SYMBOL__STRING__VARCHAR.318363932f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_08144c3284cf01f9f01742325952162e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN0_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_08144c3284cf01f9f01742325952162e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN0_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN0_SYMBOL__STRING__VARCHAR.318363932f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_08144c3284cf01f9f01742325952162e.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN0_SYMBOL__STRING__VARCHAR", "alias": "velodrome_staking_actions_TOKEN0_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_08144c3284cf01f9f01742325952162e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_08144c3284cf01f9f01742325952162e"}, "created_at": 1662493242.716228, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN0_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions_TOKEN0_SYMBOL", "column_name": "TOKEN0_SYMBOL", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_SYMBOL.8fda729d80": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">500\",error_if=\">1000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">1000"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_TOKEN1_SYMBOL"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_SYMBOL.8fda729d80", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_TOKEN1_SYMBOL.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_TOKEN1_SYMBOL", "alias": "velodrome_staking_actions_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_TOKEN1_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "warn_if": ">500", "error_if": ">1000"}, "created_at": 1662493242.7235851, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere TOKEN1_SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN1_SYMBOL__STRING__VARCHAR.663e12acf5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_36d1a781d3d914c1c89735f6f2bb64da\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_36d1a781d3d914c1c89735f6f2bb64da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN1_SYMBOL__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN1_SYMBOL__STRING__VARCHAR.663e12acf5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_36d1a781d3d914c1c89735f6f2bb64da.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN1_SYMBOL__STRING__VARCHAR", "alias": "velodrome_staking_actions_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_36d1a781d3d914c1c89735f6f2bb64da.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_36d1a781d3d914c1c89735f6f2bb64da"}, "created_at": 1662493242.725405, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN1_SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions_TOKEN1_SYMBOL", "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_ADDRESS.e46e2b741a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN0_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_TOKEN0_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_ADDRESS.e46e2b741a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_TOKEN0_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_TOKEN0_ADDRESS", "alias": "velodrome_staking_actions_TOKEN0_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_TOKEN0_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.729791, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere TOKEN0_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_TOKEN0_ADDRESS", "column_name": "TOKEN0_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.0262973027": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ae5e3434d9672b129eb0c5dc3b291eaf\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN0_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ae5e3434d9672b129eb0c5dc3b291eaf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.0262973027", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ae5e3434d9672b129eb0c5dc3b291eaf.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_TOKEN0_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_ae5e3434d9672b129eb0c5dc3b291eaf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ae5e3434d9672b129eb0c5dc3b291eaf"}, "created_at": 1662493242.7313, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN0_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_TOKEN0_ADDRESS", "column_name": "TOKEN0_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_ADDRESS.22ca55005d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_TOKEN1_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_ADDRESS.22ca55005d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_TOKEN1_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_TOKEN1_ADDRESS", "alias": "velodrome_staking_actions_TOKEN1_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_TOKEN1_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.736417, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere TOKEN1_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_TOKEN1_ADDRESS", "column_name": "TOKEN1_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.1e893df11f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2a950a4d45d265ac3a9b0eb8d6434ef4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN1_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2a950a4d45d265ac3a9b0eb8d6434ef4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.1e893df11f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_2a950a4d45d265ac3a9b0eb8d6434ef4.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_staking_actions_TOKEN1_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_2a950a4d45d265ac3a9b0eb8d6434ef4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2a950a4d45d265ac3a9b0eb8d6434ef4"}, "created_at": 1662493242.7385821, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN1_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_staking_actions_TOKEN1_ADDRESS", "column_name": "TOKEN1_ADDRESS", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT.ac462781e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_TOKEN_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT.ac462781e1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT", "alias": "velodrome_staking_actions_LP_TOKEN_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.743804, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere LP_TOKEN_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions_LP_TOKEN_AMOUNT", "column_name": "LP_TOKEN_AMOUNT", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.61378c0c21": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_457ca26adfd14e4683998d9b55bbdfbe\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "LP_TOKEN_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_457ca26adfd14e4683998d9b55bbdfbe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.61378c0c21", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_457ca26adfd14e4683998d9b55bbdfbe.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT", "alias": "velodrome_staking_actions_LP_TOKEN_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_457ca26adfd14e4683998d9b55bbdfbe.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_457ca26adfd14e4683998d9b55bbdfbe"}, "created_at": 1662493242.7456179, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LP_TOKEN_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions_LP_TOKEN_AMOUNT", "column_name": "LP_TOKEN_AMOUNT", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_staking_actions__INSERTED_TIMESTAMP.77cd94f1b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_staking_actions__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_staking_actions__INSERTED_TIMESTAMP.77cd94f1b7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_staking_actions__INSERTED_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "not_null_silver__velodrome_staking_actions__INSERTED_TIMESTAMP", "alias": "velodrome_staking_actions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/not_null_silver__velodrome_staking_actions__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.749737, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_staking_actions\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_staking_actions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__day__1.b66fdd5dd3": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f9480772183210f93b478e66d7a9e789\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f9480772183210f93b478e66d7a9e789", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__day__1.b66fdd5dd3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_f9480772183210f93b478e66d7a9e789.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__day__1", "alias": "velodrome_staking_actions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_row_va_f9480772183210f93b478e66d7a9e789.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_f9480772183210f93b478e66d7a9e789"}, "created_at": 1662493242.7521658, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_staking_actions\n    where\n        -- to exclude erroneous future dates\n        cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_staking_actions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.57a30bac81": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a972a56369c3d26cddd05ede998e83fa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a972a56369c3d26cddd05ede998e83fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.57a30bac81", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_a972a56369c3d26cddd05ede998e83fa.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_staking_actions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_expectations_expect_column_a972a56369c3d26cddd05ede998e83fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a972a56369c3d26cddd05ede998e83fa"}, "created_at": 1662493242.759233, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STAKING_ACTION_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_TOKEN_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LP_PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAUGE_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_staking_actions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_staking_actions__log_id.23bbcb6b7d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1225411c3e3a03070c95a562b2932a4a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver__velodrome_staking_actions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_staking_actions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1225411c3e3a03070c95a562b2932a4a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "velodrome", "dbt_utils_unique_combination_of_columns_silver__velodrome_staking_actions__log_id"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_staking_actions__log_id.23bbcb6b7d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_1225411c3e3a03070c95a562b2932a4a.sql", "original_file_path": "models/velodrome/silver__velodrome_staking_actions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__velodrome_staking_actions__log_id", "alias": "velodrome_staking_actions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_staking_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_staking_actions.yml/dbt_utils_unique_combination_o_1225411c3e3a03070c95a562b2932a4a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_1225411c3e3a03070c95a562b2932a4a"}, "created_at": 1662493242.764415, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from OPTIMISM_DEV.silver.velodrome_staking_actions\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.velodrome_staking_actions", "column_name": null, "file_key_name": "models.silver__velodrome_staking_actions"}, "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_NUMBER.fce42abee7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_NUMBER.fce42abee7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_BLOCK_NUMBER.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_BLOCK_NUMBER", "alias": "velodrome_locks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.78989, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_NUMBER__NUMBER__FLOAT.6cacb87aaf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_10c46be2123c0f6cfe219d07e4fb893c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_10c46be2123c0f6cfe219d07e4fb893c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_NUMBER__NUMBER__FLOAT.6cacb87aaf", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_10c46be2123c0f6cfe219d07e4fb893c.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "velodrome_locks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_10c46be2123c0f6cfe219d07e4fb893c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_10c46be2123c0f6cfe219d07e4fb893c"}, "created_at": 1662493242.7916539, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNLOCK_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_locks_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_TIMESTAMP.33067b06c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_TIMESTAMP.33067b06c5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_BLOCK_TIMESTAMP", "alias": "velodrome_locks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.795979, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks_BLOCK_TIMESTAMP__day__1.f1c5543e48": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_efa88e07d4cc694842f811e84a66a94f\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_efa88e07d4cc694842f811e84a66a94f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks_BLOCK_TIMESTAMP__day__1.f1c5543e48", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_efa88e07d4cc694842f811e84a66a94f.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks_BLOCK_TIMESTAMP__day__1", "alias": "velodrome_locks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_row_va_efa88e07d4cc694842f811e84a66a94f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_efa88e07d4cc694842f811e84a66a94f"}, "created_at": 1662493242.797477, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_locks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_locks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7752a3b106": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_de58503b8a2a4348201d7a41d240ced6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_de58503b8a2a4348201d7a41d240ced6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7752a3b106", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_de58503b8a2a4348201d7a41d240ced6.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_locks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_de58503b8a2a4348201d7a41d240ced6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_de58503b8a2a4348201d7a41d240ced6"}, "created_at": 1662493242.805398, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNLOCK_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_locks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_TX_HASH.084e4f7b57": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_TX_HASH.084e4f7b57", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_TX_HASH.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_TX_HASH", "alias": "velodrome_locks_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.810352, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_TX_HASH__0_xX_0_9a_fA_F_.183f6aca6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c0ac6dee66b828be832894ddb854e7a1\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c0ac6dee66b828be832894ddb854e7a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_TX_HASH__0_xX_0_9a_fA_F_.183f6aca6a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c0ac6dee66b828be832894ddb854e7a1.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_TX_HASH__0_xX_0_9a_fA_F_", "alias": "velodrome_locks_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_c0ac6dee66b828be832894ddb854e7a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c0ac6dee66b828be832894ddb854e7a1"}, "created_at": 1662493242.811945, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_locks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_locks_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE.d7800eb549": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE.d7800eb549", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE", "alias": "velodrome_locks_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.817866, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.271c91a167": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1ceb401964099f09dbdbf09cc1b51e68\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1ceb401964099f09dbdbf09cc1b51e68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.271c91a167", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_1ceb401964099f09dbdbf09cc1b51e68.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "velodrome_locks_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_1ceb401964099f09dbdbf09cc1b51e68.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1ceb401964099f09dbdbf09cc1b51e68"}, "created_at": 1662493242.820406, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_locks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_locks_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FROM_ADDRESS.49486480b8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FROM_ADDRESS.49486480b8", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_ORIGIN_FROM_ADDRESS", "alias": "velodrome_locks_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.826268, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.26b9e6ed2a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_479425129f89fe3baf2917796ef5b78e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_479425129f89fe3baf2917796ef5b78e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.26b9e6ed2a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_479425129f89fe3baf2917796ef5b78e.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_locks_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_479425129f89fe3baf2917796ef5b78e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_479425129f89fe3baf2917796ef5b78e"}, "created_at": 1662493242.827883, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_locks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_locks_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_TO_ADDRESS.ebd6287a9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_ORIGIN_TO_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_TO_ADDRESS.ebd6287a9e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_ORIGIN_TO_ADDRESS", "alias": "velodrome_locks_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.832604, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.7cdb369b98": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d95b39451bd277410bc1a6e6baf70f3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3d95b39451bd277410bc1a6e6baf70f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.7cdb369b98", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3d95b39451bd277410bc1a6e6baf70f3.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_locks_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_3d95b39451bd277410bc1a6e6baf70f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3d95b39451bd277410bc1a6e6baf70f3"}, "created_at": 1662493242.834537, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_locks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_locks_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_CONTRACT_ADDRESS.2a193b069a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_CONTRACT_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_CONTRACT_ADDRESS.2a193b069a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_CONTRACT_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_CONTRACT_ADDRESS", "alias": "velodrome_locks_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.840874, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.43c3bc7c46": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6365652537795f3242d1b1928f498d8\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6365652537795f3242d1b1928f498d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.43c3bc7c46", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c6365652537795f3242d1b1928f498d8.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_locks_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_c6365652537795f3242d1b1928f498d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c6365652537795f3242d1b1928f498d8"}, "created_at": 1662493242.843412, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_locks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_locks_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_EVENT_INDEX.c1312792ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_EVENT_INDEX"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_EVENT_INDEX.c1312792ea", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_EVENT_INDEX.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_EVENT_INDEX", "alias": "velodrome_locks_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.8491058, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_EVENT_INDEX__NUMBER__FLOAT.eec681dada": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_04e89a5edd6d714bf12489f0bdd842a1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_04e89a5edd6d714bf12489f0bdd842a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_EVENT_INDEX__NUMBER__FLOAT.eec681dada", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_04e89a5edd6d714bf12489f0bdd842a1.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_EVENT_INDEX__NUMBER__FLOAT", "alias": "velodrome_locks_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_04e89a5edd6d714bf12489f0bdd842a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_04e89a5edd6d714bf12489f0bdd842a1"}, "created_at": 1662493242.851545, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNLOCK_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_locks_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_PROVIDER_ADDRESS.60796cd227": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_PROVIDER_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_PROVIDER_ADDRESS.60796cd227", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_PROVIDER_ADDRESS.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_PROVIDER_ADDRESS", "alias": "velodrome_locks_PROVIDER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_PROVIDER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.8585432, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere PROVIDER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_PROVIDER_ADDRESS", "column_name": "PROVIDER_ADDRESS", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.110964f397": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bea39a982b29610ff2ff87c25ee8da8f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PROVIDER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bea39a982b29610ff2ff87c25ee8da8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.110964f397", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_bea39a982b29610ff2ff87c25ee8da8f.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "velodrome_locks_PROVIDER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_bea39a982b29610ff2ff87c25ee8da8f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bea39a982b29610ff2ff87c25ee8da8f"}, "created_at": 1662493242.8604548, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(PROVIDER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.velodrome_locks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.velodrome_locks_PROVIDER_ADDRESS", "column_name": "PROVIDER_ADDRESS", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_UNLOCK_DATE.87f0105e03": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNLOCK_DATE", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_UNLOCK_DATE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_UNLOCK_DATE.87f0105e03", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_UNLOCK_DATE.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_UNLOCK_DATE", "alias": "velodrome_locks_UNLOCK_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_UNLOCK_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.8659751, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere UNLOCK_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_UNLOCK_DATE", "column_name": "UNLOCK_DATE", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_UNLOCK_DATE__TIMESTAMP_NTZ.e8b79c9e6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_246bdb06dac5b536ea986485e23c50b8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "UNLOCK_DATE", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_246bdb06dac5b536ea986485e23c50b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_UNLOCK_DATE__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_UNLOCK_DATE__TIMESTAMP_NTZ.e8b79c9e6a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_246bdb06dac5b536ea986485e23c50b8.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_UNLOCK_DATE__TIMESTAMP_NTZ", "alias": "velodrome_locks_UNLOCK_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_246bdb06dac5b536ea986485e23c50b8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_246bdb06dac5b536ea986485e23c50b8"}, "created_at": 1662493242.868862, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNLOCK_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'UNLOCK_DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_locks_UNLOCK_DATE", "column_name": "UNLOCK_DATE", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_TOKEN_ID.2f7a97d9ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_TOKEN_ID"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_TOKEN_ID.2f7a97d9ac", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_TOKEN_ID.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_TOKEN_ID", "alias": "velodrome_locks_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_TOKEN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.874409, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere TOKEN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_TOKEN_ID", "column_name": "TOKEN_ID", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_TOKEN_ID__NUMBER__FLOAT.8719148378": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_12ab975203beaee4cf2ef3483d8242a3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_12ab975203beaee4cf2ef3483d8242a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_TOKEN_ID__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_TOKEN_ID__NUMBER__FLOAT.8719148378", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_12ab975203beaee4cf2ef3483d8242a3.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_TOKEN_ID__NUMBER__FLOAT", "alias": "velodrome_locks_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_12ab975203beaee4cf2ef3483d8242a3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_12ab975203beaee4cf2ef3483d8242a3"}, "created_at": 1662493242.876034, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNLOCK_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_locks_TOKEN_ID", "column_name": "TOKEN_ID", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_VELO_AMOUNT.171291a904": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VELO_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_VELO_AMOUNT"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_VELO_AMOUNT.171291a904", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_VELO_AMOUNT.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_VELO_AMOUNT", "alias": "velodrome_locks_VELO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_VELO_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.882016, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere VELO_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_VELO_AMOUNT", "column_name": "VELO_AMOUNT", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT__NUMBER__FLOAT.2b3c2c5ed1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c356465ce8e477b468585742eece464\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "VELO_AMOUNT", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c356465ce8e477b468585742eece464", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT__NUMBER__FLOAT.2b3c2c5ed1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_6c356465ce8e477b468585742eece464.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT__NUMBER__FLOAT", "alias": "velodrome_locks_VELO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_6c356465ce8e477b468585742eece464.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6c356465ce8e477b468585742eece464"}, "created_at": 1662493242.883739, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNLOCK_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VELO_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_locks_VELO_AMOUNT", "column_name": "VELO_AMOUNT", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT_USD__NUMBER__FLOAT.185e474abd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_56bf1e644ca49a2d2f17f54a6ba55f32\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "VELO_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_56bf1e644ca49a2d2f17f54a6ba55f32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT_USD__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT_USD__NUMBER__FLOAT.185e474abd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_56bf1e644ca49a2d2f17f54a6ba55f32.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT_USD__NUMBER__FLOAT", "alias": "velodrome_locks_VELO_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_56bf1e644ca49a2d2f17f54a6ba55f32.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_56bf1e644ca49a2d2f17f54a6ba55f32"}, "created_at": 1662493242.889695, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNLOCK_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VELO_AMOUNT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_locks_VELO_AMOUNT_USD", "column_name": "VELO_AMOUNT_USD", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks_DEPOSIT_TYPE.76ebbffe73": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"VELO_ACTION = 'deposit'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEPOSIT_TYPE", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "VELO_ACTION = 'deposit'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks_DEPOSIT_TYPE"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks_DEPOSIT_TYPE.76ebbffe73", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks_DEPOSIT_TYPE.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks_DEPOSIT_TYPE", "alias": "velodrome_locks_DEPOSIT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks_DEPOSIT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "VELO_ACTION = 'deposit'"}, "created_at": 1662493242.89434, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.velodrome_locks where VELO_ACTION = 'deposit') dbt_subquery\nwhere DEPOSIT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks_DEPOSIT_TYPE", "column_name": "DEPOSIT_TYPE", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_silver__velodrome_locks__INSERTED_TIMESTAMP.64baa36766": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "velodrome", "not_null_silver__velodrome_locks__INSERTED_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__velodrome_locks__INSERTED_TIMESTAMP.64baa36766", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__velodrome_locks__INSERTED_TIMESTAMP.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "not_null_silver__velodrome_locks__INSERTED_TIMESTAMP", "alias": "velodrome_locks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/not_null_silver__velodrome_locks__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.895948, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.velodrome_locks\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.velodrome_locks", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks__INSERTED_TIMESTAMP__day__1.e5390e0fcc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6ada6e16fc8d4dcdca99fa861eefb73a\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6ada6e16fc8d4dcdca99fa861eefb73a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks__INSERTED_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks__INSERTED_TIMESTAMP__day__1.e5390e0fcc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_6ada6e16fc8d4dcdca99fa861eefb73a.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks__INSERTED_TIMESTAMP__day__1", "alias": "velodrome_locks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_row_va_6ada6e16fc8d4dcdca99fa861eefb73a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_6ada6e16fc8d4dcdca99fa861eefb73a"}, "created_at": 1662493242.8975942, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.velodrome_locks\n    where\n        -- to exclude erroneous future dates\n        cast(_INSERTED_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.velodrome_locks", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.01cf76bd68": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_577dc7d1905557ede9d4ec66bb081d8a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_577dc7d1905557ede9d4ec66bb081d8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "velodrome", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.01cf76bd68", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_577dc7d1905557ede9d4ec66bb081d8a.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "velodrome_locks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_expectations_expect_column_577dc7d1905557ede9d4ec66bb081d8a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_577dc7d1905557ede9d4ec66bb081d8a"}, "created_at": 1662493242.904344, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROVIDER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNLOCK_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VELO_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.velodrome_locks", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_locks__log_id.9259e4ec8a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_755e2de4d802722a5c9551aebd2e6e47\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver__velodrome_locks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__velodrome_locks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_755e2de4d802722a5c9551aebd2e6e47", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "velodrome", "dbt_utils_unique_combination_of_columns_silver__velodrome_locks__log_id"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_locks__log_id.9259e4ec8a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_755e2de4d802722a5c9551aebd2e6e47.sql", "original_file_path": "models/velodrome/silver__velodrome_locks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__velodrome_locks__log_id", "alias": "velodrome_locks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__velodrome_locks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/velodrome/silver__velodrome_locks.yml/dbt_utils_unique_combination_o_755e2de4d802722a5c9551aebd2e6e47.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_755e2de4d802722a5c9551aebd2e6e47"}, "created_at": 1662493242.909765, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from OPTIMISM_DEV.silver.velodrome_locks\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.velodrome_locks", "column_name": null, "file_key_name": "models.silver__velodrome_locks"}, "test.optimism_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_core", "fqn": ["optimism_models", "gold", "not_null_core__dim_labels_BLOCKCHAIN"], "unique_id": "test.optimism_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_core__dim_labels_BLOCKCHAIN.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_BLOCKCHAIN", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.9748852, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.core.dim_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_core.dim_labels_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__optimism.c6627e5379": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f396332361fb32ae34ae11e52d73e9bc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["optimism"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f396332361fb32ae34ae11e52d73e9bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__optimism"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__optimism.c6627e5379", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_f396332361fb32ae34ae11e52d73e9bc.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__optimism", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_f396332361fb32ae34ae11e52d73e9bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f396332361fb32ae34ae11e52d73e9bc"}, "created_at": 1662493242.9768572, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from OPTIMISM_DEV.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('optimism' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_set_core.dim_labels_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.not_null_core__dim_labels_CREATOR.0c77d5749c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_core", "fqn": ["optimism_models", "gold", "not_null_core__dim_labels_CREATOR"], "unique_id": "test.optimism_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_core__dim_labels_CREATOR.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_CREATOR", "alias": "dim_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.9811552, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.core.dim_labels\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_core.dim_labels_CREATOR", "column_name": "CREATOR", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_core", "fqn": ["optimism_models", "gold", "not_null_core__dim_labels_ADDRESS"], "unique_id": "test.optimism_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_core__dim_labels_ADDRESS.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_ADDRESS", "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.982761, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.core.dim_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_core.dim_labels_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc"}, "created_at": 1662493242.984235, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.core.dim_labels\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_core.dim_labels_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR", "alias": "dim_labels_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b"}, "created_at": 1662493242.990043, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.dim_labels_ADDRESS_NAME", "column_name": "ADDRESS_NAME", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_core", "fqn": ["optimism_models", "gold", "not_null_core__dim_labels_LABEL_TYPE"], "unique_id": "test.optimism_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_core__dim_labels_LABEL_TYPE.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_TYPE", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493242.994442, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.core.dim_labels\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_core.dim_labels_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin", "project"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf"}, "created_at": 1662493242.996019, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from OPTIMISM_DEV.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('project' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_set_core.dim_labels_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_core", "fqn": ["optimism_models", "gold", "not_null_core__dim_labels_LABEL_SUBTYPE"], "unique_id": "test.optimism_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_core__dim_labels_LABEL_SUBTYPE.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_SUBTYPE", "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.005444, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.core.dim_labels\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_core.dim_labels_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR", "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f"}, "created_at": 1662493243.007825, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL_SUBTYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.dim_labels_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_core", "fqn": ["optimism_models", "gold", "not_null_core__dim_labels_PROJECT_NAME"], "unique_id": "test.optimism_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_core__dim_labels_PROJECT_NAME.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_PROJECT_NAME", "alias": "dim_labels_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_PROJECT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.0125508, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.core.dim_labels\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_core.dim_labels_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR", "alias": "dim_labels_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292"}, "created_at": 1662493243.014189, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROJECT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.dim_labels_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.core__dim_labels"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["optimism_models", "gold", "dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__dim_labels.yml/dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845"}, "created_at": 1662493243.0198028, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from OPTIMISM_DEV.core.dim_labels\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_core.dim_labels_BLOCKCHAIN", "column_name": null, "file_key_name": "models.core__dim_labels"}, "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_NUMBER.27c35072bf": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_55f660f263c5520872a1637d12d14fa4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('core__fact_delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__fact_delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_55f660f263c5520872a1637d12d14fa4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_NUMBER"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_NUMBER.27c35072bf", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_55f660f263c5520872a1637d12d14fa4.sql", "original_file_path": "models/gold/core__fact_delegations.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_NUMBER", "alias": "fact_delegations_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_delegations.yml/dbt_expectations_expect_column_55f660f263c5520872a1637d12d14fa4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_55f660f263c5520872a1637d12d14fa4"}, "created_at": 1662493243.033204, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_to_exist_core.fact_delegations_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.core__fact_delegations"}, "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_TIMESTAMP.df02526938": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57def9ca307dbbbf351ebae8d8b355b3\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__fact_delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57def9ca307dbbbf351ebae8d8b355b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_TIMESTAMP.df02526938", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_57def9ca307dbbbf351ebae8d8b355b3.sql", "original_file_path": "models/gold/core__fact_delegations.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_TIMESTAMP", "alias": "fact_delegations_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_delegations.yml/dbt_expectations_expect_column_57def9ca307dbbbf351ebae8d8b355b3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57def9ca307dbbbf351ebae8d8b355b3"}, "created_at": 1662493243.042712, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_to_exist_core.fact_delegations_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_delegations"}, "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TX_HASH.bba5c2eb6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bd7721daf9c05a8d2135310c6002bc71\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__fact_delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd7721daf9c05a8d2135310c6002bc71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_to_exist_core__fact_delegations_TX_HASH"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TX_HASH.bba5c2eb6a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_bd7721daf9c05a8d2135310c6002bc71.sql", "original_file_path": "models/gold/core__fact_delegations.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_delegations_TX_HASH", "alias": "fact_delegations_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_delegations.yml/dbt_expectations_expect_column_bd7721daf9c05a8d2135310c6002bc71.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bd7721daf9c05a8d2135310c6002bc71"}, "created_at": 1662493243.046668, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_HASH' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_to_exist_core.fact_delegations_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.core__fact_delegations"}, "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_STATUS.f94fd1cdb0": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_83bb1868a803932969acb2e595f4dd1f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('core__fact_delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__fact_delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_83bb1868a803932969acb2e595f4dd1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_to_exist_core__fact_delegations_STATUS"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_STATUS.f94fd1cdb0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_83bb1868a803932969acb2e595f4dd1f.sql", "original_file_path": "models/gold/core__fact_delegations.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_delegations_STATUS", "alias": "fact_delegations_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_delegations.yml/dbt_expectations_expect_column_83bb1868a803932969acb2e595f4dd1f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_83bb1868a803932969acb2e595f4dd1f"}, "created_at": 1662493243.050544, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('STATUS' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_to_exist_core.fact_delegations_STATUS", "column_name": "STATUS", "file_key_name": "models.core__fact_delegations"}, "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATOR.9274d7fda4": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1b554e6dec92e4ed722c1e86ab9df1cf\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DELEGATOR", "model": "{{ get_where_subquery(ref('core__fact_delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__fact_delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1b554e6dec92e4ed722c1e86ab9df1cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATOR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATOR.9274d7fda4", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_1b554e6dec92e4ed722c1e86ab9df1cf.sql", "original_file_path": "models/gold/core__fact_delegations.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATOR", "alias": "fact_delegations_DELEGATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_delegations.yml/dbt_expectations_expect_column_1b554e6dec92e4ed722c1e86ab9df1cf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1b554e6dec92e4ed722c1e86ab9df1cf"}, "created_at": 1662493243.055937, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DELEGATOR' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_to_exist_core.fact_delegations_DELEGATOR", "column_name": "DELEGATOR", "file_key_name": "models.core__fact_delegations"}, "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TO_DELEGATE.71760508b8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0b117980ce4134c2a8b5e40e481a98fa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TO_DELEGATE", "model": "{{ get_where_subquery(ref('core__fact_delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__fact_delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0b117980ce4134c2a8b5e40e481a98fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_to_exist_core__fact_delegations_TO_DELEGATE"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TO_DELEGATE.71760508b8", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_0b117980ce4134c2a8b5e40e481a98fa.sql", "original_file_path": "models/gold/core__fact_delegations.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_delegations_TO_DELEGATE", "alias": "fact_delegations_TO_DELEGATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_delegations.yml/dbt_expectations_expect_column_0b117980ce4134c2a8b5e40e481a98fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0b117980ce4134c2a8b5e40e481a98fa"}, "created_at": 1662493243.060537, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TO_DELEGATE' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_to_exist_core.fact_delegations_TO_DELEGATE", "column_name": "TO_DELEGATE", "file_key_name": "models.core__fact_delegations"}, "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_FROM_DELEGATE.1dea18062b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5607e63246636ee7a2dd4cb0c5f36560\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FROM_DELEGATE", "model": "{{ get_where_subquery(ref('core__fact_delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__fact_delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5607e63246636ee7a2dd4cb0c5f36560", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_to_exist_core__fact_delegations_FROM_DELEGATE"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_FROM_DELEGATE.1dea18062b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5607e63246636ee7a2dd4cb0c5f36560.sql", "original_file_path": "models/gold/core__fact_delegations.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_delegations_FROM_DELEGATE", "alias": "fact_delegations_FROM_DELEGATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_delegations.yml/dbt_expectations_expect_column_5607e63246636ee7a2dd4cb0c5f36560.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5607e63246636ee7a2dd4cb0c5f36560"}, "created_at": 1662493243.0642319, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FROM_DELEGATE' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_to_exist_core.fact_delegations_FROM_DELEGATE", "column_name": "FROM_DELEGATE", "file_key_name": "models.core__fact_delegations"}, "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATION_TYPE.4b72476460": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_45f96754db9c0ec052058489e14074f4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DELEGATION_TYPE", "model": "{{ get_where_subquery(ref('core__fact_delegations')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.core__fact_delegations"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_45f96754db9c0ec052058489e14074f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["optimism_models", "gold", "dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATION_TYPE"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATION_TYPE.4b72476460", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_45f96754db9c0ec052058489e14074f4.sql", "original_file_path": "models/gold/core__fact_delegations.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATION_TYPE", "alias": "fact_delegations_DELEGATION_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_delegations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_delegations.yml/dbt_expectations_expect_column_45f96754db9c0ec052058489e14074f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_45f96754db9c0ec052058489e14074f4"}, "created_at": 1662493243.0687308, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DELEGATION_TYPE' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_to_exist_core.fact_delegations_DELEGATION_TYPE", "column_name": "DELEGATION_TYPE", "file_key_name": "models.core__fact_delegations"}, "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps_BLOCK_NUMBER.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_BLOCK_NUMBER", "alias": "ez_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.081012, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad"}, "created_at": 1662493243.082825, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_BLOCK_TIMESTAMP", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.088628, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__2.520a27875c": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_8b350a7a7ec8c9c2a25046090d839961\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_8b350a7a7ec8c9c2a25046090d839961", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__2.520a27875c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_8b350a7a7ec8c9c2a25046090d839961.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__2", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_row_va_8b350a7a7ec8c9c2a25046090d839961.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_8b350a7a7ec8c9c2a25046090d839961"}, "created_at": 1662493243.0906491, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.sushi.ez_swaps\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_sushi.ez_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1"}, "created_at": 1662493243.097051, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps_TX_HASH"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps_TX_HASH.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TX_HASH", "alias": "ez_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.101534, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb"}, "created_at": 1662493243.1042318, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps_CONTRACT_ADDRESS"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps_CONTRACT_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_CONTRACT_ADDRESS", "alias": "ez_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.109061, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4"}, "created_at": 1662493243.11061, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe"}, "created_at": 1662493243.114954, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_AMOUNT_IN", "column_name": "AMOUNT_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06"}, "created_at": 1662493243.120149, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_AMOUNT_OUT", "column_name": "AMOUNT_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN_USD", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_IN_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab"}, "created_at": 1662493243.125908, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_AMOUNT_IN_USD", "column_name": "AMOUNT_IN_USD", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT_USD", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_OUT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42"}, "created_at": 1662493243.1301918, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_AMOUNT_OUT_USD", "column_name": "AMOUNT_OUT_USD", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps_TOKEN_IN"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps_TOKEN_IN.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TOKEN_IN", "alias": "ez_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TOKEN_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.134337, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere TOKEN_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps_TOKEN_IN", "column_name": "TOKEN_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a"}, "created_at": 1662493243.136804, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_IN, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_TOKEN_IN", "column_name": "TOKEN_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps_TOKEN_OUT"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps_TOKEN_OUT.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TOKEN_OUT", "alias": "ez_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TOKEN_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.1419451, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere TOKEN_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps_TOKEN_OUT", "column_name": "TOKEN_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be638137de4adae51304e1be121986ed\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be638137de4adae51304e1be121986ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_be638137de4adae51304e1be121986ed.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_be638137de4adae51304e1be121986ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_be638137de4adae51304e1be121986ed"}, "created_at": 1662493243.1435351, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_OUT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_TOKEN_OUT", "column_name": "TOKEN_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR", "alias": "ez_swaps_SYMBOL_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930"}, "created_at": 1662493243.148052, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_IN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_SYMBOL_IN", "column_name": "SYMBOL_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR", "alias": "ez_swaps_SYMBOL_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f"}, "created_at": 1662493243.1537, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_OUT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_SYMBOL_OUT", "column_name": "SYMBOL_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps_TX_TO"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps_TX_TO.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TX_TO", "alias": "ez_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TX_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.159306, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere TX_TO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps_TX_TO", "column_name": "TX_TO", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_TO", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943"}, "created_at": 1662493243.161407, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_TO, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_TX_TO", "column_name": "TX_TO", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR", "alias": "ez_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4"}, "created_at": 1662493243.166761, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_PLATFORM", "column_name": "PLATFORM", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT", "alias": "ez_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648"}, "created_at": 1662493243.1734579, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps__LOG_ID"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps__LOG_ID.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps__LOG_ID", "alias": "ez_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.178025, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps", "column_name": "_LOG_ID", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE", "alias": "ez_swaps_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.1795359, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_sushi", "fqn": ["optimism_models", "sushi", "not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS", "alias": "ez_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.18105, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.sushi.ez_swaps\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_sushi.ez_swaps_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c"}, "created_at": 1662493243.182784, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["optimism_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725"}, "created_at": 1662493243.1886091, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_sushi", "fqn": ["optimism_models", "sushi", "dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID", "alias": "ez_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/sushi/sushi__ez_swaps.yml/dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662493243.193929, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from OPTIMISM_DEV.sushi.ez_swaps\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_sushi.ez_swaps", "column_name": null, "file_key_name": "models.sushi__ez_swaps"}, "model.optimism_models.bronze__submission_hashes": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"l1_submission_tx_hash\"\n) }}\n\nSELECT\n    l1_submission_tx_hash,\n    l1_submission_block_number,\n    l1_submission_block_timestamp,\n    l1_submission_batch_index,\n    l1_submission_batch_root,\n    l1_submission_size,\n    l1_submission_prev_total_elements,\n    sub_min_block,\n    sub_max_block,\n    _inserted_timestamp\nFROM\n    {{ source(\n        'ethereum_silver',\n        'optimism_submission_hashes'\n    ) }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.optimism_models.ethereum_silver.optimism_submission_hashes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "l1_submission_tx_hash", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "bronze", "fqn": ["optimism_models", "bronze", "bronze__submission_hashes"], "unique_id": "model.optimism_models.bronze__submission_hashes", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "bronze/bronze__submission_hashes.sql", "original_file_path": "models/bronze/bronze__submission_hashes.sql", "name": "bronze__submission_hashes", "alias": "submission_hashes", "checksum": {"name": "sha256", "checksum": "33519ac2d824142ebf58eb974c4c87f81d56cf7d368c03c8bac1caa8924f560d"}, "tags": [], "refs": [], "sources": [["ethereum_silver", "optimism_submission_hashes"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/bronze/bronze__submission_hashes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "l1_submission_tx_hash"}, "created_at": 1662497967.1069949, "compiled_sql": "\n\nSELECT\n    l1_submission_tx_hash,\n    l1_submission_block_number,\n    l1_submission_block_timestamp,\n    l1_submission_batch_index,\n    l1_submission_batch_root,\n    l1_submission_size,\n    l1_submission_prev_total_elements,\n    sub_min_block,\n    sub_max_block,\n    _inserted_timestamp\nFROM\n    ethereum.silver.optimism_submission_hashes\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            OPTIMISM_DEV.bronze.submission_hashes\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.bronze.submission_hashes"}, "model.optimism_models.bronze__state_hashes": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"state_tx_hash\"\n) }}\n\nSELECT\n    state_tx_hash,\n    state_block_number,\n    state_block_timestamp,\n    state_batch_index,\n    state_batch_root,\n    state_batch_size,\n    state_prev_total_elements,\n    state_min_block,\n    state_max_block,\n    _inserted_timestamp\nFROM\n    {{ source(\n        'ethereum_silver',\n        'optimism_state_hashes'\n    ) }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.optimism_models.ethereum_silver.optimism_state_hashes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "state_tx_hash", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "bronze", "fqn": ["optimism_models", "bronze", "bronze__state_hashes"], "unique_id": "model.optimism_models.bronze__state_hashes", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "bronze/bronze__state_hashes.sql", "original_file_path": "models/bronze/bronze__state_hashes.sql", "name": "bronze__state_hashes", "alias": "state_hashes", "checksum": {"name": "sha256", "checksum": "ac583f1f5f40cf1d89a0055013a3300dee8fd7d594ee3cb67e6e7fa7a9bf933d"}, "tags": [], "refs": [], "sources": [["ethereum_silver", "optimism_state_hashes"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/bronze/bronze__state_hashes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "state_tx_hash"}, "created_at": 1662497967.1272829, "compiled_sql": "\n\nSELECT\n    state_tx_hash,\n    state_block_number,\n    state_block_timestamp,\n    state_batch_index,\n    state_batch_root,\n    state_batch_size,\n    state_prev_total_elements,\n    state_min_block,\n    state_max_block,\n    _inserted_timestamp\nFROM\n    ethereum.silver.optimism_state_hashes\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            OPTIMISM_DEV.bronze.state_hashes\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.bronze.state_hashes"}, "model.optimism_models.core__fact_l1_state_root_submissions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    state_tx_hash AS l1_state_root_tx_hash,\n    state_block_number AS l1_block_number,\n    state_block_timestamp AS l1_block_timestamp,\n    state_batch_index AS l1_state_root_batch_index,\n    state_batch_root AS batch_root,\n    state_batch_size AS batch_size,\n    state_prev_total_elements AS prev_total_elements,\n    state_min_block AS op_min_block,\n    state_max_block AS op_max_block\nFROM\n    {{ ref('bronze__state_hashes') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.bronze__state_hashes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__fact_l1_state_root_submissions"], "unique_id": "model.optimism_models.core__fact_l1_state_root_submissions", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__fact_l1_state_root_submissions.sql", "original_file_path": "models/gold/core__fact_l1_state_root_submissions.sql", "name": "core__fact_l1_state_root_submissions", "alias": "fact_l1_state_root_submissions", "checksum": {"name": "sha256", "checksum": "b107e5c4575f80b659824009d4ac9a825bb2e611c944771e9931f5d5de7ff979"}, "tags": [], "refs": [["bronze__state_hashes"]], "sources": [], "metrics": [], "description": "Contains details on the state root batch submission to L1.", "columns": {"L1_STATE_ROOT_TX_HASH": {"name": "L1_STATE_ROOT_TX_HASH", "description": "The L1 tx hash of when this block was included in the Ethereum state root.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_BLOCK_NUMBER": {"name": "L1_BLOCK_NUMBER", "description": "The Ethereum block number that contained the batch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_BLOCK_TIMESTAMP": {"name": "L1_BLOCK_TIMESTAMP", "description": "The timestamp of the Ethereum block that contained this batch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_STATE_ROOT_BATCH_INDEX": {"name": "L1_STATE_ROOT_BATCH_INDEX", "description": "The batch index of when this block was included in the Ethereum state root.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BATCH_ROOT": {"name": "BATCH_ROOT", "description": "Root of batch, either for sumbission or state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BATCH_SIZE": {"name": "BATCH_SIZE", "description": "Total Optimism Txs included within batch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_TOTAL_ELEMENTS": {"name": "PREV_TOTAL_ELEMENTS", "description": "Confirmed blocks prior to this batch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OP_MIN_BLOCK": {"name": "OP_MIN_BLOCK", "description": "The min block on Optimism this batch relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OP_MAX_BLOCK": {"name": "OP_MAX_BLOCK", "description": "The max block on Optimism this batch relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__fact_l1_state_root_submissions.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_l1_state_root_submissions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662564602.843513, "compiled_sql": "\n\nSELECT\n    state_tx_hash AS l1_state_root_tx_hash,\n    state_block_number AS l1_block_number,\n    state_block_timestamp AS l1_block_timestamp,\n    state_batch_index AS l1_state_root_batch_index,\n    state_batch_root AS batch_root,\n    state_batch_size AS batch_size,\n    state_prev_total_elements AS prev_total_elements,\n    state_min_block AS op_min_block,\n    state_max_block AS op_max_block\nFROM\n    OPTIMISM_DEV.bronze.state_hashes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.fact_l1_state_root_submissions"}, "model.optimism_models.core__fact_l1_submissions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    l1_submission_tx_hash,\n    l1_submission_block_number AS l1_block_number,\n    l1_submission_block_timestamp AS l1_block_timestamp,\n    l1_submission_batch_index AS l1_submission_batch_index,\n    l1_submission_batch_root AS batch_root,\n    l1_submission_size AS batch_size,\n    l1_submission_prev_total_elements AS prev_total_elements,\n    sub_min_block AS op_min_block,\n    sub_max_block AS op_max_block\nFROM\n    {{ ref('bronze__submission_hashes') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.bronze__submission_hashes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__fact_l1_submissions"], "unique_id": "model.optimism_models.core__fact_l1_submissions", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__fact_l1_submissions.sql", "original_file_path": "models/gold/core__fact_l1_submissions.sql", "name": "core__fact_l1_submissions", "alias": "fact_l1_submissions", "checksum": {"name": "sha256", "checksum": "ea42920c2b9561c8c2fed9698794dcf1cdc5eea760623ba55ee6dd82e7c36406"}, "tags": [], "refs": [["bronze__submission_hashes"]], "sources": [], "metrics": [], "description": "Contains details on the batch submission to L1.", "columns": {"L1_SUBMISSION_ROOT_TX_HASH": {"name": "L1_SUBMISSION_ROOT_TX_HASH", "description": "The L1 tx hash of when this block was submitted to L1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_BLOCK_NUMBER": {"name": "L1_BLOCK_NUMBER", "description": "The Ethereum block number that contained the batch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_BLOCK_TIMESTAMP": {"name": "L1_BLOCK_TIMESTAMP", "description": "The timestamp of the Ethereum block that contained this batch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_SUBMISSION_BATCH_INDEX": {"name": "L1_SUBMISSION_BATCH_INDEX", "description": "The batch index of when this block was submitted to L1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BATCH_ROOT": {"name": "BATCH_ROOT", "description": "Root of batch, either for sumbission or state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BATCH_SIZE": {"name": "BATCH_SIZE", "description": "Total Optimism Txs included within batch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_TOTAL_ELEMENTS": {"name": "PREV_TOTAL_ELEMENTS", "description": "Confirmed blocks prior to this batch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OP_MIN_BLOCK": {"name": "OP_MIN_BLOCK", "description": "The min block on Optimism this batch relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OP_MAX_BLOCK": {"name": "OP_MAX_BLOCK", "description": "The max block on Optimism this batch relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__fact_l1_submissions.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_l1_submissions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662564602.846256, "compiled_sql": "\n\nSELECT\n    l1_submission_tx_hash,\n    l1_submission_block_number AS l1_block_number,\n    l1_submission_block_timestamp AS l1_block_timestamp,\n    l1_submission_batch_index AS l1_submission_batch_index,\n    l1_submission_batch_root AS batch_root,\n    l1_submission_size AS batch_size,\n    l1_submission_prev_total_elements AS prev_total_elements,\n    sub_min_block AS op_min_block,\n    sub_max_block AS op_max_block\nFROM\n    OPTIMISM_DEV.bronze.submission_hashes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.fact_l1_submissions"}, "model.optimism_models.core__fact_transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    block_hash,\n    tx_hash,\n    nonce,\n    POSITION,\n    origin_function_signature,\n    from_address,\n    to_address,\n    eth_value,\n    tx_fee,\n    gas_price,\n    gas_limit,\n    gas_used,\n    l1_gas_price,\n    l1_gas_used,\n    l1_fee_scalar,\n    l1_submission_batch_index,\n    l1_submission_tx_hash,\n    l1_state_root_batch_index,\n    l1_state_root_tx_hash,\n    cumulative_Gas_Used,\n    input_data,\n    status,\n    tx_json\nFROM\n    {{ ref('silver__transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__fact_transactions"], "unique_id": "model.optimism_models.core__fact_transactions", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__fact_transactions.sql", "original_file_path": "models/gold/core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "2e15fec9cb4394fc97f4cd1a1f3f77ca58b71393e6576ed753a84d9ea3682430"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "This table contains transaction level data for the Optimism Blockchain. Each transaction will have a unique transaction hash, along with transactions fees and a ETH value transferred when applicable. Transactions may be native ETH transfers or interactions with contract addresses. For more information, please see [The Ethereum Organization - Transactions](https://ethereum.org/en/developers/docs/transactions/)", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Block hash is a unique 66-character identifier that is generate when a block is produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "The number of transactions sent from a given address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "The position of the transaction within the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this transaction. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_VALUE": {"name": "ETH_VALUE", "description": "The value transacted in ETH.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "Amount paid to validate the transaction in ETH.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "Cost per unit of gas in Gwei.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "Maximum amount of gas allocated for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Gas used by transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_GAS_PRICE": {"name": "L1_GAS_PRICE", "description": "The gas price for L1 transactions when the transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_GAS_USED": {"name": "L1_GAS_USED", "description": "The gas used on L1 to publish the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_FEE_SCALAR": {"name": "L1_FEE_SCALAR", "description": "This value covers the change in L1 gas price between the time the transaction is submitted and when it is published.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_STATE_ROOT_TX_HASH": {"name": "L1_STATE_ROOT_TX_HASH", "description": "The L1 tx hash of when this block was included in the Ethereum state root.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_STATE_ROOT_BATCH_INDEX": {"name": "L1_STATE_ROOT_BATCH_INDEX", "description": "The batch index of when this block was included in the Ethereum state root.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_SUBMISSION_TX_HASH": {"name": "L1_SUBMISSION_TX_HASH", "description": "The L1 tx hash of when this block was submitted to L1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_SUBMISSION_BATCH_INDEX": {"name": "L1_SUBMISSION_BATCH_INDEX", "description": "The batch index of when this block was submitted to L1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUMULATIVE_GAS_USED": {"name": "CUMULATIVE_GAS_USED", "description": "The total amount of gas used when this transaction was executed in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_JSON": {"name": "TX_JSON", "description": "This JSON column contains the transaction details, including event logs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INPUT_DATA": {"name": "INPUT_DATA", "description": "This column contains additional data for this transaction, and is commonly used as part of a contract interaction or as a message to the recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of the contract call.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__fact_transactions.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662564602.852789, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    block_hash,\n    tx_hash,\n    nonce,\n    POSITION,\n    origin_function_signature,\n    from_address,\n    to_address,\n    eth_value,\n    tx_fee,\n    gas_price,\n    gas_limit,\n    gas_used,\n    l1_gas_price,\n    l1_gas_used,\n    l1_fee_scalar,\n    l1_submission_batch_index,\n    l1_submission_tx_hash,\n    l1_state_root_batch_index,\n    l1_state_root_tx_hash,\n    cumulative_Gas_Used,\n    input_data,\n    status,\n    tx_json\nFROM\n    OPTIMISM_DEV.silver.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.fact_transactions"}, "model.optimism_models.core__fact_blocks": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    network,\n    blockchain,\n    tx_count,\n    difficulty,\n    total_difficulty,\n    extra_data,\n    gas_limit,\n    gas_used,\n    HASH,\n    parent_hash,\n    receipts_root,\n    sha3_uncles,\n    SIZE,\n    uncle_blocks,\n    block_header_json,\n    l1_state_root_tx_hash,\n    l1_state_root_batch_index,\n    l1_submission_tx_hash,\n    l1_submission_batch_index\nFROM\n    {{ ref('silver__blocks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "core", "fqn": ["optimism_models", "gold", "core__fact_blocks"], "unique_id": "model.optimism_models.core__fact_blocks", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "gold/core__fact_blocks.sql", "original_file_path": "models/gold/core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "f5a3b064976726d5e37189c20d85da2ef0e2a93975483e9104d83520187fe301"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "This table contains block level data for the Optimism Blockchain. This table can be used to analyze trends at a block level, for example gas fees vs. total transactions over time. For more information on EVM transactions, please see [Etherscan Resources](https://etherscan.io/directory/Learning_Resources/Ethereum) or [The Ethereum Organization](https://ethereum.org/en/developers/docs/blocks/)", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "The network on the blockchain used by a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain on which transactions are being confirmed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "Total number of transactions within a block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIFFICULTY": {"name": "DIFFICULTY", "description": "The effort required to mine the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_DIFFICULTY": {"name": "TOTAL_DIFFICULTY", "description": "Total difficulty of the chain at a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA_DATA": {"name": "EXTRA_DATA", "description": "Any data included by the validator for a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "Total gas limit provided by all transactions in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Total gas used in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "The hash of the block header for a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_HASH": {"name": "PARENT_HASH", "description": "The hash of the block from which a given block is generated. Also known as the parent block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS_ROOT": {"name": "RECEIPTS_ROOT", "description": "The root of the state trie.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHA3_UNCLES": {"name": "SHA3_UNCLES", "description": "The mechanism which Ethereum Javascript RLP encodes an empty string.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIZE": {"name": "SIZE", "description": "Block size, which is determined by a given block's gas limit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNCLE_BLOCKS": {"name": "UNCLE_BLOCKS", "description": "Uncle blocks occur when two blocks are mined and broadcasted at the same time, with the same block number. The block validated across the most nodes will be added to the primary chain, and the other one becomes an uncle block. Miners do receive rewards for uncle blocks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEADER_JSON": {"name": "BLOCK_HEADER_JSON", "description": "This JSON column contains the block header details.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_STATE_ROOT_TX_HASH": {"name": "L1_STATE_ROOT_TX_HASH", "description": "The L1 tx hash of when this block was included in the Ethereum state root.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_STATE_ROOT_BATCH_INDEX": {"name": "L1_STATE_ROOT_BATCH_INDEX", "description": "The batch index of when this block was included in the Ethereum state root.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_SUBMISSION_TX_HASH": {"name": "L1_SUBMISSION_TX_HASH", "description": "The L1 tx hash of when this block was submitted to L1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_SUBMISSION_BATCH_INDEX": {"name": "L1_SUBMISSION_BATCH_INDEX", "description": "The batch index of when this block was submitted to L1.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/gold/core__fact_blocks.yml", "compiled_path": "target/compiled/optimism_models/models/gold/core__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1662564602.858387, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    network,\n    blockchain,\n    tx_count,\n    difficulty,\n    total_difficulty,\n    extra_data,\n    gas_limit,\n    gas_used,\n    HASH,\n    parent_hash,\n    receipts_root,\n    sha3_uncles,\n    SIZE,\n    uncle_blocks,\n    block_header_json,\n    l1_state_root_tx_hash,\n    l1_state_root_batch_index,\n    l1_submission_tx_hash,\n    l1_submission_batch_index\nFROM\n    OPTIMISM_DEV.silver.blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.core.fact_blocks"}, "model.optimism_models.silver__transactions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"tx_hash\",\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base_table AS (\n\n    SELECT\n        block_timestamp,\n        block_id :: INTEGER AS block_number,\n        tx_id :: STRING AS tx_hash,\n        udf_hex_to_int(\n            tx :nonce :: STRING\n        ) :: INTEGER AS nonce,\n        tx_block_index :: INTEGER AS POSITION,\n        tx :from :: STRING AS from_address,\n        tx :to :: STRING AS to_address,\n        (\n            udf_hex_to_int(\n                tx :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n        ) :: FLOAT AS eth_value,\n        tx :blockHash :: STRING AS block_hash,\n        (\n            udf_hex_to_int(\n                tx :gasPrice :: STRING\n            )\n        ) :: FLOAT AS gas_price,\n        udf_hex_to_int(\n            tx :gas :: STRING\n        ) :: INTEGER AS gas_limit,\n        tx :input :: STRING AS DATA,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS status,\n        udf_hex_to_int(\n            tx :receipt :gasUsed :: STRING\n        ) :: INTEGER AS gas_used,\n        udf_hex_to_int(\n            tx :receipt :cumulativeGasUsed :: STRING\n        ) :: INTEGER AS cumulative_Gas_Used,\n        udf_hex_to_int(\n            tx :receipt :effectiveGasPrice :: STRING\n        ) :: INTEGER AS effective_Gas_Price,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp,\n        OBJECT_DELETE(\n            tx,\n            'traces'\n        ) AS tx_json,\n        COALESCE(\n            udf_hex_to_int(\n                tx :receipt :l1Fee :: STRING\n            ) :: FLOAT,\n            0\n        ) AS l1_fee,\n        COALESCE(\n            tx :receipt :l1FeeScalar :: INTEGER,\n            0\n        ) :: FLOAT AS l1_fee_scalar,\n        COALESCE(\n            udf_hex_to_int(\n                tx :receipt :l1GasPrice :: STRING\n            ) :: FLOAT,\n            0\n        ) AS l1_gas_price,\n        COALESCE(\n            udf_hex_to_int(\n                tx :receipt :l1GasUsed :: STRING\n            ) :: FLOAT,\n            0\n        ) AS l1_gas_used,\n        ((gas_used * gas_price) + (l1_gas_price * l1_gas_used * l1_fee_scalar)) / pow(\n            10,\n            18\n        ) AS tx_fee\n    FROM\n        {{ ref('bronze__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR block_id IN (\n        SELECT\n            block_number\n        FROM\n            {{ this }}\n        WHERE\n            state_tx_hash IS NULL\n    )\n{% endif %}\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    nonce,\n    POSITION,\n    SUBSTR(\n        DATA,\n        1,\n        10\n    ) AS origin_function_signature,\n    from_address,\n    to_address,\n    eth_value,\n    block_hash,\n    gas_price / pow(\n        10,\n        9\n    ) AS gas_price,\n    gas_limit,\n    DATA AS input_data,\n    status,\n    gas_used,\n    cumulative_Gas_Used,\n    effective_Gas_Price,\n    l1_gas_price / pow(\n        10,\n        9\n    ) AS l1_gas_price,\n    l1_gas_used,\n    l1_fee_scalar,\n    tx_fee,\n    ingested_at,\n    base_table._inserted_timestamp AS _inserted_timestamp,\n    tx_json,\n    state_tx_hash AS l1_state_root_tx_hash,\n    state_batch_index AS l1_state_root_batch_index,\n    l1_submission_tx_hash,\n    l1_submission_batch_index AS l1_submission_batch_index\nFROM\n    base_table\n    LEFT JOIN {{ ref('bronze__state_hashes') }}\n    ON block_number BETWEEN state_min_block\n    AND state_max_block\n    LEFT JOIN {{ ref('bronze__submission_hashes') }}\n    ON block_number BETWEEN sub_min_block\n    AND sub_max_block qualify(ROW_NUMBER() over(PARTITION BY tx_hash\nORDER BY\n    base_table._inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.bronze__transactions", "model.optimism_models.bronze__state_hashes", "model.optimism_models.bronze__submission_hashes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_hash", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver", "silver__transactions"], "unique_id": "model.optimism_models.silver__transactions", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "9bb8bd01a0992529622ccadf4cfe243fa94aeb60154dc50cec2572cfe3135771"}, "tags": [], "refs": [["bronze__transactions"], ["bronze__state_hashes"], ["bronze__submission_hashes"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_VALUE": {"name": "ETH_VALUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INPUT_DATA": {"name": "INPUT_DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUMULATIVE_GAS_USED": {"name": "CUMULATIVE_GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_JSON": {"name": "TX_JSON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_STATE_ROOT_TX_HASH": {"name": "L1_STATE_ROOT_TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_STATE_ROOT_BATCH_INDEX": {"name": "L1_STATE_ROOT_BATCH_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_SUBMISSION_BATCH_INDEX": {"name": "L1_SUBMISSION_BATCH_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_SUBMISSION_TX_HASH": {"name": "L1_SUBMISSION_TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/silver/silver__transactions.yml", "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "tx_hash", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662567620.7346728, "compiled_sql": "\n\nWITH base_table AS (\n\n    SELECT\n        block_timestamp,\n        block_id :: INTEGER AS block_number,\n        tx_id :: STRING AS tx_hash,\n        udf_hex_to_int(\n            tx :nonce :: STRING\n        ) :: INTEGER AS nonce,\n        tx_block_index :: INTEGER AS POSITION,\n        tx :from :: STRING AS from_address,\n        tx :to :: STRING AS to_address,\n        (\n            udf_hex_to_int(\n                tx :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n        ) :: FLOAT AS eth_value,\n        tx :blockHash :: STRING AS block_hash,\n        (\n            udf_hex_to_int(\n                tx :gasPrice :: STRING\n            )\n        ) :: FLOAT AS gas_price,\n        udf_hex_to_int(\n            tx :gas :: STRING\n        ) :: INTEGER AS gas_limit,\n        tx :input :: STRING AS DATA,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS status,\n        udf_hex_to_int(\n            tx :receipt :gasUsed :: STRING\n        ) :: INTEGER AS gas_used,\n        udf_hex_to_int(\n            tx :receipt :cumulativeGasUsed :: STRING\n        ) :: INTEGER AS cumulative_Gas_Used,\n        udf_hex_to_int(\n            tx :receipt :effectiveGasPrice :: STRING\n        ) :: INTEGER AS effective_Gas_Price,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp,\n        OBJECT_DELETE(\n            tx,\n            'traces'\n        ) AS tx_json,\n        COALESCE(\n            udf_hex_to_int(\n                tx :receipt :l1Fee :: STRING\n            ) :: FLOAT,\n            0\n        ) AS l1_fee,\n        COALESCE(\n            tx :receipt :l1FeeScalar :: INTEGER,\n            0\n        ) :: FLOAT AS l1_fee_scalar,\n        COALESCE(\n            udf_hex_to_int(\n                tx :receipt :l1GasPrice :: STRING\n            ) :: FLOAT,\n            0\n        ) AS l1_gas_price,\n        COALESCE(\n            udf_hex_to_int(\n                tx :receipt :l1GasUsed :: STRING\n            ) :: FLOAT,\n            0\n        ) AS l1_gas_used,\n        ((gas_used * gas_price) + (l1_gas_price * l1_gas_used * l1_fee_scalar)) / pow(\n            10,\n            18\n        ) AS tx_fee\n    FROM\n        OPTIMISM_DEV.bronze.transactions\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            OPTIMISM_DEV.silver.transactions\n    )\n    OR block_id IN (\n        SELECT\n            block_number\n        FROM\n            OPTIMISM_DEV.silver.transactions\n        WHERE\n            state_tx_hash IS NULL\n    )\n\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    nonce,\n    POSITION,\n    SUBSTR(\n        DATA,\n        1,\n        10\n    ) AS origin_function_signature,\n    from_address,\n    to_address,\n    eth_value,\n    block_hash,\n    gas_price / pow(\n        10,\n        9\n    ) AS gas_price,\n    gas_limit,\n    DATA AS input_data,\n    status,\n    gas_used,\n    cumulative_Gas_Used,\n    effective_Gas_Price,\n    l1_gas_price / pow(\n        10,\n        9\n    ) AS l1_gas_price,\n    l1_gas_used,\n    l1_fee_scalar,\n    tx_fee,\n    ingested_at,\n    base_table._inserted_timestamp AS _inserted_timestamp,\n    tx_json,\n    state_tx_hash AS l1_state_root_tx_hash,\n    state_batch_index AS l1_state_root_batch_index,\n    l1_submission_tx_hash,\n    l1_submission_batch_index AS l1_submission_batch_index\nFROM\n    base_table\n    LEFT JOIN OPTIMISM_DEV.bronze.state_hashes\n    ON block_number BETWEEN state_min_block\n    AND state_max_block\n    LEFT JOIN OPTIMISM_DEV.bronze.submission_hashes\n    ON block_number BETWEEN sub_min_block\n    AND sub_max_block qualify(ROW_NUMBER() over(PARTITION BY tx_hash\nORDER BY\n    base_table._inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.transactions"}, "test.optimism_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_NUMBER", "alias": "transactions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.74157, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "transactions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265"}, "created_at": 1662567620.7436259, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_TIMESTAMP", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.755478, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb"}, "created_at": 1662567620.757204, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.transactions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb"}, "created_at": 1662567620.7763252, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_TX_HASH.8a2cc32062": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__transactions_TX_HASH.8a2cc32062", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_TX_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_HASH", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.7804968, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec"}, "created_at": 1662567620.7822652, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.transactions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transactions_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_NONCE.3eac435cf9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_NONCE"], "unique_id": "test.optimism_models.not_null_silver__transactions_NONCE.3eac435cf9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_NONCE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_NONCE", "alias": "transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.798615, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_NONCE", "column_name": "NONCE", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT", "alias": "transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f"}, "created_at": 1662567620.800082, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NONCE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_NONCE", "column_name": "NONCE", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_POSITION.6be7c293c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POSITION", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_POSITION"], "unique_id": "test.optimism_models.not_null_silver__transactions_POSITION.6be7c293c7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_POSITION.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_POSITION", "alias": "transactions_POSITION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_POSITION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.8041449, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere POSITION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_POSITION", "column_name": "POSITION", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "POSITION", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER", "alias": "transactions_POSITION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d"}, "created_at": 1662567620.805584, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POSITION'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_POSITION", "column_name": "POSITION", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_FROM_ADDRESS.002109da43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_FROM_ADDRESS"], "unique_id": "test.optimism_models.not_null_silver__transactions_FROM_ADDRESS.002109da43", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_FROM_ADDRESS", "alias": "transactions_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.809336, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transactions_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787"}, "created_at": 1662567620.810957, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.transactions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transactions_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(where=\"TO_ADDRESS IS NOT NULL\",alias=\"dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TO_ADDRESS IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transactions_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TO_ADDRESS IS NOT NULL", "alias": "dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14"}, "created_at": 1662567620.8160372, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from OPTIMISM_DEV.silver.transactions where TO_ADDRESS IS NOT NULL) dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transactions_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ETH_VALUE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_ETH_VALUE"], "unique_id": "test.optimism_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_ETH_VALUE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_ETH_VALUE", "alias": "transactions_ETH_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_ETH_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.820468, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere ETH_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_ETH_VALUE", "column_name": "ETH_VALUE", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_BLOCK_HASH"], "unique_id": "test.optimism_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_HASH", "alias": "transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.8219829, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_", "alias": "transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef"}, "created_at": 1662567620.823741, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(BLOCK_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.transactions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transactions_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_GAS_PRICE.9ee195e584": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_GAS_PRICE"], "unique_id": "test.optimism_models.not_null_silver__transactions_GAS_PRICE.9ee195e584", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_GAS_PRICE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_PRICE", "alias": "transactions_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.828023, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_GAS_PRICE", "column_name": "GAS_PRICE", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT", "alias": "transactions_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39"}, "created_at": 1662567620.8299038, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_GAS_PRICE", "column_name": "GAS_PRICE", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_GAS_LIMIT"], "unique_id": "test.optimism_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_GAS_LIMIT.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_LIMIT", "alias": "transactions_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_LIMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.835215, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere GAS_LIMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_GAS_LIMIT", "column_name": "GAS_LIMIT", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INPUT_DATA", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_INPUT_DATA"], "unique_id": "test.optimism_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_INPUT_DATA.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_INPUT_DATA", "alias": "transactions_INPUT_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_INPUT_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.8370528, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere INPUT_DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_INPUT_DATA", "column_name": "INPUT_DATA", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_STATUS.42a484ef7a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_STATUS"], "unique_id": "test.optimism_models.not_null_silver__transactions_STATUS.42a484ef7a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_STATUS.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_STATUS", "alias": "transactions_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_STATUS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.838956, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_STATUS", "column_name": "STATUS", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["SUCCESS", "FAIL"], "column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL", "alias": "transactions_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c"}, "created_at": 1662567620.84051, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        STATUS as value_field\n\n    from OPTIMISM_DEV.silver.transactions\n    \n\n),\nset_values as (\n\n    select\n        cast('SUCCESS' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('FAIL' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_set_silver.transactions_STATUS", "column_name": "STATUS", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_GAS_USED.1c943486c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_GAS_USED"], "unique_id": "test.optimism_models.not_null_silver__transactions_GAS_USED.1c943486c0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_GAS_USED.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_USED", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.848862, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07"}, "created_at": 1662567620.850546, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUMULATIVE_GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_CUMULATIVE_GAS_USED"], "unique_id": "test.optimism_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_CUMULATIVE_GAS_USED.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_CUMULATIVE_GAS_USED", "alias": "transactions_CUMULATIVE_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_CUMULATIVE_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.854502, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere CUMULATIVE_GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_CUMULATIVE_GAS_USED", "column_name": "CUMULATIVE_GAS_USED", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CUMULATIVE_GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT", "alias": "transactions_CUMULATIVE_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed"}, "created_at": 1662567620.85618, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CUMULATIVE_GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_CUMULATIVE_GAS_USED", "column_name": "CUMULATIVE_GAS_USED", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_TX_FEE.f2f0cdc085": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_TX_FEE"], "unique_id": "test.optimism_models.not_null_silver__transactions_TX_FEE.f2f0cdc085", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_TX_FEE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_FEE", "alias": "transactions_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.860495, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere TX_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_TX_FEE", "column_name": "TX_FEE", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT", "alias": "transactions_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35"}, "created_at": 1662567620.862261, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_TX_FEE", "column_name": "TX_FEE", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_TX_JSON.c989b71e6a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_JSON", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_TX_JSON"], "unique_id": "test.optimism_models.not_null_silver__transactions_TX_JSON.c989b71e6a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_TX_JSON.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_JSON", "alias": "transactions_TX_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_JSON.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.866493, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere TX_JSON is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_TX_JSON", "column_name": "TX_JSON", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "TX_JSON", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT", "alias": "transactions_TX_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed"}, "created_at": 1662567620.868021, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_JSON'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_TX_JSON", "column_name": "TX_JSON", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_INGESTED_AT"], "unique_id": "test.optimism_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_INGESTED_AT.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_INGESTED_AT", "alias": "transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.8718982, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ", "alias": "transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3"}, "created_at": 1662567620.873399, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_FEE_SCALAR' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.optimism_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE", "alias": "transactions_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567620.8772962, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.transactions\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_TX_HASH.bdc6c0317a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_STATE_ROOT_TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_L1_STATE_ROOT_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_TX_HASH.bdc6c0317a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_L1_STATE_ROOT_TX_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_L1_STATE_ROOT_TX_HASH", "alias": "transactions_L1_STATE_ROOT_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_L1_STATE_ROOT_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662567620.879178, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\nwhere L1_STATE_ROOT_TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_L1_STATE_ROOT_TX_HASH", "column_name": "L1_STATE_ROOT_TX_HASH", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_BATCH_INDEX.d699a79eb7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_STATE_ROOT_BATCH_INDEX", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_L1_STATE_ROOT_BATCH_INDEX"], "unique_id": "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_BATCH_INDEX.d699a79eb7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_L1_STATE_ROOT_BATCH_INDEX.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_L1_STATE_ROOT_BATCH_INDEX", "alias": "transactions_L1_STATE_ROOT_BATCH_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_L1_STATE_ROOT_BATCH_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662567620.881094, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\nwhere L1_STATE_ROOT_BATCH_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_L1_STATE_ROOT_BATCH_INDEX", "column_name": "L1_STATE_ROOT_BATCH_INDEX", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_BATCH_INDEX.7393916169": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_SUBMISSION_BATCH_INDEX", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_L1_SUBMISSION_BATCH_INDEX"], "unique_id": "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_BATCH_INDEX.7393916169", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_L1_SUBMISSION_BATCH_INDEX.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_L1_SUBMISSION_BATCH_INDEX", "alias": "transactions_L1_SUBMISSION_BATCH_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_L1_SUBMISSION_BATCH_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662567620.883125, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\nwhere L1_SUBMISSION_BATCH_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_L1_SUBMISSION_BATCH_INDEX", "column_name": "L1_SUBMISSION_BATCH_INDEX", "file_key_name": "models.silver__transactions"}, "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_TX_HASH.752daa2372": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_SUBMISSION_TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__transactions_L1_SUBMISSION_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_TX_HASH.752daa2372", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__transactions_L1_SUBMISSION_TX_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_L1_SUBMISSION_TX_HASH", "alias": "transactions_L1_SUBMISSION_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/not_null_silver__transactions_L1_SUBMISSION_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662567620.885128, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\nwhere L1_SUBMISSION_TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.transactions_L1_SUBMISSION_TX_HASH", "column_name": "L1_SUBMISSION_TX_HASH", "file_key_name": "models.silver__transactions"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_HASH"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32"}, "created_at": 1662567620.887375, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_HASH\n    from OPTIMISM_DEV.silver.transactions\n    group by TX_HASH\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.transactions_TX_HASH", "column_name": null, "file_key_name": "models.silver__transactions"}, "test.optimism_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"partition_by": ["BLOCK_NUMBER"], "column_name": "POSITION", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.optimism_models.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "sequence_gaps_silver", "fqn": ["optimism_models", "silver", "sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER"], "unique_id": "test.optimism_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER", "alias": "transactions_POSITION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__transactions.yml/sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662567620.8976462, "compiled_sql": "WITH source AS (\n    SELECT\n        BLOCK_NUMBER,\n        POSITION,\n        LAG(\n            POSITION,\n            1\n        ) over (\n            PARTITION BY BLOCK_NUMBER\n            ORDER BY\n                POSITION ASC\n        ) AS prev_POSITION\n    FROM\n        (select * from OPTIMISM_DEV.silver.transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    BLOCK_NUMBER,\n    prev_POSITION,\n    POSITION,\n    POSITION - prev_POSITION\n    - 1 AS gap\nFROM\n    source\nWHERE\n    POSITION - prev_POSITION <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.sequence_gaps_silver.transactions_POSITION", "column_name": null, "file_key_name": "models.silver__transactions"}, "model.optimism_models.silver__blocks": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"block_number\",\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base_tables AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__blocks') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n)\nSELECT\n    block_id :: INTEGER AS block_number,\n    block_timestamp :: TIMESTAMP AS block_timestamp,\n    network :: STRING AS network,\n    chain_id :: STRING AS blockchain,\n    tx_count :: INTEGER AS tx_count,\n    udf_hex_to_int(\n        header :difficulty :: STRING\n    ) :: INTEGER AS difficulty,\n    udf_hex_to_int(\n        header :totalDifficulty :: STRING\n    ) :: INTEGER AS total_difficulty,\n    header: extraData :: STRING AS extra_data,\n    udf_hex_to_int(\n        header :gasLimit :: STRING\n    ) :: INTEGER AS gas_limit,\n    udf_hex_to_int(\n        header :gasUsed :: STRING\n    ) :: INTEGER AS gas_used,\n    header: \"hash\" :: STRING AS HASH,\n    header: parentHash :: STRING AS parent_hash,\n    header: receiptsRoot :: STRING AS receipts_root,\n    header: sha3Uncles :: STRING AS sha3_uncles,\n    udf_hex_to_int(\n        header: \"size\" :: STRING\n    ) :: INTEGER AS SIZE,\n    CASE\n        WHEN header: uncles [1] :: STRING IS NOT NULL THEN CONCAT(\n            header: uncles [0] :: STRING,\n            ', ',\n            header: uncles [1] :: STRING\n        )\n        ELSE header: uncles [0] :: STRING\n    END AS uncle_blocks,\n    ingested_at :: TIMESTAMP AS ingested_at,\n    header :: OBJECT AS block_header_json,\n    base_tables._inserted_timestamp :: TIMESTAMP AS _inserted_timestamp,\n    state_tx_hash AS l1_state_root_tx_hash,\n    state_batch_index AS l1_state_root_batch_index,\n    l1_submission_tx_hash,\n    l1_submission_batch_index AS l1_submission_batch_index\nFROM\n    base_tables\n    LEFT JOIN {{ ref('bronze__state_hashes') }}\n    ON block_id BETWEEN state_min_block\n    AND state_max_block\n    LEFT JOIN {{ ref('bronze__submission_hashes') }}\n    ON block_id BETWEEN sub_min_block\n    AND sub_max_block qualify(ROW_NUMBER() over(PARTITION BY block_number\nORDER BY\n    base_tables._inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.optimism_models.bronze__blocks", "model.optimism_models.bronze__state_hashes", "model.optimism_models.bronze__submission_hashes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_number", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "OPTIMISM_DEV", "schema": "silver", "fqn": ["optimism_models", "silver", "silver__blocks"], "unique_id": "model.optimism_models.silver__blocks", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "ecd4fbe085c49e144abb67d5a1aa13b446b33b0dc57b983053adaccae2e0ad0b"}, "tags": [], "refs": [["bronze__blocks"], ["bronze__state_hashes"], ["bronze__submission_hashes"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIFFICULTY": {"name": "DIFFICULTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_DIFFICULTY": {"name": "TOTAL_DIFFICULTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA_DATA": {"name": "EXTRA_DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_HASH": {"name": "PARENT_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS_ROOT": {"name": "RECEIPTS_ROOT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHA3_UNCLES": {"name": "SHA3_UNCLES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIZE": {"name": "SIZE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEADER_JSON": {"name": "BLOCK_HEADER_JSON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_STATE_ROOT_TX_HASH": {"name": "L1_STATE_ROOT_TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_STATE_ROOT_BATCH_INDEX": {"name": "L1_STATE_ROOT_BATCH_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_SUBMISSION_BATCH_INDEX": {"name": "L1_SUBMISSION_BATCH_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_SUBMISSION_TX_HASH": {"name": "L1_SUBMISSION_TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "optimism_models://models/silver/silver__blocks.yml", "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "block_number", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662567739.522733, "compiled_sql": "\n\nWITH base_tables AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        OPTIMISM_DEV.bronze.blocks\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            OPTIMISM_DEV.silver.blocks\n    )\n\n)\nSELECT\n    block_id :: INTEGER AS block_number,\n    block_timestamp :: TIMESTAMP AS block_timestamp,\n    network :: STRING AS network,\n    chain_id :: STRING AS blockchain,\n    tx_count :: INTEGER AS tx_count,\n    udf_hex_to_int(\n        header :difficulty :: STRING\n    ) :: INTEGER AS difficulty,\n    udf_hex_to_int(\n        header :totalDifficulty :: STRING\n    ) :: INTEGER AS total_difficulty,\n    header: extraData :: STRING AS extra_data,\n    udf_hex_to_int(\n        header :gasLimit :: STRING\n    ) :: INTEGER AS gas_limit,\n    udf_hex_to_int(\n        header :gasUsed :: STRING\n    ) :: INTEGER AS gas_used,\n    header: \"hash\" :: STRING AS HASH,\n    header: parentHash :: STRING AS parent_hash,\n    header: receiptsRoot :: STRING AS receipts_root,\n    header: sha3Uncles :: STRING AS sha3_uncles,\n    udf_hex_to_int(\n        header: \"size\" :: STRING\n    ) :: INTEGER AS SIZE,\n    CASE\n        WHEN header: uncles [1] :: STRING IS NOT NULL THEN CONCAT(\n            header: uncles [0] :: STRING,\n            ', ',\n            header: uncles [1] :: STRING\n        )\n        ELSE header: uncles [0] :: STRING\n    END AS uncle_blocks,\n    ingested_at :: TIMESTAMP AS ingested_at,\n    header :: OBJECT AS block_header_json,\n    base_tables._inserted_timestamp :: TIMESTAMP AS _inserted_timestamp,\n    state_tx_hash AS l1_state_root_tx_hash,\n    state_batch_index AS l1_state_root_batch_index,\n    l1_submission_tx_hash,\n    l1_submission_batch_index AS l1_submission_batch_index\nFROM\n    base_tables\n    LEFT JOIN OPTIMISM_DEV.bronze.state_hashes\n    ON block_id BETWEEN state_min_block\n    AND state_max_block\n    LEFT JOIN OPTIMISM_DEV.bronze.submission_hashes\n    ON block_id BETWEEN sub_min_block\n    AND sub_max_block qualify(ROW_NUMBER() over(PARTITION BY block_number\nORDER BY\n    base_tables._inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.silver.blocks"}, "test.optimism_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_BLOCK_NUMBER"], "unique_id": "test.optimism_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_NUMBER", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.528905, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41"}, "created_at": 1662567739.53056, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "unique_id": "test.optimism_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.5411708, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692"}, "created_at": 1662567739.542698, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        OPTIMISM_DEV.silver.blocks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27"}, "created_at": 1662567739.562877, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_NETWORK"], "unique_id": "test.optimism_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_NETWORK.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NETWORK", "alias": "blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_NETWORK.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.56686, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere NETWORK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_NETWORK", "column_name": "NETWORK", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR", "alias": "blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1"}, "created_at": 1662567739.568405, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NETWORK'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_NETWORK", "column_name": "NETWORK", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_BLOCKCHAIN"], "unique_id": "test.optimism_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCKCHAIN", "alias": "blocks_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.572521, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR", "alias": "blocks_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d"}, "created_at": 1662567739.574152, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_TX_COUNT.34525b51e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_TX_COUNT"], "unique_id": "test.optimism_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TX_COUNT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.578047, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7"}, "created_at": 1662567739.5795672, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_COUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_DIFFICULTY"], "unique_id": "test.optimism_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_DIFFICULTY.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_DIFFICULTY", "alias": "blocks_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_DIFFICULTY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.5834181, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere DIFFICULTY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_DIFFICULTY", "column_name": "DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT", "alias": "blocks_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac"}, "created_at": 1662567739.5848262, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DIFFICULTY'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_DIFFICULTY", "column_name": "DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_TOTAL_DIFFICULTY"], "unique_id": "test.optimism_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_TOTAL_DIFFICULTY.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TOTAL_DIFFICULTY", "alias": "blocks_TOTAL_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_TOTAL_DIFFICULTY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.5887392, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere TOTAL_DIFFICULTY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_TOTAL_DIFFICULTY", "column_name": "TOTAL_DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT", "alias": "blocks_TOTAL_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0"}, "created_at": 1662567739.5901399, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_DIFFICULTY'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_TOTAL_DIFFICULTY", "column_name": "TOTAL_DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA_DATA", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_EXTRA_DATA"], "unique_id": "test.optimism_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_EXTRA_DATA.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_EXTRA_DATA", "alias": "blocks_EXTRA_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_EXTRA_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.593931, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere EXTRA_DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_EXTRA_DATA", "column_name": "EXTRA_DATA", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_GAS_LIMIT"], "unique_id": "test.optimism_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_GAS_LIMIT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_GAS_LIMIT", "alias": "blocks_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_GAS_LIMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.595308, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere GAS_LIMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_GAS_LIMIT", "column_name": "GAS_LIMIT", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT", "alias": "blocks_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a"}, "created_at": 1662567739.5969, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_LIMIT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_GAS_LIMIT", "column_name": "GAS_LIMIT", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_GAS_USED.637b37099a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_GAS_USED"], "unique_id": "test.optimism_models.not_null_silver__blocks_GAS_USED.637b37099a", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_GAS_USED.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_GAS_USED", "alias": "blocks_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.600839, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT", "alias": "blocks_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b"}, "created_at": 1662567739.602924, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_HASH.bc44a39f94": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_HASH"], "unique_id": "test.optimism_models.not_null_silver__blocks_HASH.bc44a39f94", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_HASH", "alias": "blocks_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.607035, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_HASH", "column_name": "HASH", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_", "alias": "blocks_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890"}, "created_at": 1662567739.60856, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_HASH", "column_name": "HASH", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_PARENT_HASH.a17a399346": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PARENT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_PARENT_HASH"], "unique_id": "test.optimism_models.not_null_silver__blocks_PARENT_HASH.a17a399346", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_PARENT_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_PARENT_HASH", "alias": "blocks_PARENT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_PARENT_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.621321, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere PARENT_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_PARENT_HASH", "column_name": "PARENT_HASH", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PARENT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_", "alias": "blocks_PARENT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b"}, "created_at": 1662567739.622692, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(PARENT_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_PARENT_HASH", "column_name": "PARENT_HASH", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_RECEIPTS_ROOT"], "unique_id": "test.optimism_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_RECEIPTS_ROOT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_RECEIPTS_ROOT", "alias": "blocks_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_RECEIPTS_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.626461, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere RECEIPTS_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_RECEIPTS_ROOT", "column_name": "RECEIPTS_ROOT", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_", "alias": "blocks_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3"}, "created_at": 1662567739.6279979, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(RECEIPTS_ROOT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_RECEIPTS_ROOT", "column_name": "RECEIPTS_ROOT", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHA3_UNCLES", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_SHA3_UNCLES"], "unique_id": "test.optimism_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_SHA3_UNCLES.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_SHA3_UNCLES", "alias": "blocks_SHA3_UNCLES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_SHA3_UNCLES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.631669, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere SHA3_UNCLES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_SHA3_UNCLES", "column_name": "SHA3_UNCLES", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SHA3_UNCLES", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_", "alias": "blocks_SHA3_UNCLES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479"}, "created_at": 1662567739.633238, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SHA3_UNCLES, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from OPTIMISM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_SHA3_UNCLES", "column_name": "SHA3_UNCLES", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_SIZE.f1fa8f466b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIZE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_SIZE"], "unique_id": "test.optimism_models.not_null_silver__blocks_SIZE.f1fa8f466b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_SIZE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_SIZE", "alias": "blocks_SIZE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_SIZE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.636736, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere SIZE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_SIZE", "column_name": "SIZE", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "SIZE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER", "alias": "blocks_SIZE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875"}, "created_at": 1662567739.638295, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SIZE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_SIZE", "column_name": "SIZE", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEADER_JSON", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_BLOCK_HEADER_JSON"], "unique_id": "test.optimism_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_BLOCK_HEADER_JSON.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HEADER_JSON", "alias": "blocks_BLOCK_HEADER_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HEADER_JSON.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662567739.641968, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom OPTIMISM_DEV.silver.blocks\nwhere BLOCK_HEADER_JSON is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_BLOCK_HEADER_JSON", "column_name": "BLOCK_HEADER_JSON", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "BLOCK_HEADER_JSON", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["optimism_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT"], "unique_id": "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT", "alias": "blocks_BLOCK_HEADER_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691"}, "created_at": 1662567739.643394, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_STATE_ROOT_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_SUBMISSION_BATCH_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HEADER_JSON'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_HEADER_JSON", "column_name": "BLOCK_HEADER_JSON", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_TX_HASH.42129f75a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_STATE_ROOT_TX_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_L1_STATE_ROOT_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_TX_HASH.42129f75a7", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_L1_STATE_ROOT_TX_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_L1_STATE_ROOT_TX_HASH", "alias": "blocks_L1_STATE_ROOT_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_L1_STATE_ROOT_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662567739.647455, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.blocks where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\nwhere L1_STATE_ROOT_TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_L1_STATE_ROOT_TX_HASH", "column_name": "L1_STATE_ROOT_TX_HASH", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_BATCH_INDEX.7d230d0c88": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_STATE_ROOT_BATCH_INDEX", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_L1_STATE_ROOT_BATCH_INDEX"], "unique_id": "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_BATCH_INDEX.7d230d0c88", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_L1_STATE_ROOT_BATCH_INDEX.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_L1_STATE_ROOT_BATCH_INDEX", "alias": "blocks_L1_STATE_ROOT_BATCH_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_L1_STATE_ROOT_BATCH_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662567739.649139, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.blocks where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\nwhere L1_STATE_ROOT_BATCH_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_L1_STATE_ROOT_BATCH_INDEX", "column_name": "L1_STATE_ROOT_BATCH_INDEX", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_BATCH_INDEX.673eec8966": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_SUBMISSION_BATCH_INDEX", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_L1_SUBMISSION_BATCH_INDEX"], "unique_id": "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_BATCH_INDEX.673eec8966", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_L1_SUBMISSION_BATCH_INDEX.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_L1_SUBMISSION_BATCH_INDEX", "alias": "blocks_L1_SUBMISSION_BATCH_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_L1_SUBMISSION_BATCH_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662567739.650839, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.blocks where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\nwhere L1_SUBMISSION_BATCH_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_L1_SUBMISSION_BATCH_INDEX", "column_name": "L1_SUBMISSION_BATCH_INDEX", "file_key_name": "models.silver__blocks"}, "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_TX_HASH.c5a7efc29c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_SUBMISSION_TX_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "not_null_silver", "fqn": ["optimism_models", "silver", "not_null_silver__blocks_L1_SUBMISSION_TX_HASH"], "unique_id": "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_TX_HASH.c5a7efc29c", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "not_null_silver__blocks_L1_SUBMISSION_TX_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_L1_SUBMISSION_TX_HASH", "alias": "blocks_L1_SUBMISSION_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/not_null_silver__blocks_L1_SUBMISSION_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1662567739.652717, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from OPTIMISM_DEV.silver.blocks where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\nwhere L1_SUBMISSION_TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.not_null_silver.blocks_L1_SUBMISSION_TX_HASH", "column_name": "L1_SUBMISSION_TX_HASH", "file_key_name": "models.silver__blocks"}, "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_NUMBER"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.optimism_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "OPTIMISM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["optimism_models", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER"], "unique_id": "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/optimism_models/models/silver/silver__blocks.yml/dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08"}, "created_at": 1662567739.654132, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_NUMBER\n    from OPTIMISM_DEV.silver.blocks\n    group by BLOCK_NUMBER\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "OPTIMISM_DEV.dbt_utils_unique_combination_of_columns_silver.blocks_BLOCK_NUMBER", "column_name": null, "file_key_name": "models.silver__blocks"}}, "sources": {"source.optimism_models.prod.optimism_blocks": {"fqn": ["optimism_models", "prod", "optimism_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.optimism_models.prod.optimism_blocks", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "optimism_blocks", "source_name": "prod", "source_description": "", "loader": "", "identifier": "optimism_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.optimism_blocks", "created_at": 1662493243.2004402}, "source.optimism_models.prod.optimism_txs": {"fqn": ["optimism_models", "prod", "optimism_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.optimism_models.prod.optimism_txs", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "optimism_txs", "source_name": "prod", "source_description": "", "loader": "", "identifier": "optimism_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.optimism_txs", "created_at": 1662493243.200576}, "source.optimism_models.crosschain.address_labels": {"fqn": ["optimism_models", "crosschain", "address_labels"], "database": "flipside_prod_db", "schema": "crosschain", "unique_id": "source.optimism_models.crosschain.address_labels", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "address_labels", "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.crosschain.address_labels", "created_at": 1662493243.2006772}, "source.optimism_models.ethereum.fact_hourly_token_prices": {"fqn": ["optimism_models", "ethereum", "fact_hourly_token_prices"], "database": "ethereum", "schema": "core", "unique_id": "source.optimism_models.ethereum.fact_hourly_token_prices", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "fact_hourly_token_prices", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "fact_hourly_token_prices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.fact_hourly_token_prices", "created_at": 1662493243.200779}, "source.optimism_models.shared.prices_v2": {"fqn": ["optimism_models", "shared", "prices_v2"], "database": "OPTIMISM_DEV", "schema": "silver", "unique_id": "source.optimism_models.shared.prices_v2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prices_v2", "source_name": "shared", "source_description": "", "loader": "", "identifier": "prices_v2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPTIMISM_DEV.silver.prices_v2", "created_at": 1662493243.201013}, "source.optimism_models.shared.market_asset_metadata": {"fqn": ["optimism_models", "shared", "market_asset_metadata"], "database": "OPTIMISM_DEV", "schema": "silver", "unique_id": "source.optimism_models.shared.market_asset_metadata", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "market_asset_metadata", "source_name": "shared", "source_description": "", "loader": "", "identifier": "market_asset_metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPTIMISM_DEV.silver.market_asset_metadata", "created_at": 1662493243.20117}, "source.optimism_models.legacy_silver.hours": {"fqn": ["optimism_models", "legacy_silver", "hours"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.optimism_models.legacy_silver.hours", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "hours", "source_name": "legacy_silver", "source_description": "", "loader": "", "identifier": "hours", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.hours", "created_at": 1662493243.201277}, "source.optimism_models.legacy_silver.market_asset_metadata": {"fqn": ["optimism_models", "legacy_silver", "market_asset_metadata"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.optimism_models.legacy_silver.market_asset_metadata", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "market_asset_metadata", "source_name": "legacy_silver", "source_description": "", "loader": "", "identifier": "market_asset_metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.market_asset_metadata", "created_at": 1662493243.201376}, "source.optimism_models.legacy_silver.prices_v2": {"fqn": ["optimism_models", "legacy_silver", "prices_v2"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.optimism_models.legacy_silver.prices_v2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prices_v2", "source_name": "legacy_silver", "source_description": "", "loader": "", "identifier": "prices_v2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.prices_v2", "created_at": 1662493243.201805}, "source.optimism_models.optimism_pools.SUSHI_DIM_DEX_POOLS": {"fqn": ["optimism_models", "optimism_pools", "SUSHI_DIM_DEX_POOLS"], "database": "optimism", "schema": "bronze", "unique_id": "source.optimism_models.optimism_pools.SUSHI_DIM_DEX_POOLS", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "SUSHI_DIM_DEX_POOLS", "source_name": "optimism_pools", "source_description": "", "loader": "", "identifier": "SUSHI_DIM_DEX_POOLS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "optimism.bronze.SUSHI_DIM_DEX_POOLS", "created_at": 1662493243.201965}, "source.optimism_models.prices.prices_v2": {"fqn": ["optimism_models", "prices", "prices_v2"], "database": "FLIPSIDE_PROD_DB", "schema": "SILVER", "unique_id": "source.optimism_models.prices.prices_v2", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prices_v2", "source_name": "prices", "source_description": "", "loader": "", "identifier": "prices_v2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "FLIPSIDE_PROD_DB.SILVER.prices_v2", "created_at": 1662493243.202074}, "source.optimism_models.ethereum_silver.optimism_state_hashes": {"fqn": ["optimism_models", "ethereum_silver", "optimism_state_hashes"], "database": "ethereum", "schema": "silver", "unique_id": "source.optimism_models.ethereum_silver.optimism_state_hashes", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "optimism_state_hashes", "source_name": "ethereum_silver", "source_description": "", "loader": "", "identifier": "optimism_state_hashes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver.optimism_state_hashes", "created_at": 1662493243.202194}, "source.optimism_models.ethereum_silver.optimism_submission_hashes": {"fqn": ["optimism_models", "ethereum_silver", "optimism_submission_hashes"], "database": "ethereum", "schema": "silver", "unique_id": "source.optimism_models.ethereum_silver.optimism_submission_hashes", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "optimism_submission_hashes", "source_name": "ethereum_silver", "source_description": "", "loader": "", "identifier": "optimism_submission_hashes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver.optimism_submission_hashes", "created_at": 1662493243.2024598}}, "macros": {"macro.optimism_models.db_comment": {"unique_id": "macro.optimism_models.db_comment", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/db_comment.sql", "original_file_path": "macros/db_comment.sql", "name": "db_comment", "macro_sql": "{% macro db_comment() %}\n    {% set query %}\nSELECT\n    TO_DATE(MIN(block_timestamp))\nFROM\n    silver.blocks {% endset %}\n    {% set results = run_query(query) %}\n    {% set results_list = results.columns [0].values() [0].strftime('%Y-%m-%d') %}\n    {% set sql %}\n    COMMENT\n    ON database optimism IS 'Lite Mode dataset with recent data only. Min block_timestamp: {{ results_list }} \ud83c\udf31 ' {% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.365176}, "macro.optimism_models.create_sps": {"unique_id": "macro.optimism_models.create_sps", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'OPTIMISM' %}\n        CREATE schema IF NOT EXISTS _internal;\n{{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.optimism_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.365972}, "macro.optimism_models.generate_schema_name": {"unique_id": "macro.optimism_models.generate_schema_name", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.366909}, "macro.optimism_models.generate_alias_name": {"unique_id": "macro.optimism_models.generate_alias_name", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.36757}, "macro.optimism_models.create_js_hex_to_int": {"unique_id": "macro.optimism_models.create_js_hex_to_int", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/js_hextoint.sql", "original_file_path": "macros/js_hextoint.sql", "name": "create_js_hex_to_int", "macro_sql": "{% macro create_js_hex_to_int() %}\n    CREATE\n    OR REPLACE FUNCTION {{ target.schema }}.js_hex_to_int (\n        s STRING\n    ) returns DOUBLE LANGUAGE javascript AS 'if (S !== null) { yourNumber = parseInt(S, 16); } return yourNumber'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.368497}, "macro.optimism_models.run_sp_create_prod_clone": {"unique_id": "macro.optimism_models.run_sp_create_prod_clone", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call optimism._internal.create_prod_clone(\n        'optimism',\n        'optimism_dev',\n        'internal_dev'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.3694952}, "macro.optimism_models.create_udfs": {"unique_id": "macro.optimism_models.create_udfs", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "name": "create_udfs", "macro_sql": "{% macro create_udfs() %}\n    {% set sql %}\n    CREATE schema if NOT EXISTS silver;\n{{ create_js_hex_to_int() }};\n{{ create_udf_hex_to_int(\n        schema = \"public\"\n    ) }}\n\n    {% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.optimism_models.create_js_hex_to_int", "macro.optimism_models.create_udf_hex_to_int", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.371263}, "macro.optimism_models.sp_create_prod_clone": {"unique_id": "macro.optimism_models.sp_create_prod_clone", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod t*/\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1\n            UNION\n            SELECT 'PUBLIC';`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1);\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE FUNCTIONS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_OPTIMISM`});\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE PROCEDURES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_OPTIMISM`});\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE TABLES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_OPTIMISM`});\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE VIEWS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_OPTIMISM`});\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1);\n            var table_name = existing_tables.getColumnValue(2);\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_functions = snowflake.execute({sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;`});\n\n        while (existing_functions.next()) {\n            var schema = existing_functions.getColumnValue(1);\n            var function_name = existing_functions.getColumnValue(2);\n            var argument_signature = existing_functions.getColumnValue(3);\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        var existing_procedures = snowflake.execute({sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;`});\n\n        while (existing_procedures.next()) {\n            var schema = existing_procedures.getColumnValue(1);\n            var procedure_name = existing_procedures.getColumnValue(2);\n            var argument_signature = existing_procedures.getColumnValue(3);\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.373288}, "macro.optimism_models.create_udf_hex_to_int": {"unique_id": "macro.optimism_models.create_udf_hex_to_int", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/python/udfs.sql", "original_file_path": "macros/python/udfs.sql", "name": "create_udf_hex_to_int", "macro_sql": "{% macro create_udf_hex_to_int(schema) %}\ncreate or replace function {{ schema }}.udf_hex_to_int(hex string)\nreturns string\nlanguage python\nruntime_version = '3.8'\nhandler = 'hex_to_int'\nas\n$$\ndef hex_to_int(hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  select hex_to_int('200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  select hex_to_int('0x200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  select hex_to_int(NULL);\n  >> NULL\n  \"\"\"\n  return str(int(hex, 16)) if hex else None\n$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.374028}, "macro.optimism_models.tx_gaps": {"unique_id": "macro.optimism_models.tx_gaps", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "name": "tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('silver__blocks') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    tx_count <> model_tx_count\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.3747451}, "macro.optimism_models.test_sequence_gaps": {"unique_id": "macro.optimism_models.test_sequence_gaps", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.376683}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.3785322}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.40088}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4024}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4029472}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.405557}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4079309}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.409044}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.41007}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.410785}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.410954}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4113522}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.411581}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.411932}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.412399}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.412798}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.414121}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.414594}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.414948}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4160929}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.41655}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.417738}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4192672}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.419669}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.420187}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.420946}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.421431}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4244359}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.425051}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.425558}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.429568}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.430239}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4314308}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.43491}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.43815}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.439984}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4447591}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.445749}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4462988}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4469068}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.447346}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4477172}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4498}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4503539}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.450777}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.451168}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.451534}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.452405}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.452988}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4538062}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.45538}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4561899}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.462579}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.462961}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.463383}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.463649}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.463831}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.465149}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.465457}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4657762}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.469177}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.473839}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.480706}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.481363}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.481884}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.482133}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4824908}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.482739}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.483199}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.4852638}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.486007}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.486609}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.488273}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.506028}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.512652}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.5138261}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.514598}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.515778}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.517205}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.5193338}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.521626}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.523804}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.532574}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.536026}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.537784}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.5396988}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.540287}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.542309}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.544288}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.5532548}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.561666}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.564173}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.566644}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.56812}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.575026}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.5763688}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.576761}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.5774138}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.578261}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.583928}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.5849018}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.585404}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.5898619}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.590976}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.5913322}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.591694}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.592206}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.599006}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.608216}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.610193}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.61067}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.611595}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.612003}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.612285}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.612552}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.612772}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6131148}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6133919}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.614321}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.614678}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.617285}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6183228}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.61878}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.620469}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.62133}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6224902}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.624062}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.624651}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.625531}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6262882}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.626886}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.628126}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.630359}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6315389}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.632159}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.635572}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.639901}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.641857}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.64242}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.643187}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.644066}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6451788}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6455538}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.646312}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.64656}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6472058}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.647415}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6481678}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.648543}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6491861}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.649354}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.650068}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.650341}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.651065}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.651385}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.652566}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.653812}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.655326}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6558561}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.656932}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.657263}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6583612}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6587179}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.659611}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6599412}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.660919}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.661151}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.661921}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.662199}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.662836}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6630342}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.664547}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6648471}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6651862}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.66548}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6659698}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.666278}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.66659}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6669388}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.66725}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.667561}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.667922}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.668194}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.668925}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6691258}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6703382}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.671325}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.671941}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.67365}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.673999}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.674431}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.675209}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6754618}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6764631}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6768231}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.67713}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.677614}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.678598}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6788568}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.679148}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.679907}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.684874}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.685228}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.685639}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6861901}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.686668}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.687404}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.688564}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.689777}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6906571}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.691427}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.691943}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.692522}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.693056}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.694389}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.69486}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6951401}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6955361}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.696694}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6970282}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.697598}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.6995552}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.723743}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.724334}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.724701}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.724979}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.725674}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7260668}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.726282}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.726735}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.727108}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.727548}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.727922}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7283971}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7299998}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.730409}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.730876}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.731304}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.733641}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.741514}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.741878}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7422762}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7426}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.743111}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7442079}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.763407}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7644632}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.765016}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.765552}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.766175}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.76688}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.767415}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.768224}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.768724}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.769129}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7735639}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7744792}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.775222}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7756228}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.776315}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.776855}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.778111}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.778934}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7808309}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.782302}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7829492}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.783606}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7847528}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7865531}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.78736}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.787922}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7898722}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.790634}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.791861}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.792406}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7943308}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.794564}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.794903}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.795053}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.795197}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7955148}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.795771}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7960162}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7962198}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.796709}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.796948}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7973142}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.797665}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.797816}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.797966}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.798271}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.798411}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.7985458}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.798843}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.798982}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.799115}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.800361}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.801462}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.80205}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.80264}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.802916}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.803141}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.804662}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8050501}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8054469}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.807081}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.807808}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.80823}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8089678}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8098712}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.810643}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.810804}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8109498}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.811723}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.811991}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.812248}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8125}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.813469}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8137238}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.814147}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8145459}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.819353}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.821223}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.822429}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8242571}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.827039}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8319108}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.83232}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.832767}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.837583}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.838249}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8397539}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.840162}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.840759}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.841275}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8430028}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.843329}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.843595}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.844595}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8448792}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.845162}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.846186}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8464372}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8466392}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8473291}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.847538}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.847743}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8485}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8487601}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.849013}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.849762}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.850006}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.851104}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.851329}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8514729}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8516119}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.852075}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.852552}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.853289}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.854322}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.854889}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8587399}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.85979}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.860769}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.861147}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.862101}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.862405}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.862688}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.863032}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8645298}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.864843}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8652182}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.865494}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8681622}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.868772}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8691468}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.870131}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8711722}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8751192}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8758998}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.876394}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.877155}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.878011}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.878913}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.880131}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.880408}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.880705}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8818429}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.88231}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.882577}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.882835}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.8830888}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.885122}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.886823}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.887348}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.887842}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.888266}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.89796}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.899609}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9003232}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.901598}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.914312}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.915531}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9167428}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.917971}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.919733}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.921346}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.922484}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.924007}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.924476}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9256032}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.926271}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.927619}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.928284}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.929267}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9299011}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.930787}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.931211}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.932981}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.934143}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9353962}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9361842}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.937709}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.938102}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9391701}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.939587}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9407942}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9421399}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.943823}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.944514}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.94555}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.94611}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.946966}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9479702}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.94913}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9506629}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.951597}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9519858}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9544919}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9566321}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.961866}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9651241}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.966662}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.967368}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.968241}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.968621}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.969296}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.96969}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.97119}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.972811}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.973942}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.97452}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.975222}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.976637}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9775538}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.978904}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9806101}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9820402}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9828281}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.983181}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.984202}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.985875}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9890869}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9906518}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9920168}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.993763}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.995664}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493238.9988549}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.005298}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.011324}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.0175412}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.018421}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.019068}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.0261812}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.0266528}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.027053}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.027425}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.027745}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.028137}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.029407}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.031301}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.032576}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.033675}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.034602}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.035265}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.0383759}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.039438}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.0414279}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.042604}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.04549}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.048492}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.050735}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.052589}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.054464}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.057524}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.05995}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.062062}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.063179}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.063361}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.0635169}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.063671}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.06574}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.0667021}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.0681422}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.070904}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.085349}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.092354}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.099759}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1022878}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.104369}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1061592}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1093361}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.110626}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1131048}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.11395}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.114484}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.115081}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.115561}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1167512}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.117242}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.11764}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.118059}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1185222}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.119447}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.119894}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.120577}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.120995}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.122539}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.124227}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.124536}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.125092}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1255748}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.126634}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.126925}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1271832}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.127444}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.127703}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.128599}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.129059}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.129576}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1302788}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.130794}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1312718}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.131972}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1322381}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.132499}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.132842}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.136016}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.136693}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.13731}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.138505}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1393569}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.140674}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.141633}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1419039}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.142344}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.143271}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.143948}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.144777}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.145857}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.148622}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.149185}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.150069}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.150781}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.151691}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1526248}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.154471}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1554282}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.156181}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.156876}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.158221}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.159255}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1596649}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1600482}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1604228}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.160806}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1615648}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.162461}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.162818}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1631}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.165079}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.165731}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.166019}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.16632}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.167326}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.167965}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.169802}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.172006}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.172687}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.173397}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.173818}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.174164}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.176002}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.1764328}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.176865}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.177542}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.178922}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.180424}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.186808}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.189652}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.195691}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.198115}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.204075}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2063758}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2083788}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.21037}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.21446}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.220104}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.224919}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.232985}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.235424}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.238931}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.240188}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.243405}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2438662}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2445881}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.244956}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.245396}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.247854}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.251669}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.254598}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2558}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.261246}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.262165}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.264395}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2653859}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2660701}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.266637}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.266921}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.26755}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2678888}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2688231}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.269536}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.280546}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2815738}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.281834}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.282443}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.28267}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.283498}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.283653}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.283825}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.284183}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2845771}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2847328}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.284872}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2850099}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.286388}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.287002}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.287869}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2885509}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.289036}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2899148}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.290251}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.290615}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.291188}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2923038}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.292477}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.292623}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2927842}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.292966}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.29316}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2937741}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2947829}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.295187}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.295577}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.297482}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.2990358}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.300799}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3016078}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3042712}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.312098}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3138402}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.31526}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.317923}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.31866}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3188689}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.31994}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.322689}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.324003}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3255491}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3274481}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.328626}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.330364}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3321311}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.334204}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.334858}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.336437}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3391402}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.340734}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.343134}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.344047}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.346493}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.350254}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.351888}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.354791}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.356744}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3573382}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.359205}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.360307}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.362572}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.363437}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3658571}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.366804}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.367976}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3687522}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.371837}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3741581}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.376051}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3786082}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.379549}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.380139}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3824189}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.384799}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.38735}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.388341}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.389364}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3906822}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3924348}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3944042}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.396121}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.3975859}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.399101}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.4012969}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.405215}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.4071429}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.408916}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.4101272}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.411506}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.413532}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.414284}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.416521}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.4183521}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.419699}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.422049}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.4241128}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.432301}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.438487}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.4400508}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.4422}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.443959}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.44494}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.447718}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.45161}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.457855}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.459944}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.4617898}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.46314}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/optimism-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662493239.465525}}, "docs": {"optimism_models.opt_blocks_nonce": {"unique_id": "optimism_models.opt_blocks_nonce", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_blocks_nonce.md", "original_file_path": "models/doc_descriptions/blocks/opt_blocks_nonce.md", "name": "opt_blocks_nonce", "block_contents": "Block nonce is a value used during mining to demonstrate proof of work for a given block."}, "optimism_models.opt_extra_data": {"unique_id": "optimism_models.opt_extra_data", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_extra_data.md", "original_file_path": "models/doc_descriptions/blocks/opt_extra_data.md", "name": "opt_extra_data", "block_contents": "Any data included by the validator for a given block."}, "optimism_models.opt_blocks_table_doc": {"unique_id": "optimism_models.opt_blocks_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_blocks_table_doc.md", "original_file_path": "models/doc_descriptions/blocks/opt_blocks_table_doc.md", "name": "opt_blocks_table_doc", "block_contents": "This table contains block level data for the Optimism Blockchain. This table can be used to analyze trends at a block level, for example gas fees vs. total transactions over time. For more information on EVM transactions, please see [Etherscan Resources](https://etherscan.io/directory/Learning_Resources/Ethereum) or [The Ethereum Organization](https://ethereum.org/en/developers/docs/blocks/)"}, "optimism_models.opt_sha3_uncles": {"unique_id": "optimism_models.opt_sha3_uncles", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_sha3_uncles.md", "original_file_path": "models/doc_descriptions/blocks/opt_sha3_uncles.md", "name": "opt_sha3_uncles", "block_contents": "The mechanism which Ethereum Javascript RLP encodes an empty string."}, "optimism_models.opt_network": {"unique_id": "optimism_models.opt_network", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_network.md", "original_file_path": "models/doc_descriptions/blocks/opt_network.md", "name": "opt_network", "block_contents": "The network on the blockchain used by a transaction."}, "optimism_models.opt_tx_count": {"unique_id": "optimism_models.opt_tx_count", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_tx_count.md", "original_file_path": "models/doc_descriptions/blocks/opt_tx_count.md", "name": "opt_tx_count", "block_contents": "Total number of transactions within a block."}, "optimism_models.opt_difficulty": {"unique_id": "optimism_models.opt_difficulty", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_difficulty.md", "original_file_path": "models/doc_descriptions/blocks/opt_difficulty.md", "name": "opt_difficulty", "block_contents": "The effort required to mine the block."}, "optimism_models.opt_total_difficulty": {"unique_id": "optimism_models.opt_total_difficulty", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_total_difficulty.md", "original_file_path": "models/doc_descriptions/blocks/opt_total_difficulty.md", "name": "opt_total_difficulty", "block_contents": "Total difficulty of the chain at a given block."}, "optimism_models.opt_block_header_json": {"unique_id": "optimism_models.opt_block_header_json", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_block_header_json.md", "original_file_path": "models/doc_descriptions/blocks/opt_block_header_json.md", "name": "opt_block_header_json", "block_contents": "This JSON column contains the block header details."}, "optimism_models.opt_receipts_root": {"unique_id": "optimism_models.opt_receipts_root", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_receipts_root.md", "original_file_path": "models/doc_descriptions/blocks/opt_receipts_root.md", "name": "opt_receipts_root", "block_contents": "The root of the state trie."}, "optimism_models.opt_gas_used": {"unique_id": "optimism_models.opt_gas_used", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_gas_used.md", "original_file_path": "models/doc_descriptions/blocks/opt_gas_used.md", "name": "opt_gas_used", "block_contents": "Total gas used in the block."}, "optimism_models.opt_blockchain": {"unique_id": "optimism_models.opt_blockchain", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_blockchain.md", "original_file_path": "models/doc_descriptions/blocks/opt_blockchain.md", "name": "opt_blockchain", "block_contents": "The blockchain on which transactions are being confirmed."}, "optimism_models.opt_size": {"unique_id": "optimism_models.opt_size", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_size.md", "original_file_path": "models/doc_descriptions/blocks/opt_size.md", "name": "opt_size", "block_contents": "Block size, which is determined by a given block's gas limit."}, "optimism_models.opt_miner": {"unique_id": "optimism_models.opt_miner", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_miner.md", "original_file_path": "models/doc_descriptions/blocks/opt_miner.md", "name": "opt_miner", "block_contents": "Miner who successfully added a given block to the blockchain."}, "optimism_models.opt_parent_hash": {"unique_id": "optimism_models.opt_parent_hash", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_parent_hash.md", "original_file_path": "models/doc_descriptions/blocks/opt_parent_hash.md", "name": "opt_parent_hash", "block_contents": "The hash of the block from which a given block is generated. Also known as the parent block."}, "optimism_models.opt_blocks_hash": {"unique_id": "optimism_models.opt_blocks_hash", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_blocks_hash.md", "original_file_path": "models/doc_descriptions/blocks/opt_blocks_hash.md", "name": "opt_blocks_hash", "block_contents": "The hash of the block header for a given block."}, "optimism_models.opt_gas_limit": {"unique_id": "optimism_models.opt_gas_limit", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_gas_limit.md", "original_file_path": "models/doc_descriptions/blocks/opt_gas_limit.md", "name": "opt_gas_limit", "block_contents": "Total gas limit provided by all transactions in the block."}, "optimism_models.opt_uncle_blocks": {"unique_id": "optimism_models.opt_uncle_blocks", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/blocks/opt_uncle_blocks.md", "original_file_path": "models/doc_descriptions/blocks/opt_uncle_blocks.md", "name": "opt_uncle_blocks", "block_contents": "Uncle blocks occur when two blocks are mined and broadcasted at the same time, with the same block number. The block validated across the most nodes will be added to the primary chain, and the other one becomes an uncle block. Miners do receive rewards for uncle blocks."}, "optimism_models.opt_origin_sig": {"unique_id": "optimism_models.opt_origin_sig", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_event_sig.md", "original_file_path": "models/doc_descriptions/event_logs/opt_event_sig.md", "name": "opt_origin_sig", "block_contents": "The function signature of this transaction."}, "optimism_models.opt_event_removed": {"unique_id": "optimism_models.opt_event_removed", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_event_removed.md", "original_file_path": "models/doc_descriptions/event_logs/opt_event_removed.md", "name": "opt_event_removed", "block_contents": "Whether the event has been removed from the transaction."}, "optimism_models.opt_origin_to": {"unique_id": "optimism_models.opt_origin_to", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_origin_to.md", "original_file_path": "models/doc_descriptions/event_logs/opt_origin_to.md", "name": "opt_origin_to", "block_contents": "The to address of this transaction."}, "optimism_models.opt_logs_table_doc": {"unique_id": "optimism_models.opt_logs_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_logs_table_doc.md", "original_file_path": "models/doc_descriptions/event_logs/opt_logs_table_doc.md", "name": "opt_logs_table_doc", "block_contents": "This table contains flattened event logs from transactions on the Optimism Blockchain. Transactions may have multiple events, which are denoted by the event index for a transaction hash. Therefore, this table is unique on the combination of transaction hash and event index. Event names are decoded in this table where possible. The event inputs column will contain the log details in JSON format. Specific fields can be pulled from this column using the following sample format: ```event_inputs:<FILED_NAME>::<DATA TYPE> as <FIELD_NAME>```."}, "optimism_models.opt_logs_contract_address": {"unique_id": "optimism_models.opt_logs_contract_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_logs_contract_address.md", "original_file_path": "models/doc_descriptions/event_logs/opt_logs_contract_address.md", "name": "opt_logs_contract_address", "block_contents": "The address interacted with for a given event."}, "optimism_models.opt_logs_data": {"unique_id": "optimism_models.opt_logs_data", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_logs_data.md", "original_file_path": "models/doc_descriptions/event_logs/opt_logs_data.md", "name": "opt_logs_data", "block_contents": "The un-decoded event data."}, "optimism_models.opt_origin_from": {"unique_id": "optimism_models.opt_origin_from", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_origin_from.md", "original_file_path": "models/doc_descriptions/event_logs/opt_origin_from.md", "name": "opt_origin_from", "block_contents": "The from address of this transaction."}, "optimism_models.opt_topics": {"unique_id": "optimism_models.opt_topics", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_topics.md", "original_file_path": "models/doc_descriptions/event_logs/opt_topics.md", "name": "opt_topics", "block_contents": "The un-decoded event input topics."}, "optimism_models.opt_logs_contract_name": {"unique_id": "optimism_models.opt_logs_contract_name", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_logs_contract_name.md", "original_file_path": "models/doc_descriptions/event_logs/opt_logs_contract_name.md", "name": "opt_logs_contract_name", "block_contents": "The name of the contract or token, where possible."}, "optimism_models.opt_log_id_events": {"unique_id": "optimism_models.opt_log_id_events", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_log_id_events.md", "original_file_path": "models/doc_descriptions/event_logs/opt_log_id_events.md", "name": "opt_log_id_events", "block_contents": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred."}, "optimism_models.opt_event_name": {"unique_id": "optimism_models.opt_event_name", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_event_name.md", "original_file_path": "models/doc_descriptions/event_logs/opt_event_name.md", "name": "opt_event_name", "block_contents": "The decoded event name for a given event."}, "optimism_models.opt_logs_tx_hash": {"unique_id": "optimism_models.opt_logs_tx_hash", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_logs_tx_hash.md", "original_file_path": "models/doc_descriptions/event_logs/opt_logs_tx_hash.md", "name": "opt_logs_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events."}, "optimism_models.opt_event_inputs": {"unique_id": "optimism_models.opt_event_inputs", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_event_inputs.md", "original_file_path": "models/doc_descriptions/event_logs/opt_event_inputs.md", "name": "opt_event_inputs", "block_contents": "The decoded event inputs for a given event."}, "optimism_models.opt_event_index": {"unique_id": "optimism_models.opt_event_index", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/event_logs/opt_event_index.md", "original_file_path": "models/doc_descriptions/event_logs/opt_event_index.md", "name": "opt_event_index", "block_contents": "Event number within a transaction."}, "optimism_models.eth_dex_pool_address": {"unique_id": "optimism_models.eth_dex_pool_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_pool_address.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_pool_address.md", "name": "eth_dex_pool_address", "block_contents": "The contract address for the liquidity pool."}, "optimism_models.eth_dex_swaps_symbol_out": {"unique_id": "optimism_models.eth_dex_swaps_symbol_out", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_symbol_out.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_symbol_out.md", "name": "eth_dex_swaps_symbol_out", "block_contents": "The symbol of the token being swapped to."}, "optimism_models.eth_dex_creation_tx": {"unique_id": "optimism_models.eth_dex_creation_tx", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_creation_tx.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_creation_tx.md", "name": "eth_dex_creation_tx", "block_contents": "The transaction where this contract was created, where possible."}, "optimism_models.eth_dex_swaps_amount_in": {"unique_id": "optimism_models.eth_dex_swaps_amount_in", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_in.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_in.md", "name": "eth_dex_swaps_amount_in", "block_contents": "The amount of tokens put into the swap."}, "optimism_models.eth_dex_swaps_amount_in_usd": {"unique_id": "optimism_models.eth_dex_swaps_amount_in_usd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_in_usd.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_in_usd.md", "name": "eth_dex_swaps_amount_in_usd", "block_contents": "The amount of tokens put into the swap converted to USD using the price of the token."}, "optimism_models.eth_dex_swaps_tx_to": {"unique_id": "optimism_models.eth_dex_swaps_tx_to", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_tx_to.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_tx_to.md", "name": "eth_dex_swaps_tx_to", "block_contents": "The tx_to is the address who receives the swapped token. This corresponds to the \"to\" field in the swap function."}, "optimism_models.eth_dex_swaps_token_in": {"unique_id": "optimism_models.eth_dex_swaps_token_in", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_token_In.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_token_In.md", "name": "eth_dex_swaps_token_in", "block_contents": "The address of the token sent for swap."}, "optimism_models.eth_dex_lp_table_doc": {"unique_id": "optimism_models.eth_dex_lp_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_lp_table_doc.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_lp_table_doc.md", "name": "eth_dex_lp_table_doc", "block_contents": "This table contains details on different Liquidity Pools belonging to sushiswap on the Optimism blockchain"}, "optimism_models.eth_dex_platform": {"unique_id": "optimism_models.eth_dex_platform", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_platform.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_platform.md", "name": "eth_dex_platform", "block_contents": "This field denotes which application the liquidity pool belongs to."}, "optimism_models.eth_dex_pool_name": {"unique_id": "optimism_models.eth_dex_pool_name", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_pool_name.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_pool_name.md", "name": "eth_dex_pool_name", "block_contents": "The name of the liquidity pool, where possible."}, "optimism_models.eth_dex_tokens": {"unique_id": "optimism_models.eth_dex_tokens", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_tokens.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_tokens.md", "name": "eth_dex_tokens", "block_contents": "This field contains the tokens within the liquidity pool as a JSON objects."}, "optimism_models.eth_dex_factory_address": {"unique_id": "optimism_models.eth_dex_factory_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_factory_address.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_factory_address.md", "name": "eth_dex_factory_address", "block_contents": "The address that created or deployed this pool, where possible."}, "optimism_models.eth_dex_swaps_token_out": {"unique_id": "optimism_models.eth_dex_swaps_token_out", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_token_out.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_token_out.md", "name": "eth_dex_swaps_token_out", "block_contents": "The address of the token being swapped to."}, "optimism_models.eth_dex_creation_time": {"unique_id": "optimism_models.eth_dex_creation_time", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_creation_time.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_creation_time.md", "name": "eth_dex_creation_time", "block_contents": "When this pool was created, where possible."}, "optimism_models.eth_dex_swaps_amount_out_usd": {"unique_id": "optimism_models.eth_dex_swaps_amount_out_usd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_out_usd.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_out_usd.md", "name": "eth_dex_swaps_amount_out_usd", "block_contents": "The amount of tokens taken out of or received from the swap converted to USD using the price of the token."}, "optimism_models.eth_dex_token1": {"unique_id": "optimism_models.eth_dex_token1", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_token1.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_token1.md", "name": "eth_dex_token1", "block_contents": "Token 1 is the second token in the pair, and will show up second within the event logs for relevant transactions."}, "optimism_models.eth_dex_swaps_amount_out": {"unique_id": "optimism_models.eth_dex_swaps_amount_out", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_out.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_out.md", "name": "eth_dex_swaps_amount_out", "block_contents": "The amount of tokens taken out of or received from the swap."}, "optimism_models.eth_dex_swaps_symbol_in": {"unique_id": "optimism_models.eth_dex_swaps_symbol_in", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_symbol_in.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_symbol_in.md", "name": "eth_dex_swaps_symbol_in", "block_contents": "The symbol of the token sent for swap."}, "optimism_models.opt_sushi__ez_swaps": {"unique_id": "optimism_models.opt_sushi__ez_swaps", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/opt_sushi__ez_swaps.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/opt_sushi__ez_swaps.md", "name": "opt_sushi__ez_swaps", "block_contents": "This table currently contains swap events from the ```logs``` table for SushiSwap on optimism, along with other helpful columns including an amount USD where possible. \nNote: A rule has been put in place to null out the amount_USD if that number is too divergent between amount_in_USD and amount_out_usd. This can happen for swaps of less liquid tokens during very high fluctuation of price."}, "optimism_models.eth_dex_swaps_sender": {"unique_id": "optimism_models.eth_dex_swaps_sender", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_sender.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_sender.md", "name": "eth_dex_swaps_sender", "block_contents": "The Router is the Sender in the swap function."}, "optimism_models.eth_dex_token0": {"unique_id": "optimism_models.eth_dex_token0", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_token0.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_token0.md", "name": "eth_dex_token0", "block_contents": "Token 0 is the first token in the pair, and will show up first within the event logs for relevant transactions."}, "optimism_models.opt_traces_block_no": {"unique_id": "optimism_models.opt_traces_block_no", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_block_no.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_block_no.md", "name": "opt_traces_block_no", "block_contents": "The block number of this transaction."}, "optimism_models.opt_traces_blocktime": {"unique_id": "optimism_models.opt_traces_blocktime", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_blocktime.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_blocktime.md", "name": "opt_traces_blocktime", "block_contents": "The block timestamp of this transaction."}, "optimism_models.opt_traces_type": {"unique_id": "optimism_models.opt_traces_type", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_type.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_type.md", "name": "opt_traces_type", "block_contents": "The type of internal transaction. Common trace types are `CALL`, `DELEGATECALL`, and `STATICCALL`."}, "optimism_models.opt_traces_value": {"unique_id": "optimism_models.opt_traces_value", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_value.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_value.md", "name": "opt_traces_value", "block_contents": "The amount of ETH transferred in this trace."}, "optimism_models.opt_traces_call_data": {"unique_id": "optimism_models.opt_traces_call_data", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_call_data.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_call_data.md", "name": "opt_traces_call_data", "block_contents": "The raw JSON data for this trace."}, "optimism_models.opt_traces_to": {"unique_id": "optimism_models.opt_traces_to", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_to.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_to.md", "name": "opt_traces_to", "block_contents": "The receiving address of this trace. This is not necessarily the to address of the transaction."}, "optimism_models.opt_traces_input": {"unique_id": "optimism_models.opt_traces_input", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_input.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_input.md", "name": "opt_traces_input", "block_contents": "The input data for this trace."}, "optimism_models.opt_traces_tx_hash": {"unique_id": "optimism_models.opt_traces_tx_hash", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_tx_hash.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_tx_hash.md", "name": "opt_traces_tx_hash", "block_contents": "The transaction hash for the trace. Please note, this is not necessarily unique in this table as transactions frequently have multiple traces."}, "optimism_models.opt_traces_sub": {"unique_id": "optimism_models.opt_traces_sub", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_sub.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_sub.md", "name": "opt_traces_sub", "block_contents": "The amount of nested sub traces for this trace."}, "optimism_models.opt_traces_output": {"unique_id": "optimism_models.opt_traces_output", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_output.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_output.md", "name": "opt_traces_output", "block_contents": "The output data for this trace."}, "optimism_models.opt_traces_gas_used": {"unique_id": "optimism_models.opt_traces_gas_used", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_gas_used.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_gas_used.md", "name": "opt_traces_gas_used", "block_contents": "The gas used for this trace."}, "optimism_models.opt_traces_from": {"unique_id": "optimism_models.opt_traces_from", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_from.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_from.md", "name": "opt_traces_from", "block_contents": "The sending address of this trace. This is not necessarily the from address of the transaction."}, "optimism_models.opt_traces_table_doc": {"unique_id": "optimism_models.opt_traces_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_table_doc.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_table_doc.md", "name": "opt_traces_table_doc", "block_contents": "This table contains flattened trace data for internal contract calls on the Optimism Blockchain. Hex encoded fields can be decoded to integers by using `ethereum.public.udf_hex_to_int()`."}, "optimism_models.opt_traces_gas": {"unique_id": "optimism_models.opt_traces_gas", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_gas.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_gas.md", "name": "opt_traces_gas", "block_contents": "The gas supplied for this trace."}, "optimism_models.opt_traces_identifier": {"unique_id": "optimism_models.opt_traces_identifier", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/traces/opt_traces_identifier.md", "original_file_path": "models/doc_descriptions/traces/opt_traces_identifier.md", "name": "opt_traces_identifier", "block_contents": "This field represents the position and type of the trace within the transaction."}, "optimism_models.__overview__": {"unique_id": "optimism_models.__overview__", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/general/__overview__.md", "original_file_path": "models/doc_descriptions/general/__overview__.md", "name": "__overview__", "block_contents": "# Welcome to the Flipside Crypto Optimism Models Documentation!\n\n# NOTE: Data is in 'lite mode' - meaning, historical data have not yet been backfilled. Please see min(block_timestamp)\n\n## **What is Flipside?**\n\n[Flipside Crypto](https://flipsidecrypto.xyz/earn) provides Community Enabled Crypto Analytics, allowing our users to create and share data insights on the crypto projects they care most about.\n\n**Flipside Crypto puts pre-modeled and labeled blockchain data in the hands of communities.**\n\nThrough dashboard and visualization tools, as well as auto-generated API endpoints, data analysts can easily create queries that answer any question via a tool called [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover).\n\n**Community members earn bounties for answering questions with data.**\n\nBounties provide incentive and direction, so crypto projects can quickly source the data insights they need in order to grow.\n\n**Flipside works directly with leading crypto projects to reward on-demand analytics through structured bounty programs.**\n\nQuestions sourced directly from the community provide insight into what communities care about as well as analytics needed to drive ecosystem engagement and growth.\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the Optimism tables and views available via [Flipside Crypto.](https://flipsidecrypto.xyz/earn) For more information on how these models are built, please see [the github repository.](https://github.com/FlipsideCrypto/optimism-models)\n\n### **Quick Links to Table Documentation**\n\n- [fact_blocks](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.core__fact_blocks)\n- [fact_event_logs](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.core__fact_event_logs)\n- [fact_traces](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.core__fact_traces)\n- [fact_transactions](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.core__fact_transactions)\n- [dim_lables](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.core__dim_labels)\n- [ez_eth_transfers](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.core__ez_eth_transfers)\n- [fact_token_transfers](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.core__fact_token_transfers)\n- [fact_hourly_token_prices](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.core__fact_hourly_token_prices)\n- [ez_nft_sales](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.core__ez_nft_sales)\n\n\n**Velodrome**\n - [ez_claimed_rewards](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.velodrome__ez_claimed_rewards)\n - [ez_lp_actions](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.velodrome__ez_lp_actions)\n - [ez_pool_details](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.velodrome__ez_pool_details)\n - [ez_staking_actions](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.velodrome__ez_staking_actions)\n - [ez_swaps](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.velodrome__ez_swaps)\n - [ez_velo_locks](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.velodrome__ez_velo_locks)\n - [ez_votes](https://flipsidecrypto.github.io/optimism-models/#!/model/model.optimism_models.velodrome__ez_votes)\n\n\n## **Data Model Overview**\n\nThe Optimism models are built a few different ways, but the core fact table are built using three layers of sql models: **bronze, silver, and gold (or core).**\n\n- Bronze: Data is loaded in from the source as a view\n- Silver: All necessary parsing, filtering, de-duping, and other transformations are done here\n- Gold (or core): Final views and tables that are available in Velocity\n\nThe dimension tables are sourced from a variety of on-chain and off-chain sources.\n\nConvenience views (denoted ez_) are a combination of different fact and dimension tables. \n\nA user-defined-function (UDF) is available to decode hex encoded values to integers in this database. You can call this UDF by using `optimism.public.udf_hex_to_int(FIELD)`.\n\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/earn)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/optimism-models)\n- [Query Editor Shortcuts](https://docs.flipsidecrypto.com/velocity/query-editor-shortcuts)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}, "optimism_models.opt_from_address": {"unique_id": "optimism_models.opt_from_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/general/opt_from_address.md", "original_file_path": "models/doc_descriptions/general/opt_from_address.md", "name": "opt_from_address", "block_contents": "The sending address of this transaction."}, "optimism_models.opt_symbol": {"unique_id": "optimism_models.opt_symbol", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/general/opt_symbol.md", "original_file_path": "models/doc_descriptions/general/opt_symbol.md", "name": "opt_symbol", "block_contents": "The symbol belonging to the address of the token"}, "optimism_models.opt_decimals": {"unique_id": "optimism_models.opt_decimals", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/general/opt_decimals.md", "original_file_path": "models/doc_descriptions/general/opt_decimals.md", "name": "opt_decimals", "block_contents": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_token_transfers```."}, "optimism_models.opt_ingested_at": {"unique_id": "optimism_models.opt_ingested_at", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/general/opt_ingested_at.md", "original_file_path": "models/doc_descriptions/general/opt_ingested_at.md", "name": "opt_ingested_at", "block_contents": "Internal column."}, "optimism_models.opt_to_address": {"unique_id": "optimism_models.opt_to_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/general/opt_to_address.md", "original_file_path": "models/doc_descriptions/general/opt_to_address.md", "name": "opt_to_address", "block_contents": "The receiving address of this transaction. This can be a contract address."}, "optimism_models.opt_block_timestamp": {"unique_id": "optimism_models.opt_block_timestamp", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/general/opt_block_timestamp.md", "original_file_path": "models/doc_descriptions/general/opt_block_timestamp.md", "name": "opt_block_timestamp", "block_contents": "The date and time at which the block was produced."}, "optimism_models.opt_block_number": {"unique_id": "optimism_models.opt_block_number", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/general/opt_block_number.md", "original_file_path": "models/doc_descriptions/general/opt_block_number.md", "name": "opt_block_number", "block_contents": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block."}, "optimism_models.op_contracts_contract_address": {"unique_id": "optimism_models.op_contracts_contract_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/contracts/op_contracts_contract_address.md", "original_file_path": "models/doc_descriptions/contracts/op_contracts_contract_address.md", "name": "op_contracts_contract_address", "block_contents": "The unique Optimism address of the deployed contract."}, "optimism_models.op_contracts_symbol": {"unique_id": "optimism_models.op_contracts_symbol", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/contracts/op_contracts_symbol.md", "original_file_path": "models/doc_descriptions/contracts/op_contracts_symbol.md", "name": "op_contracts_symbol", "block_contents": "The symbol used to represent this contract. Please note this is not necessarily unique."}, "optimism_models.op_contracts_table_doc": {"unique_id": "optimism_models.op_contracts_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/contracts/op_contracts_table_doc.md", "original_file_path": "models/doc_descriptions/contracts/op_contracts_table_doc.md", "name": "op_contracts_table_doc", "block_contents": "This table contains contract details for contracts deployed on the Optimism blockchain."}, "optimism_models.op_labels_table": {"unique_id": "optimism_models.op_labels_table", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/labels/op_labels_table_doc.md", "original_file_path": "models/doc_descriptions/labels/op_labels_table_doc.md", "name": "op_labels_table", "block_contents": "This table contains labels for addresses on the Optimism Blockchain."}, "optimism_models.op_label_address": {"unique_id": "optimism_models.op_label_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/labels/op_label_address.md", "original_file_path": "models/doc_descriptions/labels/op_label_address.md", "name": "op_label_address", "block_contents": "Address that the label is for. This is the field that should be used to join other tables with labels."}, "optimism_models.op_label_subtype": {"unique_id": "optimism_models.op_label_subtype", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/labels/op_label_subtype.md", "original_file_path": "models/doc_descriptions/labels/op_label_subtype.md", "name": "op_label_subtype", "block_contents": "A sub-category nested within label type providing further detail."}, "optimism_models.op_project_name": {"unique_id": "optimism_models.op_project_name", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/labels/op_label.md", "original_file_path": "models/doc_descriptions/labels/op_label.md", "name": "op_project_name", "block_contents": "The name of the project for this address."}, "optimism_models.op_label_address_name": {"unique_id": "optimism_models.op_label_address_name", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/labels/op_label_address_name.md", "original_file_path": "models/doc_descriptions/labels/op_label_address_name.md", "name": "op_label_address_name", "block_contents": "The most granular label for this address."}, "optimism_models.op_label_blockchain": {"unique_id": "optimism_models.op_label_blockchain", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/labels/op_label_blockchain.md", "original_file_path": "models/doc_descriptions/labels/op_label_blockchain.md", "name": "op_label_blockchain", "block_contents": "The name of the blockchain."}, "optimism_models.op_label_type": {"unique_id": "optimism_models.op_label_type", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/labels/op_label_type.md", "original_file_path": "models/doc_descriptions/labels/op_label_type.md", "name": "op_label_type", "block_contents": "A high-level category describing the addresses main function or ownership."}, "optimism_models.op_label_creator": {"unique_id": "optimism_models.op_label_creator", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/labels/op_label_creator.md", "original_file_path": "models/doc_descriptions/labels/op_label_creator.md", "name": "op_label_creator", "block_contents": "The name of the creator of the label."}, "optimism_models.opt_transfer_amount_usd": {"unique_id": "optimism_models.opt_transfer_amount_usd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_amount_usd.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_amount_usd.md", "name": "opt_transfer_amount_usd", "block_contents": "The amount in US dollars for this transfer at the time of the transfer. Tokens without a decimal adjustment or price will be nulled out here."}, "optimism_models.opt_transfer_token_price": {"unique_id": "optimism_models.opt_transfer_token_price", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_token_price.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_token_price.md", "name": "opt_transfer_token_price", "block_contents": "The price, if available, for this token at the transfer time."}, "optimism_models.opt_ez_transfers_table_doc": {"unique_id": "optimism_models.opt_ez_transfers_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_ez_transfer_table_doc.md", "original_file_path": "models/doc_descriptions/transfers/opt_ez_transfer_table_doc.md", "name": "opt_ez_transfers_table_doc", "block_contents": "This table will contain all events in the ```fact_token_transfers table```, along with joined columns such as token price, symbol, and decimals where possible that allow for easier analysis of token transfer events. Please note Native ETH transfers are not included here."}, "optimism_models.opt_transfer_table_doc": {"unique_id": "optimism_models.opt_transfer_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_table_doc.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_table_doc.md", "name": "opt_transfer_table_doc", "block_contents": "This table contains events on the Optimism Blockchain with an event name of 'Transfer'. The contract address is the token transferred, and the raw amount field is the amount of tokens transferred. Please note this amount is not decimal adjusted. Decimal adjustments for a token address can be found in ```dim_contracts```. This table will not contain transfers of native ETH."}, "optimism_models.opt_transfer_raw_amount": {"unique_id": "optimism_models.opt_transfer_raw_amount", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_raw_amount.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_raw_amount.md", "name": "opt_transfer_raw_amount", "block_contents": "The amount of tokens transferred. This value is not decimal adjusted."}, "optimism_models.opt_log_id_transfers": {"unique_id": "optimism_models.opt_log_id_transfers", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_log_id_transfers.md", "original_file_path": "models/doc_descriptions/transfers/opt_log_id_transfers.md", "name": "opt_log_id_transfers", "block_contents": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the transfer event occurred. This field can be used to find more details on the event within the ```fact_event_logs``` table."}, "optimism_models.opt_eth_origin_to": {"unique_id": "optimism_models.opt_eth_origin_to", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_origin_to.md", "original_file_path": "models/doc_descriptions/transfers/opt_origin_to.md", "name": "opt_eth_origin_to", "block_contents": "The to address at the transaction level."}, "optimism_models.opt_transfer_has_decimal": {"unique_id": "optimism_models.opt_transfer_has_decimal", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_has_decimal.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_has_decimal.md", "name": "opt_transfer_has_decimal", "block_contents": "Whether or not our contracts model contains the necessary decimal adjustment for this token."}, "optimism_models.opt_transfer_tx_hash": {"unique_id": "optimism_models.opt_transfer_tx_hash", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_tx_hash.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_tx_hash.md", "name": "opt_transfer_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events."}, "optimism_models.opt_transfer_to_address": {"unique_id": "optimism_models.opt_transfer_to_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_to_address.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_to_address.md", "name": "opt_transfer_to_address", "block_contents": "The receiving address of this transfer. This can be a contract address."}, "optimism_models.opt_transfer_amount": {"unique_id": "optimism_models.opt_transfer_amount", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_amount.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_amount.md", "name": "opt_transfer_amount", "block_contents": "The decimal transformed amount for this token. Tokens without a decimal adjustment will be nulled out here."}, "optimism_models.opt_transfer_contract_address": {"unique_id": "optimism_models.opt_transfer_contract_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_contract_address.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_contract_address.md", "name": "opt_transfer_contract_address", "block_contents": "Contract address of the token being transferred."}, "optimism_models.opt_ez_eth_transfers_table_doc": {"unique_id": "optimism_models.opt_ez_eth_transfers_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_ez_eth_transfers_table_doc.md", "original_file_path": "models/doc_descriptions/transfers/opt_ez_eth_transfers_table_doc.md", "name": "opt_ez_eth_transfers_table_doc", "block_contents": "This table contains all native ETH transfers, including equivalent USD amounts. The origin addresses correspond to the to and from addresses from the `fact_transactions` table. The `identifier` and `tx_hash` columns relate this table back to `fact_traces`, which contains more details on the transfers."}, "optimism_models.opt_eth_origin_from": {"unique_id": "optimism_models.opt_eth_origin_from", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_origin_from.md", "original_file_path": "models/doc_descriptions/transfers/opt_origin_from.md", "name": "opt_eth_origin_from", "block_contents": "The from address at the transaction level."}, "optimism_models.opt_eth_amount": {"unique_id": "optimism_models.opt_eth_amount", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_eth_amount.md", "original_file_path": "models/doc_descriptions/transfers/opt_eth_amount.md", "name": "opt_eth_amount", "block_contents": "ETH value transferred."}, "optimism_models.opt_transfer_from_address": {"unique_id": "optimism_models.opt_transfer_from_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_from_address.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_from_address.md", "name": "opt_transfer_from_address", "block_contents": "The sending address of this transfer."}, "optimism_models.opt_transfer_has_price": {"unique_id": "optimism_models.opt_transfer_has_price", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_transfer_has_price.md", "original_file_path": "models/doc_descriptions/transfers/opt_transfer_has_price.md", "name": "opt_transfer_has_price", "block_contents": "Whether or not our prices model contains this hourly token price."}, "optimism_models.opt_eth_amount_usd": {"unique_id": "optimism_models.opt_eth_amount_usd", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transfers/opt_eth_amount_usd.md", "original_file_path": "models/doc_descriptions/transfers/opt_eth_amount_usd.md", "name": "opt_eth_amount_usd", "block_contents": "ETH value transferred, in USD."}, "optimism_models.op_token1_symbol": {"unique_id": "optimism_models.op_token1_symbol", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/velodrome/op_token1_symbol.md", "original_file_path": "models/doc_descriptions/velodrome/op_token1_symbol.md", "name": "op_token1_symbol", "block_contents": "The symbol of token1 in the pool."}, "optimism_models.velo_claimed_table_doc": {"unique_id": "optimism_models.velo_claimed_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/velodrome/velo_claimed_table_doc.md", "original_file_path": "models/doc_descriptions/velodrome/velo_claimed_table_doc.md", "name": "velo_claimed_table_doc", "block_contents": "This table contains details about claimed rewards on Velodrome. Rewards are paid to VELO lockers, LP token stakers, and veVELO voters. Please use the `reward_type` column to analyze the different types of claimed rewards.\n\n`venft_distribution` -> paid to VELO lockers\n`lp_reward` -> paid to LP token stakers\n`voter_rewards` -> paid to locked VELO votes"}, "optimism_models.op_token0_symbol": {"unique_id": "optimism_models.op_token0_symbol", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/velodrome/op_token0_symbol.md", "original_file_path": "models/doc_descriptions/velodrome/op_token0_symbol.md", "name": "op_token0_symbol", "block_contents": "The symbol of token0 in the pool."}, "optimism_models.op_pool_type": {"unique_id": "optimism_models.op_pool_type", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/velodrome/op_pool_type.md", "original_file_path": "models/doc_descriptions/velodrome/op_pool_type.md", "name": "op_pool_type", "block_contents": "The type of liquidity pool, either stable or volatile. Stable pools are designed for assets which have little to no volatility. Volatile pools are designed for assets with high price volatility, and use a generic AMM formula."}, "optimism_models.op_token1_address": {"unique_id": "optimism_models.op_token1_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/velodrome/op_token1_address.md", "original_file_path": "models/doc_descriptions/velodrome/op_token1_address.md", "name": "op_token1_address", "block_contents": "The address of token1 in the pool."}, "optimism_models.op_pool_address": {"unique_id": "optimism_models.op_pool_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/velodrome/op_pool_address.md", "original_file_path": "models/doc_descriptions/velodrome/op_pool_address.md", "name": "op_pool_address", "block_contents": "The address of the Velodrome liquidity pool."}, "optimism_models.op_pool_name": {"unique_id": "optimism_models.op_pool_name", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/velodrome/op_pool_name.md", "original_file_path": "models/doc_descriptions/velodrome/op_pool_name.md", "name": "op_pool_name", "block_contents": "The name of the Velodrome liquidity pool."}, "optimism_models.op_token0_address": {"unique_id": "optimism_models.op_token0_address", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/velodrome/op_token0_address.md", "original_file_path": "models/doc_descriptions/velodrome/op_token0_address.md", "name": "op_token0_address", "block_contents": "The address of token0 in the pool."}, "optimism_models.delegation_to_delegate": {"unique_id": "optimism_models.delegation_to_delegate", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/delegations/delegation_to_delegate.md", "original_file_path": "models/doc_descriptions/delegations/delegation_to_delegate.md", "name": "delegation_to_delegate", "block_contents": "The wallet address of delegate that the delegator is delegating their OP tokens to."}, "optimism_models.delegation_delegation_type": {"unique_id": "optimism_models.delegation_delegation_type", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/delegations/delegation_delegation_type.md", "original_file_path": "models/doc_descriptions/delegations/delegation_delegation_type.md", "name": "delegation_delegation_type", "block_contents": "The type of delegation event that is happening in the transaction."}, "optimism_models.opt_delegations_table_doc": {"unique_id": "optimism_models.opt_delegations_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/delegations/opt_delegations_table_doc.md", "original_file_path": "models/doc_descriptions/delegations/opt_delegations_table_doc.md", "name": "opt_delegations_table_doc", "block_contents": "Contains all delegation transactions of OP token voting power to delegators or community members who have volunteered to play an active role in Token House governance."}, "optimism_models.delegation_delegator": {"unique_id": "optimism_models.delegation_delegator", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/delegations/delegation_delegator.md", "original_file_path": "models/doc_descriptions/delegations/delegation_delegator.md", "name": "delegation_delegator", "block_contents": "The wallet address of the user that is delegating their OP tokens."}, "optimism_models.delegation_from_delegate": {"unique_id": "optimism_models.delegation_from_delegate", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/delegations/delegation_from_delegate.md", "original_file_path": "models/doc_descriptions/delegations/delegation_from_delegate.md", "name": "delegation_from_delegate", "block_contents": "The wallet address of delegate that the delegator is delegating their OP tokens from when re-delegating."}, "optimism_models.opt_tx_fee": {"unique_id": "optimism_models.opt_tx_fee", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_fee.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_fee.md", "name": "opt_tx_fee", "block_contents": "Amount paid to validate the transaction in ETH."}, "optimism_models.opt_tx_block_hash": {"unique_id": "optimism_models.opt_tx_block_hash", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_block_hash.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_block_hash.md", "name": "opt_tx_block_hash", "block_contents": "Block hash is a unique 66-character identifier that is generate when a block is produced."}, "optimism_models.opt_tx_hash": {"unique_id": "optimism_models.opt_tx_hash", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_hash.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_hash.md", "name": "opt_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed."}, "optimism_models.opt_tx_position": {"unique_id": "optimism_models.opt_tx_position", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_position.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_position.md", "name": "opt_tx_position", "block_contents": "The position of the transaction within the block."}, "optimism_models.opt_tx_status": {"unique_id": "optimism_models.opt_tx_status", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_status.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_status.md", "name": "opt_tx_status", "block_contents": "Status of the transaction."}, "optimism_models.opt_tx_json": {"unique_id": "optimism_models.opt_tx_json", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_json.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_json.md", "name": "opt_tx_json", "block_contents": "This JSON column contains the transaction details, including event logs."}, "optimism_models.opt_tx_nonce": {"unique_id": "optimism_models.opt_tx_nonce", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_nonce.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_nonce.md", "name": "opt_tx_nonce", "block_contents": "The number of transactions sent from a given address."}, "optimism_models.opt_value": {"unique_id": "optimism_models.opt_value", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_value.md", "original_file_path": "models/doc_descriptions/transactions/opt_value.md", "name": "opt_value", "block_contents": "The value transacted in ETH."}, "optimism_models.opt_cumulative_gas_used": {"unique_id": "optimism_models.opt_cumulative_gas_used", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_cumulative_gas_used.md", "original_file_path": "models/doc_descriptions/transactions/opt_cumulative_gas_used.md", "name": "opt_cumulative_gas_used", "block_contents": "The total amount of gas used when this transaction was executed in the block."}, "optimism_models.opt_tx_gas_used": {"unique_id": "optimism_models.opt_tx_gas_used", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_gas_used.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_gas_used.md", "name": "opt_tx_gas_used", "block_contents": "Gas used by transaction."}, "optimism_models.opt_tx_input_data": {"unique_id": "optimism_models.opt_tx_input_data", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_input_data.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_input_data.md", "name": "opt_tx_input_data", "block_contents": "This column contains additional data for this transaction, and is commonly used as part of a contract interaction or as a message to the recipient."}, "optimism_models.opt_tx_gas_price": {"unique_id": "optimism_models.opt_tx_gas_price", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_gas_price.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_gas_price.md", "name": "opt_tx_gas_price", "block_contents": "Cost per unit of gas in Gwei."}, "optimism_models.opt_tx_origin_sig": {"unique_id": "optimism_models.opt_tx_origin_sig", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_origin_sig.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_origin_sig.md", "name": "opt_tx_origin_sig", "block_contents": "The function signature of the contract call."}, "optimism_models.opt_tx_gas_limit": {"unique_id": "optimism_models.opt_tx_gas_limit", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_gas_limit.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_gas_limit.md", "name": "opt_tx_gas_limit", "block_contents": "Maximum amount of gas allocated for the transaction."}, "optimism_models.opt_tx_table_doc": {"unique_id": "optimism_models.opt_tx_table_doc", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/transactions/opt_tx_table_doc.md", "original_file_path": "models/doc_descriptions/transactions/opt_tx_table_doc.md", "name": "opt_tx_table_doc", "block_contents": "This table contains transaction level data for the Optimism Blockchain. Each transaction will have a unique transaction hash, along with transactions fees and a ETH value transferred when applicable. Transactions may be native ETH transfers or interactions with contract addresses. For more information, please see [The Ethereum Organization - Transactions](https://ethereum.org/en/developers/docs/transactions/)"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "optimism_models.op_max_block": {"unique_id": "optimism_models.op_max_block", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/op_max_block.md", "original_file_path": "models/doc_descriptions/L1_fields/op_max_block.md", "name": "op_max_block", "block_contents": "The max block on Optimism this batch relates to."}, "optimism_models.op_l1_gas_used": {"unique_id": "optimism_models.op_l1_gas_used", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_gas_used.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_gas_used.md", "name": "op_l1_gas_used", "block_contents": "The gas used on L1 to publish the transaction."}, "optimism_models.op_batch_root": {"unique_id": "optimism_models.op_batch_root", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_batch_root.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_batch_root.md", "name": "op_batch_root", "block_contents": "Root of batch, either for sumbission or state."}, "optimism_models.op_l1_sub_tx_hash": {"unique_id": "optimism_models.op_l1_sub_tx_hash", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_submission_tx_hash.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_submission_tx_hash.md", "name": "op_l1_sub_tx_hash", "block_contents": "The L1 tx hash of when this block was submitted to L1."}, "optimism_models.op_l1_state_batch": {"unique_id": "optimism_models.op_l1_state_batch", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_state_root_batch_index.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_state_root_batch_index.md", "name": "op_l1_state_batch", "block_contents": "The batch index of when this block was included in the Ethereum state root."}, "optimism_models.op_min_block": {"unique_id": "optimism_models.op_min_block", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/op_min_block.md", "original_file_path": "models/doc_descriptions/L1_fields/op_min_block.md", "name": "op_min_block", "block_contents": "The min block on Optimism this batch relates to."}, "optimism_models.op_l1_sub_batch": {"unique_id": "optimism_models.op_l1_sub_batch", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_submission_batch_index.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_submission_batch_index.md", "name": "op_l1_sub_batch", "block_contents": "The batch index of when this block was submitted to L1."}, "optimism_models.op_l1_block_time": {"unique_id": "optimism_models.op_l1_block_time", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_block_timestamp.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_block_timestamp.md", "name": "op_l1_block_time", "block_contents": "The timestamp of the Ethereum block that contained this batch."}, "optimism_models.op_l1_gas_price": {"unique_id": "optimism_models.op_l1_gas_price", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_gas_price.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_gas_price.md", "name": "op_l1_gas_price", "block_contents": "The gas price for L1 transactions when the transaction was processed."}, "optimism_models.op_l1_fee_scalar": {"unique_id": "optimism_models.op_l1_fee_scalar", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_fee_scalar.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_fee_scalar.md", "name": "op_l1_fee_scalar", "block_contents": "This value covers the change in L1 gas price between the time the transaction is submitted and when it is published."}, "optimism_models.op_prev_total_elements": {"unique_id": "optimism_models.op_prev_total_elements", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/prev_total_elements.md", "original_file_path": "models/doc_descriptions/L1_fields/prev_total_elements.md", "name": "op_prev_total_elements", "block_contents": "Confirmed blocks prior to this batch."}, "optimism_models.op_l1_block_no": {"unique_id": "optimism_models.op_l1_block_no", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_block_number.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_block_number.md", "name": "op_l1_block_no", "block_contents": "The Ethereum block number that contained the batch."}, "optimism_models.op_l1_state_tx_hash": {"unique_id": "optimism_models.op_l1_state_tx_hash", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/l1_state_root_tx_hash.md", "original_file_path": "models/doc_descriptions/L1_fields/l1_state_root_tx_hash.md", "name": "op_l1_state_tx_hash", "block_contents": "The L1 tx hash of when this block was included in the Ethereum state root."}, "optimism_models.op_batch_size": {"unique_id": "optimism_models.op_batch_size", "package_name": "optimism_models", "root_path": "/Users/atbmacbookpro/optimism-models", "path": "doc_descriptions/L1_fields/batch_size.md", "original_file_path": "models/doc_descriptions/L1_fields/batch_size.md", "name": "op_batch_size", "block_contents": "Total Optimism Txs included within batch."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.optimism_models.bronze__blocks": ["source.optimism_models.prod.optimism_blocks"], "model.optimism_models.bronze__transactions": ["source.optimism_models.prod.optimism_txs"], "model.optimism_models.silver__quixotic_sales": ["model.optimism_models.silver__logs", "model.optimism_models.silver__prices"], "model.optimism_models.silver__transfers": ["model.optimism_models.silver__logs"], "model.optimism_models.silver__delegations": ["model.optimism_models.silver__transactions"], "model.optimism_models.silver__logs": ["model.optimism_models.bronze__transactions"], "model.optimism_models.silver__traces": ["model.optimism_models.bronze__blocks", "model.optimism_models.bronze__transactions"], "model.optimism_models.silver__prices": ["model.optimism_models.core__dim_contracts", "seed.optimism_models.silver__velo_tokens_backup", "source.optimism_models.ethereum.fact_hourly_token_prices", "source.optimism_models.legacy_silver.hours", "source.optimism_models.legacy_silver.market_asset_metadata", "source.optimism_models.legacy_silver.prices_v2"], "model.optimism_models.silver__velodrome_votes": ["model.optimism_models.silver__logs", "model.optimism_models.silver__velodrome_gauges"], "model.optimism_models.silver__velodrome_pools": ["model.optimism_models.core__dim_contracts", "model.optimism_models.silver__logs", "seed.optimism_models.silver__velo_pool_backfill", "seed.optimism_models.silver__velo_tokens_backup"], "model.optimism_models.silver__velodrome_swaps": ["model.optimism_models.silver__logs", "model.optimism_models.silver__prices", "model.optimism_models.silver__velodrome_pools"], "model.optimism_models.silver__velodrome_gauges": ["model.optimism_models.silver__logs", "model.optimism_models.silver__velodrome_pools", "seed.optimism_models.silver__velo_gauges_backfill"], "model.optimism_models.silver__velodrome_locks": ["model.optimism_models.silver__logs", "model.optimism_models.silver__prices"], "model.optimism_models.velodrome__ez_votes": ["model.optimism_models.silver__velodrome_votes"], "model.optimism_models.velodrome__ez_pool_details": ["model.optimism_models.silver__velodrome_pools"], "model.optimism_models.velodrome__ez_swaps": ["model.optimism_models.silver__velodrome_swaps"], "model.optimism_models.silver__velodrome_claimed_rewards": ["model.optimism_models.silver__logs", "model.optimism_models.silver__logs", "model.optimism_models.silver__prices", "model.optimism_models.silver__velodrome_pools"], "model.optimism_models.velodrome__ez_claimed_rewards": ["model.optimism_models.silver__velodrome_claimed_rewards"], "model.optimism_models.velodrome__ez_staking_actions": ["model.optimism_models.silver__velodrome_staking_actions"], "model.optimism_models.silver__velodrome_LP_actions": ["model.optimism_models.silver__logs", "model.optimism_models.silver__prices", "model.optimism_models.silver__velodrome_pools"], "model.optimism_models.silver__velodrome_staking_actions": ["model.optimism_models.silver__logs", "model.optimism_models.silver__logs", "model.optimism_models.silver__velodrome_pools"], "model.optimism_models.velodrome__ez_lp_actions": ["model.optimism_models.silver__velodrome_LP_actions"], "model.optimism_models.velodrome__ez_velo_locks": ["model.optimism_models.silver__velodrome_locks"], "model.optimism_models.core__ez_nft_sales": ["model.optimism_models.silver__quixotic_sales"], "model.optimism_models.core__ez_eth_transfers": ["model.optimism_models.silver__traces", "model.optimism_models.silver__transactions", "source.optimism_models.ethereum.fact_hourly_token_prices"], "model.optimism_models.core__fact_token_transfers": ["model.optimism_models.silver__transfers"], "model.optimism_models.core__fact_hourly_token_prices": ["model.optimism_models.silver__prices"], "model.optimism_models.core__fact_traces": ["model.optimism_models.silver__traces"], "model.optimism_models.core__dim_dates": [], "model.optimism_models.core__fact_event_logs": ["model.optimism_models.silver__logs"], "model.optimism_models.core__fact_delegations": ["model.optimism_models.silver__delegations"], "model.optimism_models.core__dim_contracts": ["seed.optimism_models.silver__contracts_backfill"], "model.optimism_models.core__dim_labels": ["source.optimism_models.crosschain.address_labels"], "model.optimism_models.sushi__ez_swaps": ["model.optimism_models.silver__logs", "model.optimism_models.sushi__dim_dex_pools", "model.optimism_models.sushi__dim_dex_pools", "model.optimism_models.sushi__dim_dex_pools", "model.optimism_models.sushi__dim_dex_pools", "source.optimism_models.prices.prices_v2"], "model.optimism_models.sushi__dim_dex_pools": ["source.optimism_models.optimism_pools.SUSHI_DIM_DEX_POOLS"], "test.optimism_models.test_silver__transactions_tx_gap": ["model.optimism_models.silver__blocks", "model.optimism_models.silver__blocks", "model.optimism_models.silver__transactions"], "seed.optimism_models.bronze__sushi_dim_dex_pools": [], "seed.optimism_models.silver__velo_gauges_backfill": [], "seed.optimism_models.silver__velo_tokens_backup": [], "seed.optimism_models.silver__velo_pool_backfill": [], "seed.optimism_models.silver__contracts_backfill": [], "operation.optimism_models.optimism_models-on-run-start-0": [], "operation.optimism_models.optimism_models-on-run-start-1": [], "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_NUMBER.70f83df7ca": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_NUMBER__NUMBER__FLOAT.d5bc0fd646": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_TIMESTAMP.6a8c6a5e2b": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales_BLOCK_TIMESTAMP__day__1.d5189a899a": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c57675bdd6": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_TX_HASH.73d4776795": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_TX_HASH__0_xX_0_9a_fA_F_.864a57e1fc": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_ADDRESS.b320c65317": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.b8e09a055d": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_NAME.4f669cf98f": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_PLATFORM_NAME__quixotic.c11519c9fc": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_SELLER_ADDRESS.0c5df1a76d": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.e027e64844": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_BUYER_ADDRESS.0acf1d3921": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.8a823ec7b8": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_NFT_ADDRESS.03d9666022": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.fb674f9114": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_TOKENID.62dfe07e06": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_CURRENCY_ADDRESS.8bb2544e69": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_PRICE.4dfbfe1d9a": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE__NUMBER__FLOAT.89e9d65183": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE_USD__NUMBER__FLOAT.082a0b81ca": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales__INSERTED_TIMESTAMP.f67ee5b673": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales__INSERTED_TIMESTAMP__day__1.95964877e9": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.e4335684a7": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FROM_ADDRESS.4c7061f7be": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3508543092": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_TO_ADDRESS.bf4d5ee339": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4e70413fbf": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE.c625f03712": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.69cb94d5e6": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__quixotic_sales_EVENT_TYPE.43592e3da0": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_EVENT_TYPE__bid_won__sale.3b9573950f": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__quixotic_sales__log_id.de4afadaef": ["model.optimism_models.silver__quixotic_sales"], "test.optimism_models.not_null_silver__delegations_BLOCK_NUMBER.9e98d78e82": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_NUMBER__NUMBER__FLOAT.6df66f7c87": ["model.optimism_models.silver__delegations"], "test.optimism_models.not_null_silver__delegations_BLOCK_TIMESTAMP.35dd022b83": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__delegations_BLOCK_TIMESTAMP__day__1.08b9fccdc2": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ca31b3721": ["model.optimism_models.silver__delegations"], "test.optimism_models.not_null_silver__delegations_TX_HASH.c9a8e85892": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TX_HASH__0_xX_0_9a_fA_F_.7dbf3786bf": ["model.optimism_models.silver__delegations"], "test.optimism_models.not_null_silver__delegations_STATUS.8316771be1": ["model.optimism_models.silver__delegations"], "test.optimism_models.not_null_silver__delegations_DELEGATOR.72a15524b0": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_DELEGATOR__0_xX_0_9a_fA_F_.432cc57b32": ["model.optimism_models.silver__delegations"], "test.optimism_models.not_null_silver__delegations_TO_DELEGATE.564317e0d5": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TO_DELEGATE__0_xX_0_9a_fA_F_.0bcad7e027": ["model.optimism_models.silver__delegations"], "test.optimism_models.not_null_silver__delegations_FROM_DELEGATE.22fab527f0": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_FROM_DELEGATE__0_xX_0_9a_fA_F_.33f77eec0c": ["model.optimism_models.silver__delegations"], "test.optimism_models.not_null_silver__delegations_DELEGATION_TYPE.758fb43fca": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__delegations_DELEGATION_TYPE__First_Time_Delegator__First_Time_Delegator_Self_Delegation__Self_Delegation__Re_Delegation.d93a91975f": ["model.optimism_models.silver__delegations"], "test.optimism_models.not_null_silver__delegations__INSERTED_TIMESTAMP.02ca6a9b60": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8ecbad1539": ["model.optimism_models.silver__delegations"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__delegations_TX_HASH.2612691b94": ["model.optimism_models.silver__delegations"], "test.optimism_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs_TX_HASH.18b09ee14d": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs_TOPICS.f042e94d85": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs_DATA.c5fac5c4a4": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs__LOG_ID.8c3f196b2a": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd": ["model.optimism_models.silver__logs"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd": ["model.optimism_models.silver__logs"], "test.optimism_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a": ["model.optimism_models.silver__logs"], "test.optimism_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2": ["model.optimism_models.silver__traces"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6": ["model.optimism_models.silver__traces"], "test.optimism_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73": ["model.optimism_models.silver__traces"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f": ["model.optimism_models.silver__traces"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044": ["model.optimism_models.silver__traces"], "test.optimism_models.not_null_silver__traces_TX_HASH.ccbdeb5e91": ["model.optimism_models.silver__traces"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b": ["model.optimism_models.silver__traces"], "test.optimism_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b": ["model.optimism_models.silver__traces"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575": ["model.optimism_models.silver__traces"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e": ["model.optimism_models.silver__traces"], "test.optimism_models.not_null_silver__traces_IDENTIFIER.ee73127ec0": ["model.optimism_models.silver__traces"], "test.optimism_models.not_null_silver__traces_ETH_VALUE.c271895d72": ["model.optimism_models.silver__traces"], "test.optimism_models.not_null_silver__traces_GAS.53d7bbcf6a": ["model.optimism_models.silver__traces"], "test.optimism_models.not_null_silver__traces_GAS_USED.eb9bf97ca1": ["model.optimism_models.silver__traces"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a": ["model.optimism_models.silver__traces"], "test.optimism_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94": ["model.optimism_models.silver__transfers"], "test.optimism_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": ["model.optimism_models.silver__transfers"], "test.optimism_models.not_null_silver__transfers_TX_HASH.9444c39bdc": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1": ["model.optimism_models.silver__transfers"], "test.optimism_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed": ["model.optimism_models.silver__transfers"], "test.optimism_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084": ["model.optimism_models.silver__transfers"], "test.optimism_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6": ["model.optimism_models.silver__transfers"], "test.optimism_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e": ["model.optimism_models.silver__transfers"], "test.optimism_models.not_null_silver__transfers__LOG_ID.29bb073a40": ["model.optimism_models.silver__transfers"], "test.optimism_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732": ["model.optimism_models.silver__transfers"], "test.optimism_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726": ["model.optimism_models.silver__transfers"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_HOUR__day__1.4eaeec6525": ["model.optimism_models.silver__prices"], "test.optimism_models.not_null_silver__prices_PRICE.09dcf418d9": ["model.optimism_models.silver__prices"], "test.optimism_models.not_null_silver__prices_TOKEN_ADDRESS.88e8e36eb7": ["model.optimism_models.silver__prices"], "test.optimism_models.not_null_silver__prices_SYMBOL.1202ffaafb": ["model.optimism_models.silver__prices"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__prices_HOUR__TOKEN_ADDRESS.81be2f1610": ["model.optimism_models.silver__prices"], "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_NUMBER.d17e3300f5": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_NUMBER__NUMBER__FLOAT.95ae3b4ebb": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_TIMESTAMP.5064d85700": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes_BLOCK_TIMESTAMP__day__1.7abc261f64": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ddc69ebd9": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_TX_HASH.ea782b936f": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_TX_HASH__0_xX_0_9a_fA_F_.f2181aeccc": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE.34fb7206f3": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.5aa7c03bb2": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FROM_ADDRESS.ac4015265a": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.b240acd078": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_TO_ADDRESS.f80609c528": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4cf19b01c1": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_GAUGE_ADDRESS.f4e37b3299": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.b3a9d2fb21": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS.d72bac0566": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.80c8df0851": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS.5ddfa8b438": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.5045a7c004": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_POOL_ADDRESS.b3deb110eb": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_POOL_ADDRESS__0_xX_0_9a_fA_F_.26bc1d2bb8": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_POOL_NAME.5b3dbc180f": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_POOL_NAME__STRING__VARCHAR.6f0b909e53": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_FROM_ADDRESS.032c3f8bac": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_FROM_ADDRESS__0_xX_0_9a_fA_F_.e41cb331b6": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_TOKEN_ID.960e2f017a": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_TOKEN_ID__FLOAT__NUMBER.5cb13a6161": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_VOTE_AMOUNT.78cf4c6dcb": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_AMOUNT__FLOAT__NUMBER.c7aeda3803": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes_VOTE_ACTION.24dfa35add": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_ACTION__STRING__VARCHAR.8e15743fa5": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_votes__INSERTED_TIMESTAMP.0837416a25": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes__INSERTED_TIMESTAMP__day__1.8b45a70e4f": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8bac0c2d50": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_votes__log_id.8be8eccea7": ["model.optimism_models.silver__velodrome_votes"], "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_NUMBER.e8df9c6e4b": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_NUMBER__NUMBER__FLOAT.46b48a749f": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_TIMESTAMP.e3e77a703d": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps_BLOCK_TIMESTAMP__day__1.81893be36d": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0aefbd7419": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_TX_HASH.f9411778f6": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TX_HASH__0_xX_0_9a_fA_F_.e02f06e3c5": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE.a4fd66528f": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS.927461b93a": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c470cb8ae4": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_TO_ADDRESS.718a3d0724": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d19844470c": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_CONTRACT_ADDRESS.9492333191": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.a31fdba461": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_POOL_ADDRESS.b7f8a1f0df": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.36f7e2cdb0": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_EVENT_INDEX.ded8be8ef9": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_EVENT_INDEX__NUMBER__FLOAT.33a5411d6d": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_POOL_NAME.dbfc07b184": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_POOL_NAME__STRING__VARCHAR.8a3bdf2656": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_IN.78c1f72d43": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_IN__FLOAT__NUMBER.bb6566c5da": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_OUT.0ef7186ec5": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_OUT__FLOAT__NUMBER.a6be3a5b60": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_SENDER_ADDRESS.79cfd325b1": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_SENDER_ADDRESS__0_xX_0_9a_fA_F_.6448e66b13": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_TO_ADDRESS.558be35c08": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TO_ADDRESS__0_xX_0_9a_fA_F_.926fec60ca": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_PLATFORM.faaf662fa3": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_PLATFORM__STRING__VARCHAR.ca106130da": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_IN.da702ffd72": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_IN__STRING__VARCHAR.10f3f47599": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_OUT.f1b9a3cc2c": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_OUT__STRING__VARCHAR.2f1b3dc3ae": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_IN.9fc512660f": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_IN__NUMBER__FLOAT.3dc13b2012": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_OUT.060ebf71e5": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_OUT__NUMBER__FLOAT.1a1ac75514": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN0_SYMBOL.847de78afa": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN0_SYMBOL__STRING__VARCHAR.fe785554ed": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN1_SYMBOL.739ac5c900": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN1_SYMBOL__STRING__VARCHAR.d5652f71d9": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_IN.e56286904c": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_IN__0_xX_0_9a_fA_F_.b221684840": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_OUT.924b20aec3": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_OUT__0_xX_0_9a_fA_F_.f6e8e74317": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE.c114b84530": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE__NUMBER__FLOAT.ee486d300f": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE_SYMBOL__STRING__VARCHAR.0d643a6936": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS.f0080516be": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.bfd23ef096": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_swaps__INSERTED_TIMESTAMP.18fef846e1": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps__INSERTED_TIMESTAMP__day__1.0a1fcbc4be": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3a0f72f5bb": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_swaps__log_id.9690b8bd9d": ["model.optimism_models.silver__velodrome_swaps"], "test.optimism_models.not_null_silver__velodrome_pools_POOL_ADDRESS.b22263023f": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_POOL_ADDRESS__0_xX_0_9a_fA_F_.a6f5b5b5ac": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_pools_POOL_NAME.1464154d9c": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_NAME__STRING__VARCHAR.9f0deccdb3": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_pools_POOL_TYPE.27d8a09174": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_TYPE__STRING__VARCHAR.ef989feef8": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_ADDRESS.a068a4c7ed": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.b2b7cfc620": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_ADDRESS.073866a28b": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.2d505d5f45": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_SYMBOL.a9b216cc08": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_SYMBOL__STRING__VARCHAR.479c7ce2c3": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_SYMBOL.67a2956e58": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_SYMBOL__STRING__VARCHAR.cf92832817": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_DECIMALS.87a6bcda86": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_DECIMALS__NUMBER__FLOAT.45542d1c45": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_DECIMALS.122edf1b2e": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_DECIMALS__NUMBER__FLOAT.a90243ee3a": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_pools__INSERTED_TIMESTAMP.3c2661f0f6": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a3b1910422": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_pools_POOL_ADDRESS.3673c0019a": ["model.optimism_models.silver__velodrome_pools"], "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_NUMBER.db66882206": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_NUMBER__NUMBER__FLOAT.075f69b847": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_TIMESTAMP.c0310ba7e8": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d04a8b81e6": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_TX_HASH.e188fd7277": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TX_HASH__0_xX_0_9a_fA_F_.da4b324b57": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_EVENT_INDEX.847db96e41": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_EVENT_INDEX__NUMBER__FLOAT.afee298092": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_CONTRACT_ADDRESS.d7c0ffcf81": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.dc13300f69": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_GAUGE_ADDRESS.c3c33a8921": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.28282e04c0": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS.b10eb9d144": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.7f3467ff74": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS.4f825859d9": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.634c71699a": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_CREATOR_ADDRESS.94c9fafe0b": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.dc68a13b64": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_POOL_ADDRESS.62e1712c02": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_POOL_ADDRESS__0_xX_0_9a_fA_F_.d5d5aa33ba": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_ADDRESS.dffed249fe": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.ebc0a56334": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_ADDRESS.ca236f2308": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.d9319cb22a": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_SYMBOL.11b915fd71": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN0_SYMBOL__STRING__VARCHAR.c08774a1b6": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_SYMBOL.8f042bb9ad": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN1_SYMBOL__STRING__VARCHAR.c4793d4319": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges_POOL_NAME.316bb0ab2b": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_POOL_NAME__STRING__VARCHAR.500a13b310": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_gauges__INSERTED_TIMESTAMP.d1161c3d84": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9ee131e5c7": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_gauges_GAUGE_ADDRESS.931f433d89": ["model.optimism_models.silver__velodrome_gauges"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_NUMBER.867112395c": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_NUMBER__NUMBER__FLOAT.5077382b71": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP.273af3e478": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__day__1.0f2adaafec": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.494792a80e": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TX_HASH.740d98d451": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TX_HASH__0_xX_0_9a_fA_F_.768035d13e": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE.76fbc99ec2": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.51142a4ab8": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS.5f39a9634a": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.693727d4bc": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS.c497aefd3c": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.01580727be": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS.f1a269cb7b": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.96b1f8942b": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_EVENT_INDEX.e0ddce03fe": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_EVENT_INDEX__NUMBER__FLOAT.967b32b024": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_REWARD_TYPE.4be428306d": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__velodrome_claimed_rewards_REWARD_TYPE__venft_distribution__lp_reward__voter_reward.522f29f356": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ID.f6b162d6e5": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_ID__NUMBER__FLOAT.354aca98a0": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT.909a3ff4d6": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT__NUMBER__FLOAT.f22caa5247": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_SYMBOL__STRING__VARCHAR.7f4548e2c3": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ADDRESS.6951c79e87": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.d279fceb6d": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIM_EPOCH.a84dfaafe7": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIM_EPOCH__NUMBER__FLOAT.16a8a49ba0": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_MAX_EPOCH.1e9e5275e4": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_MAX_EPOCH__NUMBER__FLOAT.bfa0081e38": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP.6b00d1c03b": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__day__1.dfba6825cc": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0162275e37": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_claimed_rewards__log_id.9041f8ac5c": ["model.optimism_models.silver__velodrome_claimed_rewards"], "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_NUMBER.0c8d62348b": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_NUMBER__NUMBER__FLOAT.01b32d6d97": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_TIMESTAMP.17262e258e": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__day__1.d4491742bb": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.fc7bcab5bc": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_TX_HASH.61c8cd66de": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TX_HASH__0_xX_0_9a_fA_F_.f498ec7f97": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE.5926b88f99": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.0c6e7ce360": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS.870b67eafa": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.338045b848": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS.1812f59ae9": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.93de5e2c54": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_ADDRESS.c301aacd27": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.8d522d3a86": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_EVENT_INDEX.83a7d6cda9": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_EVENT_INDEX__NUMBER__FLOAT.f4fcf2e44a": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_NAME.17ee6c9396": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_NAME__STRING__VARCHAR.66185f625f": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_TYPE.cf35baf138": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_TYPE__STRING__VARCHAR.c8d0c45b32": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_SENDER_ADDRESS.a90cf18f0d": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_SENDER_ADDRESS__0_xX_0_9a_fA_F_.41c53b96ae": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_ACTION.1642313e2b": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_ACTION__STRING__VARCHAR.0d0cc79321": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_SYMBOL.ccc899f706": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_SYMBOL__STRING__VARCHAR.1281795ed3": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_SYMBOL.6a7a4492c8": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_SYMBOL__STRING__VARCHAR.cf591ca414": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_AMOUNT.258a084613": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_AMOUNT__NUMBER__FLOAT.cec7460a83": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_AMOUNT.f7ae01ab06": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_AMOUNT__NUMBER__FLOAT.9de4830e55": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_ADDRESS.4d145705b6": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.7783e3c07c": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_ADDRESS.de0b5c759e": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.8ac6a05161": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_ACTION.46c749b81c": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_ACTION__STRING__VARCHAR.dcdab855bc": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT.8c59651af4": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.6e77152a60": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_LP_actions__INSERTED_TIMESTAMP.9227acd465": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__day__1.4e5ebafba5": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0c422d391e": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_LP_actions__log_id.ccd2557d22": ["model.optimism_models.silver__velodrome_LP_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_NUMBER.5d644db8af": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_NUMBER__NUMBER__FLOAT.1a3e7436d3": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_TIMESTAMP.8e723334bf": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__day__1.0721745b42": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d7899fefa5": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_TX_HASH.e89122421a": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TX_HASH__0_xX_0_9a_fA_F_.56b7e8cea4": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE.d7259bf014": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.68aca2d8a1": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS.cd1ca51e37": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.568834eac9": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS.a6dffcce13": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.b4b6ee55f2": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_CONTRACT_ADDRESS.5060042aa5": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.042ba630d4": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_ADDRESS.6efec8b758": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.fe271b790b": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_EVENT_INDEX.7bbd8665ee": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_EVENT_INDEX__NUMBER__FLOAT.52570d7dea": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_NAME.20d0d74174": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_NAME__STRING__VARCHAR.1b4e1f666e": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_STAKING_ACTION_TYPE.a44cdbdfba": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_STAKING_ACTION_TYPE__STRING__VARCHAR.82f2f657ef": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_GAUGE_ADDRESS.822c043f4b": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.94eb0e3622": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS.be5b83938f": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.519ae0b0d0": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_TYPE.caf8f6eeb0": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_TYPE__STRING__VARCHAR.83867f6bef": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_SYMBOL.1252a25607": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN0_SYMBOL__STRING__VARCHAR.318363932f": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_SYMBOL.8fda729d80": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN1_SYMBOL__STRING__VARCHAR.663e12acf5": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_ADDRESS.e46e2b741a": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.0262973027": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_ADDRESS.22ca55005d": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.1e893df11f": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT.ac462781e1": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.61378c0c21": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_staking_actions__INSERTED_TIMESTAMP.77cd94f1b7": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__day__1.b66fdd5dd3": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.57a30bac81": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_staking_actions__log_id.23bbcb6b7d": ["model.optimism_models.silver__velodrome_staking_actions"], "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_NUMBER.fce42abee7": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_NUMBER__NUMBER__FLOAT.6cacb87aaf": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_TIMESTAMP.33067b06c5": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks_BLOCK_TIMESTAMP__day__1.f1c5543e48": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7752a3b106": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_TX_HASH.084e4f7b57": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_TX_HASH__0_xX_0_9a_fA_F_.183f6aca6a": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE.d7800eb549": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.271c91a167": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FROM_ADDRESS.49486480b8": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.26b9e6ed2a": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_TO_ADDRESS.ebd6287a9e": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.7cdb369b98": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_CONTRACT_ADDRESS.2a193b069a": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.43c3bc7c46": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_EVENT_INDEX.c1312792ea": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_EVENT_INDEX__NUMBER__FLOAT.eec681dada": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_PROVIDER_ADDRESS.60796cd227": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.110964f397": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_UNLOCK_DATE.87f0105e03": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_UNLOCK_DATE__TIMESTAMP_NTZ.e8b79c9e6a": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_TOKEN_ID.2f7a97d9ac": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_TOKEN_ID__NUMBER__FLOAT.8719148378": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_VELO_AMOUNT.171291a904": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT__NUMBER__FLOAT.2b3c2c5ed1": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT_USD__NUMBER__FLOAT.185e474abd": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks_DEPOSIT_TYPE.76ebbffe73": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_silver__velodrome_locks__INSERTED_TIMESTAMP.64baa36766": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks__INSERTED_TIMESTAMP__day__1.e5390e0fcc": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.01cf76bd68": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_locks__log_id.9259e4ec8a": ["model.optimism_models.silver__velodrome_locks"], "test.optimism_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": ["model.optimism_models.core__dim_labels"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__optimism.c6627e5379": ["model.optimism_models.core__dim_labels"], "test.optimism_models.not_null_core__dim_labels_CREATOR.0c77d5749c": ["model.optimism_models.core__dim_labels"], "test.optimism_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": ["model.optimism_models.core__dim_labels"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a": ["model.optimism_models.core__dim_labels"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1": ["model.optimism_models.core__dim_labels"], "test.optimism_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": ["model.optimism_models.core__dim_labels"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947": ["model.optimism_models.core__dim_labels"], "test.optimism_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": ["model.optimism_models.core__dim_labels"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5": ["model.optimism_models.core__dim_labels"], "test.optimism_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc": ["model.optimism_models.core__dim_labels"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300": ["model.optimism_models.core__dim_labels"], "test.optimism_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9": ["model.optimism_models.core__dim_labels"], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_NUMBER.27c35072bf": ["model.optimism_models.core__fact_delegations"], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_TIMESTAMP.df02526938": ["model.optimism_models.core__fact_delegations"], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TX_HASH.bba5c2eb6a": ["model.optimism_models.core__fact_delegations"], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_STATUS.f94fd1cdb0": ["model.optimism_models.core__fact_delegations"], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATOR.9274d7fda4": ["model.optimism_models.core__fact_delegations"], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TO_DELEGATE.71760508b8": ["model.optimism_models.core__fact_delegations"], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_FROM_DELEGATE.1dea18062b": ["model.optimism_models.core__fact_delegations"], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATION_TYPE.4b72476460": ["model.optimism_models.core__fact_delegations"], "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__2.520a27875c": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68": ["model.optimism_models.sushi__ez_swaps"], "test.optimism_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1": ["model.optimism_models.sushi__ez_swaps"], "model.optimism_models.bronze__submission_hashes": ["source.optimism_models.ethereum_silver.optimism_submission_hashes"], "model.optimism_models.bronze__state_hashes": ["source.optimism_models.ethereum_silver.optimism_state_hashes"], "model.optimism_models.core__fact_l1_state_root_submissions": ["model.optimism_models.bronze__state_hashes"], "model.optimism_models.core__fact_l1_submissions": ["model.optimism_models.bronze__submission_hashes"], "model.optimism_models.core__fact_transactions": ["model.optimism_models.silver__transactions"], "model.optimism_models.core__fact_blocks": ["model.optimism_models.silver__blocks"], "model.optimism_models.silver__transactions": ["model.optimism_models.bronze__state_hashes", "model.optimism_models.bronze__submission_hashes", "model.optimism_models.bronze__transactions"], "test.optimism_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_TX_HASH.8a2cc32062": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_NONCE.3eac435cf9": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_POSITION.6be7c293c7": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_FROM_ADDRESS.002109da43": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_GAS_PRICE.9ee195e584": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_STATUS.42a484ef7a": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_GAS_USED.1c943486c0": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_TX_FEE.f2f0cdc085": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_TX_JSON.c989b71e6a": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_TX_HASH.bdc6c0317a": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_BATCH_INDEX.d699a79eb7": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_BATCH_INDEX.7393916169": ["model.optimism_models.silver__transactions"], "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_TX_HASH.752daa2372": ["model.optimism_models.silver__transactions"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": ["model.optimism_models.silver__transactions"], "test.optimism_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e": ["model.optimism_models.silver__transactions"], "model.optimism_models.silver__blocks": ["model.optimism_models.bronze__blocks", "model.optimism_models.bronze__state_hashes", "model.optimism_models.bronze__submission_hashes"], "test.optimism_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_GAS_USED.637b37099a": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_HASH.bc44a39f94": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_PARENT_HASH.a17a399346": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_SIZE.f1fa8f466b": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_TX_HASH.42129f75a7": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_BATCH_INDEX.7d230d0c88": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_BATCH_INDEX.673eec8966": ["model.optimism_models.silver__blocks"], "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_TX_HASH.c5a7efc29c": ["model.optimism_models.silver__blocks"], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca": ["model.optimism_models.silver__blocks"], "source.optimism_models.prod.optimism_blocks": [], "source.optimism_models.prod.optimism_txs": [], "source.optimism_models.crosschain.address_labels": [], "source.optimism_models.ethereum.fact_hourly_token_prices": [], "source.optimism_models.shared.prices_v2": [], "source.optimism_models.shared.market_asset_metadata": [], "source.optimism_models.legacy_silver.hours": [], "source.optimism_models.legacy_silver.market_asset_metadata": [], "source.optimism_models.legacy_silver.prices_v2": [], "source.optimism_models.optimism_pools.SUSHI_DIM_DEX_POOLS": [], "source.optimism_models.prices.prices_v2": [], "source.optimism_models.ethereum_silver.optimism_state_hashes": [], "source.optimism_models.ethereum_silver.optimism_submission_hashes": []}, "child_map": {"model.optimism_models.bronze__blocks": ["model.optimism_models.silver__blocks", "model.optimism_models.silver__traces"], "model.optimism_models.bronze__transactions": ["model.optimism_models.silver__logs", "model.optimism_models.silver__traces", "model.optimism_models.silver__transactions"], "model.optimism_models.silver__quixotic_sales": ["model.optimism_models.core__ez_nft_sales", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_EVENT_TYPE__bid_won__sale.3b9573950f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_PLATFORM_NAME__quixotic.c11519c9fc", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_NUMBER__NUMBER__FLOAT.d5bc0fd646", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c57675bdd6", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE_USD__NUMBER__FLOAT.082a0b81ca", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE__NUMBER__FLOAT.89e9d65183", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.e4335684a7", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.8a823ec7b8", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.fb674f9114", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3508543092", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.69cb94d5e6", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4e70413fbf", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.b8e09a055d", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.e027e64844", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_TX_HASH__0_xX_0_9a_fA_F_.864a57e1fc", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales_BLOCK_TIMESTAMP__day__1.d5189a899a", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales__INSERTED_TIMESTAMP__day__1.95964877e9", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__quixotic_sales__log_id.de4afadaef", "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_NUMBER.70f83df7ca", "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_TIMESTAMP.6a8c6a5e2b", "test.optimism_models.not_null_silver__quixotic_sales_BUYER_ADDRESS.0acf1d3921", "test.optimism_models.not_null_silver__quixotic_sales_CURRENCY_ADDRESS.8bb2544e69", "test.optimism_models.not_null_silver__quixotic_sales_EVENT_TYPE.43592e3da0", "test.optimism_models.not_null_silver__quixotic_sales_NFT_ADDRESS.03d9666022", "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FROM_ADDRESS.4c7061f7be", "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE.c625f03712", "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_TO_ADDRESS.bf4d5ee339", "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_ADDRESS.b320c65317", "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_NAME.4f669cf98f", "test.optimism_models.not_null_silver__quixotic_sales_PRICE.4dfbfe1d9a", "test.optimism_models.not_null_silver__quixotic_sales_SELLER_ADDRESS.0c5df1a76d", "test.optimism_models.not_null_silver__quixotic_sales_TOKENID.62dfe07e06", "test.optimism_models.not_null_silver__quixotic_sales_TX_HASH.73d4776795", "test.optimism_models.not_null_silver__quixotic_sales__INSERTED_TIMESTAMP.f67ee5b673"], "model.optimism_models.silver__transfers": ["model.optimism_models.core__fact_token_transfers", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726", "test.optimism_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531", "test.optimism_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.optimism_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef", "test.optimism_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "test.optimism_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127", "test.optimism_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732", "test.optimism_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7", "test.optimism_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c", "test.optimism_models.not_null_silver__transfers_TX_HASH.9444c39bdc", "test.optimism_models.not_null_silver__transfers__LOG_ID.29bb073a40"], "model.optimism_models.silver__delegations": ["model.optimism_models.core__fact_delegations", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__delegations_DELEGATION_TYPE__First_Time_Delegator__First_Time_Delegator_Self_Delegation__Self_Delegation__Re_Delegation.d93a91975f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_NUMBER__NUMBER__FLOAT.6df66f7c87", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ca31b3721", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8ecbad1539", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_DELEGATOR__0_xX_0_9a_fA_F_.432cc57b32", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_FROM_DELEGATE__0_xX_0_9a_fA_F_.33f77eec0c", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TO_DELEGATE__0_xX_0_9a_fA_F_.0bcad7e027", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TX_HASH__0_xX_0_9a_fA_F_.7dbf3786bf", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__delegations_BLOCK_TIMESTAMP__day__1.08b9fccdc2", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__delegations_TX_HASH.2612691b94", "test.optimism_models.not_null_silver__delegations_BLOCK_NUMBER.9e98d78e82", "test.optimism_models.not_null_silver__delegations_BLOCK_TIMESTAMP.35dd022b83", "test.optimism_models.not_null_silver__delegations_DELEGATION_TYPE.758fb43fca", "test.optimism_models.not_null_silver__delegations_DELEGATOR.72a15524b0", "test.optimism_models.not_null_silver__delegations_FROM_DELEGATE.22fab527f0", "test.optimism_models.not_null_silver__delegations_STATUS.8316771be1", "test.optimism_models.not_null_silver__delegations_TO_DELEGATE.564317e0d5", "test.optimism_models.not_null_silver__delegations_TX_HASH.c9a8e85892", "test.optimism_models.not_null_silver__delegations__INSERTED_TIMESTAMP.02ca6a9b60"], "model.optimism_models.silver__logs": ["model.optimism_models.core__fact_event_logs", "model.optimism_models.silver__quixotic_sales", "model.optimism_models.silver__transfers", "model.optimism_models.silver__velodrome_LP_actions", "model.optimism_models.silver__velodrome_claimed_rewards", "model.optimism_models.silver__velodrome_claimed_rewards", "model.optimism_models.silver__velodrome_gauges", "model.optimism_models.silver__velodrome_locks", "model.optimism_models.silver__velodrome_pools", "model.optimism_models.silver__velodrome_staking_actions", "model.optimism_models.silver__velodrome_staking_actions", "model.optimism_models.silver__velodrome_swaps", "model.optimism_models.silver__velodrome_votes", "model.optimism_models.sushi__ez_swaps", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd", "test.optimism_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c", "test.optimism_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c", "test.optimism_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb", "test.optimism_models.not_null_silver__logs_DATA.c5fac5c4a4", "test.optimism_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7", "test.optimism_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0", "test.optimism_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91", "test.optimism_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17", "test.optimism_models.not_null_silver__logs_TOPICS.f042e94d85", "test.optimism_models.not_null_silver__logs_TX_HASH.18b09ee14d", "test.optimism_models.not_null_silver__logs__LOG_ID.8c3f196b2a", "test.optimism_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a"], "model.optimism_models.silver__traces": ["model.optimism_models.core__ez_eth_transfers", "model.optimism_models.core__fact_traces", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a", "test.optimism_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2", "test.optimism_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73", "test.optimism_models.not_null_silver__traces_ETH_VALUE.c271895d72", "test.optimism_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b", "test.optimism_models.not_null_silver__traces_GAS.53d7bbcf6a", "test.optimism_models.not_null_silver__traces_GAS_USED.eb9bf97ca1", "test.optimism_models.not_null_silver__traces_IDENTIFIER.ee73127ec0", "test.optimism_models.not_null_silver__traces_TX_HASH.ccbdeb5e91"], "model.optimism_models.silver__prices": ["model.optimism_models.core__fact_hourly_token_prices", "model.optimism_models.silver__quixotic_sales", "model.optimism_models.silver__velodrome_LP_actions", "model.optimism_models.silver__velodrome_claimed_rewards", "model.optimism_models.silver__velodrome_locks", "model.optimism_models.silver__velodrome_swaps", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_HOUR__day__1.4eaeec6525", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__prices_HOUR__TOKEN_ADDRESS.81be2f1610", "test.optimism_models.not_null_silver__prices_PRICE.09dcf418d9", "test.optimism_models.not_null_silver__prices_SYMBOL.1202ffaafb", "test.optimism_models.not_null_silver__prices_TOKEN_ADDRESS.88e8e36eb7"], "model.optimism_models.silver__velodrome_votes": ["model.optimism_models.velodrome__ez_votes", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_NUMBER__NUMBER__FLOAT.95ae3b4ebb", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ddc69ebd9", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_POOL_NAME__STRING__VARCHAR.6f0b909e53", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_TOKEN_ID__FLOAT__NUMBER.5cb13a6161", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_ACTION__STRING__VARCHAR.8e15743fa5", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_AMOUNT__FLOAT__NUMBER.c7aeda3803", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8bac0c2d50", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.80c8df0851", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_FROM_ADDRESS__0_xX_0_9a_fA_F_.e41cb331b6", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.b3a9d2fb21", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.5045a7c004", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.b240acd078", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.5aa7c03bb2", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4cf19b01c1", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_POOL_ADDRESS__0_xX_0_9a_fA_F_.26bc1d2bb8", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_TX_HASH__0_xX_0_9a_fA_F_.f2181aeccc", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes_BLOCK_TIMESTAMP__day__1.7abc261f64", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes__INSERTED_TIMESTAMP__day__1.8b45a70e4f", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_votes__log_id.8be8eccea7", "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_NUMBER.d17e3300f5", "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_TIMESTAMP.5064d85700", "test.optimism_models.not_null_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS.d72bac0566", "test.optimism_models.not_null_silver__velodrome_votes_FROM_ADDRESS.032c3f8bac", "test.optimism_models.not_null_silver__velodrome_votes_GAUGE_ADDRESS.f4e37b3299", "test.optimism_models.not_null_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS.5ddfa8b438", "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FROM_ADDRESS.ac4015265a", "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE.34fb7206f3", "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_TO_ADDRESS.f80609c528", "test.optimism_models.not_null_silver__velodrome_votes_POOL_ADDRESS.b3deb110eb", "test.optimism_models.not_null_silver__velodrome_votes_POOL_NAME.5b3dbc180f", "test.optimism_models.not_null_silver__velodrome_votes_TOKEN_ID.960e2f017a", "test.optimism_models.not_null_silver__velodrome_votes_TX_HASH.ea782b936f", "test.optimism_models.not_null_silver__velodrome_votes_VOTE_ACTION.24dfa35add", "test.optimism_models.not_null_silver__velodrome_votes_VOTE_AMOUNT.78cf4c6dcb", "test.optimism_models.not_null_silver__velodrome_votes__INSERTED_TIMESTAMP.0837416a25"], "model.optimism_models.silver__velodrome_pools": ["model.optimism_models.silver__velodrome_LP_actions", "model.optimism_models.silver__velodrome_claimed_rewards", "model.optimism_models.silver__velodrome_gauges", "model.optimism_models.silver__velodrome_staking_actions", "model.optimism_models.silver__velodrome_swaps", "model.optimism_models.velodrome__ez_pool_details", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_NAME__STRING__VARCHAR.9f0deccdb3", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_TYPE__STRING__VARCHAR.ef989feef8", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_DECIMALS__NUMBER__FLOAT.a90243ee3a", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_SYMBOL__STRING__VARCHAR.479c7ce2c3", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_DECIMALS__NUMBER__FLOAT.45542d1c45", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_SYMBOL__STRING__VARCHAR.cf92832817", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a3b1910422", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_POOL_ADDRESS__0_xX_0_9a_fA_F_.a6f5b5b5ac", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.b2b7cfc620", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.2d505d5f45", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_pools_POOL_ADDRESS.3673c0019a", "test.optimism_models.not_null_silver__velodrome_pools_POOL_ADDRESS.b22263023f", "test.optimism_models.not_null_silver__velodrome_pools_POOL_NAME.1464154d9c", "test.optimism_models.not_null_silver__velodrome_pools_POOL_TYPE.27d8a09174", "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_ADDRESS.a068a4c7ed", "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_DECIMALS.122edf1b2e", "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_SYMBOL.a9b216cc08", "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_ADDRESS.073866a28b", "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_DECIMALS.87a6bcda86", "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_SYMBOL.67a2956e58", "test.optimism_models.not_null_silver__velodrome_pools__INSERTED_TIMESTAMP.3c2661f0f6"], "model.optimism_models.silver__velodrome_swaps": ["model.optimism_models.velodrome__ez_swaps", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_IN__FLOAT__NUMBER.bb6566c5da", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_OUT__FLOAT__NUMBER.a6be3a5b60", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_NUMBER__NUMBER__FLOAT.46b48a749f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0aefbd7419", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_IN__NUMBER__FLOAT.3dc13b2012", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_OUT__NUMBER__FLOAT.1a1ac75514", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_EVENT_INDEX__NUMBER__FLOAT.33a5411d6d", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE_SYMBOL__STRING__VARCHAR.0d643a6936", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE__NUMBER__FLOAT.ee486d300f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_PLATFORM__STRING__VARCHAR.ca106130da", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_POOL_NAME__STRING__VARCHAR.8a3bdf2656", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_IN__STRING__VARCHAR.10f3f47599", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_OUT__STRING__VARCHAR.2f1b3dc3ae", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN0_SYMBOL__STRING__VARCHAR.fe785554ed", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN1_SYMBOL__STRING__VARCHAR.d5652f71d9", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3a0f72f5bb", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.a31fdba461", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.bfd23ef096", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c470cb8ae4", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d19844470c", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.36f7e2cdb0", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_SENDER_ADDRESS__0_xX_0_9a_fA_F_.6448e66b13", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_IN__0_xX_0_9a_fA_F_.b221684840", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_OUT__0_xX_0_9a_fA_F_.f6e8e74317", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TO_ADDRESS__0_xX_0_9a_fA_F_.926fec60ca", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TX_HASH__0_xX_0_9a_fA_F_.e02f06e3c5", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps_BLOCK_TIMESTAMP__day__1.81893be36d", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps__INSERTED_TIMESTAMP__day__1.0a1fcbc4be", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_swaps__log_id.9690b8bd9d", "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_IN.78c1f72d43", "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_OUT.0ef7186ec5", "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_NUMBER.e8df9c6e4b", "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_TIMESTAMP.e3e77a703d", "test.optimism_models.not_null_silver__velodrome_swaps_CONTRACT_ADDRESS.9492333191", "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_IN.9fc512660f", "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_OUT.060ebf71e5", "test.optimism_models.not_null_silver__velodrome_swaps_EVENT_INDEX.ded8be8ef9", "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE.c114b84530", "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS.f0080516be", "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS.927461b93a", "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE.a4fd66528f", "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_TO_ADDRESS.718a3d0724", "test.optimism_models.not_null_silver__velodrome_swaps_PLATFORM.faaf662fa3", "test.optimism_models.not_null_silver__velodrome_swaps_POOL_ADDRESS.b7f8a1f0df", "test.optimism_models.not_null_silver__velodrome_swaps_POOL_NAME.dbfc07b184", "test.optimism_models.not_null_silver__velodrome_swaps_SENDER_ADDRESS.79cfd325b1", "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_IN.da702ffd72", "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_OUT.f1b9a3cc2c", "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN0_SYMBOL.847de78afa", "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN1_SYMBOL.739ac5c900", "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_IN.e56286904c", "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_OUT.924b20aec3", "test.optimism_models.not_null_silver__velodrome_swaps_TO_ADDRESS.558be35c08", "test.optimism_models.not_null_silver__velodrome_swaps_TX_HASH.f9411778f6", "test.optimism_models.not_null_silver__velodrome_swaps__INSERTED_TIMESTAMP.18fef846e1"], "model.optimism_models.silver__velodrome_gauges": ["model.optimism_models.silver__velodrome_votes", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_NUMBER__NUMBER__FLOAT.075f69b847", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d04a8b81e6", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_EVENT_INDEX__NUMBER__FLOAT.afee298092", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_POOL_NAME__STRING__VARCHAR.500a13b310", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN0_SYMBOL__STRING__VARCHAR.c08774a1b6", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN1_SYMBOL__STRING__VARCHAR.c4793d4319", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9ee131e5c7", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.dc13300f69", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.dc68a13b64", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.7f3467ff74", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.28282e04c0", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.634c71699a", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_POOL_ADDRESS__0_xX_0_9a_fA_F_.d5d5aa33ba", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.ebc0a56334", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.d9319cb22a", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TX_HASH__0_xX_0_9a_fA_F_.da4b324b57", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_gauges_GAUGE_ADDRESS.931f433d89", "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_NUMBER.db66882206", "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_TIMESTAMP.c0310ba7e8", "test.optimism_models.not_null_silver__velodrome_gauges_CONTRACT_ADDRESS.d7c0ffcf81", "test.optimism_models.not_null_silver__velodrome_gauges_CREATOR_ADDRESS.94c9fafe0b", "test.optimism_models.not_null_silver__velodrome_gauges_EVENT_INDEX.847db96e41", "test.optimism_models.not_null_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS.b10eb9d144", "test.optimism_models.not_null_silver__velodrome_gauges_GAUGE_ADDRESS.c3c33a8921", "test.optimism_models.not_null_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS.4f825859d9", "test.optimism_models.not_null_silver__velodrome_gauges_POOL_ADDRESS.62e1712c02", "test.optimism_models.not_null_silver__velodrome_gauges_POOL_NAME.316bb0ab2b", "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_ADDRESS.dffed249fe", "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_SYMBOL.11b915fd71", "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_ADDRESS.ca236f2308", "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_SYMBOL.8f042bb9ad", "test.optimism_models.not_null_silver__velodrome_gauges_TX_HASH.e188fd7277", "test.optimism_models.not_null_silver__velodrome_gauges__INSERTED_TIMESTAMP.d1161c3d84"], "model.optimism_models.silver__velodrome_locks": ["model.optimism_models.velodrome__ez_velo_locks", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_NUMBER__NUMBER__FLOAT.6cacb87aaf", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7752a3b106", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_EVENT_INDEX__NUMBER__FLOAT.eec681dada", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_TOKEN_ID__NUMBER__FLOAT.8719148378", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_UNLOCK_DATE__TIMESTAMP_NTZ.e8b79c9e6a", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT_USD__NUMBER__FLOAT.185e474abd", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT__NUMBER__FLOAT.2b3c2c5ed1", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.01cf76bd68", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.43c3bc7c46", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.26b9e6ed2a", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.271c91a167", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.7cdb369b98", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.110964f397", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_TX_HASH__0_xX_0_9a_fA_F_.183f6aca6a", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks_BLOCK_TIMESTAMP__day__1.f1c5543e48", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks__INSERTED_TIMESTAMP__day__1.e5390e0fcc", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_locks__log_id.9259e4ec8a", "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_NUMBER.fce42abee7", "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_TIMESTAMP.33067b06c5", "test.optimism_models.not_null_silver__velodrome_locks_CONTRACT_ADDRESS.2a193b069a", "test.optimism_models.not_null_silver__velodrome_locks_DEPOSIT_TYPE.76ebbffe73", "test.optimism_models.not_null_silver__velodrome_locks_EVENT_INDEX.c1312792ea", "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FROM_ADDRESS.49486480b8", "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE.d7800eb549", "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_TO_ADDRESS.ebd6287a9e", "test.optimism_models.not_null_silver__velodrome_locks_PROVIDER_ADDRESS.60796cd227", "test.optimism_models.not_null_silver__velodrome_locks_TOKEN_ID.2f7a97d9ac", "test.optimism_models.not_null_silver__velodrome_locks_TX_HASH.084e4f7b57", "test.optimism_models.not_null_silver__velodrome_locks_UNLOCK_DATE.87f0105e03", "test.optimism_models.not_null_silver__velodrome_locks_VELO_AMOUNT.171291a904", "test.optimism_models.not_null_silver__velodrome_locks__INSERTED_TIMESTAMP.64baa36766"], "model.optimism_models.velodrome__ez_votes": [], "model.optimism_models.velodrome__ez_pool_details": [], "model.optimism_models.velodrome__ez_swaps": [], "model.optimism_models.silver__velodrome_claimed_rewards": ["model.optimism_models.velodrome__ez_claimed_rewards", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__velodrome_claimed_rewards_REWARD_TYPE__venft_distribution__lp_reward__voter_reward.522f29f356", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_NUMBER__NUMBER__FLOAT.5077382b71", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.494792a80e", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT__NUMBER__FLOAT.f22caa5247", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIM_EPOCH__NUMBER__FLOAT.16a8a49ba0", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_EVENT_INDEX__NUMBER__FLOAT.967b32b024", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_MAX_EPOCH__NUMBER__FLOAT.bfa0081e38", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_ID__NUMBER__FLOAT.354aca98a0", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_SYMBOL__STRING__VARCHAR.7f4548e2c3", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0162275e37", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.96b1f8942b", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.693727d4bc", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.51142a4ab8", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.01580727be", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.d279fceb6d", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TX_HASH__0_xX_0_9a_fA_F_.768035d13e", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__day__1.0f2adaafec", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__day__1.dfba6825cc", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_claimed_rewards__log_id.9041f8ac5c", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_NUMBER.867112395c", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP.273af3e478", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT.909a3ff4d6", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIM_EPOCH.a84dfaafe7", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS.f1a269cb7b", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_EVENT_INDEX.e0ddce03fe", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_MAX_EPOCH.1e9e5275e4", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS.5f39a9634a", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE.76fbc99ec2", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS.c497aefd3c", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_REWARD_TYPE.4be428306d", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ADDRESS.6951c79e87", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ID.f6b162d6e5", "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TX_HASH.740d98d451", "test.optimism_models.not_null_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP.6b00d1c03b"], "model.optimism_models.velodrome__ez_claimed_rewards": [], "model.optimism_models.velodrome__ez_staking_actions": [], "model.optimism_models.silver__velodrome_LP_actions": ["model.optimism_models.velodrome__ez_lp_actions", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_NUMBER__NUMBER__FLOAT.01b32d6d97", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.fc7bcab5bc", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_EVENT_INDEX__NUMBER__FLOAT.f4fcf2e44a", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_ACTION__STRING__VARCHAR.0d0cc79321", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_ACTION__STRING__VARCHAR.dcdab855bc", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.6e77152a60", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_NAME__STRING__VARCHAR.66185f625f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_TYPE__STRING__VARCHAR.c8d0c45b32", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_AMOUNT__NUMBER__FLOAT.cec7460a83", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_SYMBOL__STRING__VARCHAR.1281795ed3", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_AMOUNT__NUMBER__FLOAT.9de4830e55", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_SYMBOL__STRING__VARCHAR.cf591ca414", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0c422d391e", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.338045b848", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.0c6e7ce360", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.93de5e2c54", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.8d522d3a86", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_SENDER_ADDRESS__0_xX_0_9a_fA_F_.41c53b96ae", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.7783e3c07c", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.8ac6a05161", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TX_HASH__0_xX_0_9a_fA_F_.f498ec7f97", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__day__1.d4491742bb", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__day__1.4e5ebafba5", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_LP_actions__log_id.ccd2557d22", "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_NUMBER.0c8d62348b", "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_TIMESTAMP.17262e258e", "test.optimism_models.not_null_silver__velodrome_LP_actions_EVENT_INDEX.83a7d6cda9", "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_ACTION.1642313e2b", "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_ACTION.46c749b81c", "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT.8c59651af4", "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS.870b67eafa", "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE.5926b88f99", "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS.1812f59ae9", "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_ADDRESS.c301aacd27", "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_NAME.17ee6c9396", "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_TYPE.cf35baf138", "test.optimism_models.not_null_silver__velodrome_LP_actions_SENDER_ADDRESS.a90cf18f0d", "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_ADDRESS.4d145705b6", "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_AMOUNT.258a084613", "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_SYMBOL.ccc899f706", "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_ADDRESS.de0b5c759e", "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_AMOUNT.f7ae01ab06", "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_SYMBOL.6a7a4492c8", "test.optimism_models.not_null_silver__velodrome_LP_actions_TX_HASH.61c8cd66de", "test.optimism_models.not_null_silver__velodrome_LP_actions__INSERTED_TIMESTAMP.9227acd465"], "model.optimism_models.silver__velodrome_staking_actions": ["model.optimism_models.velodrome__ez_staking_actions", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_NUMBER__NUMBER__FLOAT.1a3e7436d3", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d7899fefa5", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_EVENT_INDEX__NUMBER__FLOAT.52570d7dea", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.61378c0c21", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_NAME__STRING__VARCHAR.1b4e1f666e", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_TYPE__STRING__VARCHAR.83867f6bef", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_STAKING_ACTION_TYPE__STRING__VARCHAR.82f2f657ef", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN0_SYMBOL__STRING__VARCHAR.318363932f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN1_SYMBOL__STRING__VARCHAR.663e12acf5", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.57a30bac81", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.042ba630d4", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.94eb0e3622", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.519ae0b0d0", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.568834eac9", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.68aca2d8a1", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.b4b6ee55f2", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.fe271b790b", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.0262973027", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.1e893df11f", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TX_HASH__0_xX_0_9a_fA_F_.56b7e8cea4", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__day__1.0721745b42", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__day__1.b66fdd5dd3", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_staking_actions__log_id.23bbcb6b7d", "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_NUMBER.5d644db8af", "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_TIMESTAMP.8e723334bf", "test.optimism_models.not_null_silver__velodrome_staking_actions_CONTRACT_ADDRESS.5060042aa5", "test.optimism_models.not_null_silver__velodrome_staking_actions_EVENT_INDEX.7bbd8665ee", "test.optimism_models.not_null_silver__velodrome_staking_actions_GAUGE_ADDRESS.822c043f4b", "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS.be5b83938f", "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT.ac462781e1", "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS.cd1ca51e37", "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE.d7259bf014", "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS.a6dffcce13", "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_ADDRESS.6efec8b758", "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_NAME.20d0d74174", "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_TYPE.caf8f6eeb0", "test.optimism_models.not_null_silver__velodrome_staking_actions_STAKING_ACTION_TYPE.a44cdbdfba", "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_ADDRESS.e46e2b741a", "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_SYMBOL.1252a25607", "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_ADDRESS.22ca55005d", "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_SYMBOL.8fda729d80", "test.optimism_models.not_null_silver__velodrome_staking_actions_TX_HASH.e89122421a", "test.optimism_models.not_null_silver__velodrome_staking_actions__INSERTED_TIMESTAMP.77cd94f1b7"], "model.optimism_models.velodrome__ez_lp_actions": [], "model.optimism_models.velodrome__ez_velo_locks": [], "model.optimism_models.core__ez_nft_sales": [], "model.optimism_models.core__ez_eth_transfers": [], "model.optimism_models.core__fact_token_transfers": [], "model.optimism_models.core__fact_hourly_token_prices": [], "model.optimism_models.core__fact_traces": [], "model.optimism_models.core__dim_dates": [], "model.optimism_models.core__fact_event_logs": [], "model.optimism_models.core__fact_delegations": ["test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_NUMBER.27c35072bf", "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_TIMESTAMP.df02526938", "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATION_TYPE.4b72476460", "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATOR.9274d7fda4", "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_FROM_DELEGATE.1dea18062b", "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_STATUS.f94fd1cdb0", "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TO_DELEGATE.71760508b8", "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TX_HASH.bba5c2eb6a"], "model.optimism_models.core__dim_contracts": ["model.optimism_models.silver__prices", "model.optimism_models.silver__velodrome_pools"], "model.optimism_models.core__dim_labels": ["test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__optimism.c6627e5379", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a", "test.optimism_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9", "test.optimism_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "test.optimism_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "test.optimism_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "test.optimism_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "test.optimism_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "test.optimism_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc"], "model.optimism_models.sushi__ez_swaps": ["test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__2.520a27875c", "test.optimism_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1", "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654", "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09", "test.optimism_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06", "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237", "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74", "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe", "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2", "test.optimism_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498", "test.optimism_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a", "test.optimism_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f"], "model.optimism_models.sushi__dim_dex_pools": ["model.optimism_models.sushi__ez_swaps", "model.optimism_models.sushi__ez_swaps", "model.optimism_models.sushi__ez_swaps", "model.optimism_models.sushi__ez_swaps"], "test.optimism_models.test_silver__transactions_tx_gap": [], "seed.optimism_models.bronze__sushi_dim_dex_pools": [], "seed.optimism_models.silver__velo_gauges_backfill": ["model.optimism_models.silver__velodrome_gauges"], "seed.optimism_models.silver__velo_tokens_backup": ["model.optimism_models.silver__prices", "model.optimism_models.silver__velodrome_pools"], "seed.optimism_models.silver__velo_pool_backfill": ["model.optimism_models.silver__velodrome_pools"], "seed.optimism_models.silver__contracts_backfill": ["model.optimism_models.core__dim_contracts"], "operation.optimism_models.optimism_models-on-run-start-0": [], "operation.optimism_models.optimism_models-on-run-start-1": [], "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_NUMBER.70f83df7ca": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_NUMBER__NUMBER__FLOAT.d5bc0fd646": [], "test.optimism_models.not_null_silver__quixotic_sales_BLOCK_TIMESTAMP.6a8c6a5e2b": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales_BLOCK_TIMESTAMP__day__1.d5189a899a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c57675bdd6": [], "test.optimism_models.not_null_silver__quixotic_sales_TX_HASH.73d4776795": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_TX_HASH__0_xX_0_9a_fA_F_.864a57e1fc": [], "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_ADDRESS.b320c65317": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.b8e09a055d": [], "test.optimism_models.not_null_silver__quixotic_sales_PLATFORM_NAME.4f669cf98f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_PLATFORM_NAME__quixotic.c11519c9fc": [], "test.optimism_models.not_null_silver__quixotic_sales_SELLER_ADDRESS.0c5df1a76d": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.e027e64844": [], "test.optimism_models.not_null_silver__quixotic_sales_BUYER_ADDRESS.0acf1d3921": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.8a823ec7b8": [], "test.optimism_models.not_null_silver__quixotic_sales_NFT_ADDRESS.03d9666022": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.fb674f9114": [], "test.optimism_models.not_null_silver__quixotic_sales_TOKENID.62dfe07e06": [], "test.optimism_models.not_null_silver__quixotic_sales_CURRENCY_ADDRESS.8bb2544e69": [], "test.optimism_models.not_null_silver__quixotic_sales_PRICE.4dfbfe1d9a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE__NUMBER__FLOAT.89e9d65183": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales_PRICE_USD__NUMBER__FLOAT.082a0b81ca": [], "test.optimism_models.not_null_silver__quixotic_sales__INSERTED_TIMESTAMP.f67ee5b673": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__quixotic_sales__INSERTED_TIMESTAMP__day__1.95964877e9": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__quixotic_sales__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.e4335684a7": [], "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FROM_ADDRESS.4c7061f7be": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3508543092": [], "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_TO_ADDRESS.bf4d5ee339": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4e70413fbf": [], "test.optimism_models.not_null_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE.c625f03712": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__quixotic_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.69cb94d5e6": [], "test.optimism_models.not_null_silver__quixotic_sales_EVENT_TYPE.43592e3da0": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__quixotic_sales_EVENT_TYPE__bid_won__sale.3b9573950f": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__quixotic_sales__log_id.de4afadaef": [], "test.optimism_models.not_null_silver__delegations_BLOCK_NUMBER.9e98d78e82": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_NUMBER__NUMBER__FLOAT.6df66f7c87": [], "test.optimism_models.not_null_silver__delegations_BLOCK_TIMESTAMP.35dd022b83": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__delegations_BLOCK_TIMESTAMP__day__1.08b9fccdc2": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ca31b3721": [], "test.optimism_models.not_null_silver__delegations_TX_HASH.c9a8e85892": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TX_HASH__0_xX_0_9a_fA_F_.7dbf3786bf": [], "test.optimism_models.not_null_silver__delegations_STATUS.8316771be1": [], "test.optimism_models.not_null_silver__delegations_DELEGATOR.72a15524b0": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_DELEGATOR__0_xX_0_9a_fA_F_.432cc57b32": [], "test.optimism_models.not_null_silver__delegations_TO_DELEGATE.564317e0d5": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_TO_DELEGATE__0_xX_0_9a_fA_F_.0bcad7e027": [], "test.optimism_models.not_null_silver__delegations_FROM_DELEGATE.22fab527f0": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__delegations_FROM_DELEGATE__0_xX_0_9a_fA_F_.33f77eec0c": [], "test.optimism_models.not_null_silver__delegations_DELEGATION_TYPE.758fb43fca": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__delegations_DELEGATION_TYPE__First_Time_Delegator__First_Time_Delegator_Self_Delegation__Self_Delegation__Re_Delegation.d93a91975f": [], "test.optimism_models.not_null_silver__delegations__INSERTED_TIMESTAMP.02ca6a9b60": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__delegations__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8ecbad1539": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__delegations_TX_HASH.2612691b94": [], "test.optimism_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432": [], "test.optimism_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3": [], "test.optimism_models.not_null_silver__logs_TX_HASH.18b09ee14d": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6": [], "test.optimism_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178": [], "test.optimism_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237": [], "test.optimism_models.not_null_silver__logs_TOPICS.f042e94d85": [], "test.optimism_models.not_null_silver__logs_DATA.c5fac5c4a4": [], "test.optimism_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0": [], "test.optimism_models.not_null_silver__logs__LOG_ID.8c3f196b2a": [], "test.optimism_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17": [], "test.optimism_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd": [], "test.optimism_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a": [], "test.optimism_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6": [], "test.optimism_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044": [], "test.optimism_models.not_null_silver__traces_TX_HASH.ccbdeb5e91": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b": [], "test.optimism_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e": [], "test.optimism_models.not_null_silver__traces_IDENTIFIER.ee73127ec0": [], "test.optimism_models.not_null_silver__traces_ETH_VALUE.c271895d72": [], "test.optimism_models.not_null_silver__traces_GAS.53d7bbcf6a": [], "test.optimism_models.not_null_silver__traces_GAS_USED.eb9bf97ca1": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a": [], "test.optimism_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94": [], "test.optimism_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": [], "test.optimism_models.not_null_silver__transfers_TX_HASH.9444c39bdc": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1": [], "test.optimism_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed": [], "test.optimism_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084": [], "test.optimism_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6": [], "test.optimism_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e": [], "test.optimism_models.not_null_silver__transfers__LOG_ID.29bb073a40": [], "test.optimism_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732": [], "test.optimism_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_HOUR__day__1.4eaeec6525": [], "test.optimism_models.not_null_silver__prices_PRICE.09dcf418d9": [], "test.optimism_models.not_null_silver__prices_TOKEN_ADDRESS.88e8e36eb7": [], "test.optimism_models.not_null_silver__prices_SYMBOL.1202ffaafb": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__prices_HOUR__TOKEN_ADDRESS.81be2f1610": [], "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_NUMBER.d17e3300f5": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_NUMBER__NUMBER__FLOAT.95ae3b4ebb": [], "test.optimism_models.not_null_silver__velodrome_votes_BLOCK_TIMESTAMP.5064d85700": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes_BLOCK_TIMESTAMP__day__1.7abc261f64": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ddc69ebd9": [], "test.optimism_models.not_null_silver__velodrome_votes_TX_HASH.ea782b936f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_TX_HASH__0_xX_0_9a_fA_F_.f2181aeccc": [], "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE.34fb7206f3": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.5aa7c03bb2": [], "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_FROM_ADDRESS.ac4015265a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.b240acd078": [], "test.optimism_models.not_null_silver__velodrome_votes_ORIGIN_TO_ADDRESS.f80609c528": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.4cf19b01c1": [], "test.optimism_models.not_null_silver__velodrome_votes_GAUGE_ADDRESS.f4e37b3299": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.b3a9d2fb21": [], "test.optimism_models.not_null_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS.d72bac0566": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.80c8df0851": [], "test.optimism_models.not_null_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS.5ddfa8b438": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.5045a7c004": [], "test.optimism_models.not_null_silver__velodrome_votes_POOL_ADDRESS.b3deb110eb": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_POOL_ADDRESS__0_xX_0_9a_fA_F_.26bc1d2bb8": [], "test.optimism_models.not_null_silver__velodrome_votes_POOL_NAME.5b3dbc180f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_POOL_NAME__STRING__VARCHAR.6f0b909e53": [], "test.optimism_models.not_null_silver__velodrome_votes_FROM_ADDRESS.032c3f8bac": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_votes_FROM_ADDRESS__0_xX_0_9a_fA_F_.e41cb331b6": [], "test.optimism_models.not_null_silver__velodrome_votes_TOKEN_ID.960e2f017a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_TOKEN_ID__FLOAT__NUMBER.5cb13a6161": [], "test.optimism_models.not_null_silver__velodrome_votes_VOTE_AMOUNT.78cf4c6dcb": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_AMOUNT__FLOAT__NUMBER.c7aeda3803": [], "test.optimism_models.not_null_silver__velodrome_votes_VOTE_ACTION.24dfa35add": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes_VOTE_ACTION__STRING__VARCHAR.8e15743fa5": [], "test.optimism_models.not_null_silver__velodrome_votes__INSERTED_TIMESTAMP.0837416a25": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_votes__INSERTED_TIMESTAMP__day__1.8b45a70e4f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_votes__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.8bac0c2d50": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_votes__log_id.8be8eccea7": [], "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_NUMBER.e8df9c6e4b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_NUMBER__NUMBER__FLOAT.46b48a749f": [], "test.optimism_models.not_null_silver__velodrome_swaps_BLOCK_TIMESTAMP.e3e77a703d": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps_BLOCK_TIMESTAMP__day__1.81893be36d": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0aefbd7419": [], "test.optimism_models.not_null_silver__velodrome_swaps_TX_HASH.f9411778f6": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TX_HASH__0_xX_0_9a_fA_F_.e02f06e3c5": [], "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FUNCTION_SIGNATURE.a4fd66528f": [], "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS.927461b93a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c470cb8ae4": [], "test.optimism_models.not_null_silver__velodrome_swaps_ORIGIN_TO_ADDRESS.718a3d0724": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d19844470c": [], "test.optimism_models.not_null_silver__velodrome_swaps_CONTRACT_ADDRESS.9492333191": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.a31fdba461": [], "test.optimism_models.not_null_silver__velodrome_swaps_POOL_ADDRESS.b7f8a1f0df": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.36f7e2cdb0": [], "test.optimism_models.not_null_silver__velodrome_swaps_EVENT_INDEX.ded8be8ef9": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_EVENT_INDEX__NUMBER__FLOAT.33a5411d6d": [], "test.optimism_models.not_null_silver__velodrome_swaps_POOL_NAME.dbfc07b184": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_POOL_NAME__STRING__VARCHAR.8a3bdf2656": [], "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_IN.78c1f72d43": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_IN__FLOAT__NUMBER.bb6566c5da": [], "test.optimism_models.not_null_silver__velodrome_swaps_AMOUNT_OUT.0ef7186ec5": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_AMOUNT_OUT__FLOAT__NUMBER.a6be3a5b60": [], "test.optimism_models.not_null_silver__velodrome_swaps_SENDER_ADDRESS.79cfd325b1": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_SENDER_ADDRESS__0_xX_0_9a_fA_F_.6448e66b13": [], "test.optimism_models.not_null_silver__velodrome_swaps_TO_ADDRESS.558be35c08": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TO_ADDRESS__0_xX_0_9a_fA_F_.926fec60ca": [], "test.optimism_models.not_null_silver__velodrome_swaps_PLATFORM.faaf662fa3": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_PLATFORM__STRING__VARCHAR.ca106130da": [], "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_IN.da702ffd72": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_IN__STRING__VARCHAR.10f3f47599": [], "test.optimism_models.not_null_silver__velodrome_swaps_SYMBOL_OUT.f1b9a3cc2c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_SYMBOL_OUT__STRING__VARCHAR.2f1b3dc3ae": [], "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_IN.9fc512660f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_IN__NUMBER__FLOAT.3dc13b2012": [], "test.optimism_models.not_null_silver__velodrome_swaps_DECIMALS_OUT.060ebf71e5": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_DECIMALS_OUT__NUMBER__FLOAT.1a1ac75514": [], "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN0_SYMBOL.847de78afa": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN0_SYMBOL__STRING__VARCHAR.fe785554ed": [], "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN1_SYMBOL.739ac5c900": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_TOKEN1_SYMBOL__STRING__VARCHAR.d5652f71d9": [], "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_IN.e56286904c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_IN__0_xX_0_9a_fA_F_.b221684840": [], "test.optimism_models.not_null_silver__velodrome_swaps_TOKEN_ADDRESS_OUT.924b20aec3": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_TOKEN_ADDRESS_OUT__0_xX_0_9a_fA_F_.f6e8e74317": [], "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE.c114b84530": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE__NUMBER__FLOAT.ee486d300f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps_LP_FEE_SYMBOL__STRING__VARCHAR.0d643a6936": [], "test.optimism_models.not_null_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS.f0080516be": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_swaps_LP_FEE_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.bfd23ef096": [], "test.optimism_models.not_null_silver__velodrome_swaps__INSERTED_TIMESTAMP.18fef846e1": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_swaps__INSERTED_TIMESTAMP__day__1.0a1fcbc4be": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_swaps__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3a0f72f5bb": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_swaps__log_id.9690b8bd9d": [], "test.optimism_models.not_null_silver__velodrome_pools_POOL_ADDRESS.b22263023f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_POOL_ADDRESS__0_xX_0_9a_fA_F_.a6f5b5b5ac": [], "test.optimism_models.not_null_silver__velodrome_pools_POOL_NAME.1464154d9c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_NAME__STRING__VARCHAR.9f0deccdb3": [], "test.optimism_models.not_null_silver__velodrome_pools_POOL_TYPE.27d8a09174": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_POOL_TYPE__STRING__VARCHAR.ef989feef8": [], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_ADDRESS.a068a4c7ed": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.b2b7cfc620": [], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_ADDRESS.073866a28b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_pools_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.2d505d5f45": [], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_SYMBOL.a9b216cc08": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_SYMBOL__STRING__VARCHAR.479c7ce2c3": [], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_SYMBOL.67a2956e58": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_SYMBOL__STRING__VARCHAR.cf92832817": [], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN1_DECIMALS.87a6bcda86": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN1_DECIMALS__NUMBER__FLOAT.45542d1c45": [], "test.optimism_models.not_null_silver__velodrome_pools_TOKEN0_DECIMALS.122edf1b2e": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools_TOKEN0_DECIMALS__NUMBER__FLOAT.a90243ee3a": [], "test.optimism_models.not_null_silver__velodrome_pools__INSERTED_TIMESTAMP.3c2661f0f6": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_pools__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a3b1910422": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_pools_POOL_ADDRESS.3673c0019a": [], "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_NUMBER.db66882206": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_NUMBER__NUMBER__FLOAT.075f69b847": [], "test.optimism_models.not_null_silver__velodrome_gauges_BLOCK_TIMESTAMP.c0310ba7e8": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d04a8b81e6": [], "test.optimism_models.not_null_silver__velodrome_gauges_TX_HASH.e188fd7277": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TX_HASH__0_xX_0_9a_fA_F_.da4b324b57": [], "test.optimism_models.not_null_silver__velodrome_gauges_EVENT_INDEX.847db96e41": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_EVENT_INDEX__NUMBER__FLOAT.afee298092": [], "test.optimism_models.not_null_silver__velodrome_gauges_CONTRACT_ADDRESS.d7c0ffcf81": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.dc13300f69": [], "test.optimism_models.not_null_silver__velodrome_gauges_GAUGE_ADDRESS.c3c33a8921": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.28282e04c0": [], "test.optimism_models.not_null_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS.b10eb9d144": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_EXTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.7f3467ff74": [], "test.optimism_models.not_null_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS.4f825859d9": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_INTERNAL_BRIBE_ADDRESS__0_xX_0_9a_fA_F_.634c71699a": [], "test.optimism_models.not_null_silver__velodrome_gauges_CREATOR_ADDRESS.94c9fafe0b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.dc68a13b64": [], "test.optimism_models.not_null_silver__velodrome_gauges_POOL_ADDRESS.62e1712c02": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_POOL_ADDRESS__0_xX_0_9a_fA_F_.d5d5aa33ba": [], "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_ADDRESS.dffed249fe": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.ebc0a56334": [], "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_ADDRESS.ca236f2308": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_gauges_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.d9319cb22a": [], "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN0_SYMBOL.11b915fd71": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN0_SYMBOL__STRING__VARCHAR.c08774a1b6": [], "test.optimism_models.not_null_silver__velodrome_gauges_TOKEN1_SYMBOL.8f042bb9ad": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_TOKEN1_SYMBOL__STRING__VARCHAR.c4793d4319": [], "test.optimism_models.not_null_silver__velodrome_gauges_POOL_NAME.316bb0ab2b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges_POOL_NAME__STRING__VARCHAR.500a13b310": [], "test.optimism_models.not_null_silver__velodrome_gauges__INSERTED_TIMESTAMP.d1161c3d84": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_gauges__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9ee131e5c7": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_gauges_GAUGE_ADDRESS.931f433d89": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_NUMBER.867112395c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_NUMBER__NUMBER__FLOAT.5077382b71": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP.273af3e478": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__day__1.0f2adaafec": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.494792a80e": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TX_HASH.740d98d451": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TX_HASH__0_xX_0_9a_fA_F_.768035d13e": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE.76fbc99ec2": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.51142a4ab8": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS.5f39a9634a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.693727d4bc": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS.c497aefd3c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.01580727be": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS.f1a269cb7b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.96b1f8942b": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_EVENT_INDEX.e0ddce03fe": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_EVENT_INDEX__NUMBER__FLOAT.967b32b024": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_REWARD_TYPE.4be428306d": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__velodrome_claimed_rewards_REWARD_TYPE__venft_distribution__lp_reward__voter_reward.522f29f356": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ID.f6b162d6e5": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_ID__NUMBER__FLOAT.354aca98a0": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT.909a3ff4d6": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIMED_AMOUNT__NUMBER__FLOAT.f22caa5247": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_TOKEN_SYMBOL__STRING__VARCHAR.7f4548e2c3": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_TOKEN_ADDRESS.6951c79e87": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_claimed_rewards_TOKEN_ADDRESS__0_xX_0_9a_fA_F_.d279fceb6d": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_CLAIM_EPOCH.a84dfaafe7": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_CLAIM_EPOCH__NUMBER__FLOAT.16a8a49ba0": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards_MAX_EPOCH.1e9e5275e4": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards_MAX_EPOCH__NUMBER__FLOAT.bfa0081e38": [], "test.optimism_models.not_null_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP.6b00d1c03b": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__day__1.dfba6825cc": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_claimed_rewards__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0162275e37": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_claimed_rewards__log_id.9041f8ac5c": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_NUMBER.0c8d62348b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_NUMBER__NUMBER__FLOAT.01b32d6d97": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_BLOCK_TIMESTAMP.17262e258e": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__day__1.d4491742bb": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.fc7bcab5bc": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_TX_HASH.61c8cd66de": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TX_HASH__0_xX_0_9a_fA_F_.f498ec7f97": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE.5926b88f99": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.0c6e7ce360": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS.870b67eafa": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.338045b848": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS.1812f59ae9": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.93de5e2c54": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_ADDRESS.c301aacd27": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.8d522d3a86": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_EVENT_INDEX.83a7d6cda9": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_EVENT_INDEX__NUMBER__FLOAT.f4fcf2e44a": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_NAME.17ee6c9396": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_NAME__STRING__VARCHAR.66185f625f": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_POOL_TYPE.cf35baf138": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_POOL_TYPE__STRING__VARCHAR.c8d0c45b32": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_SENDER_ADDRESS.a90cf18f0d": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_SENDER_ADDRESS__0_xX_0_9a_fA_F_.41c53b96ae": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_ACTION.1642313e2b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_ACTION__STRING__VARCHAR.0d0cc79321": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_SYMBOL.ccc899f706": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_SYMBOL__STRING__VARCHAR.1281795ed3": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_SYMBOL.6a7a4492c8": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_SYMBOL__STRING__VARCHAR.cf591ca414": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_AMOUNT.258a084613": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN0_AMOUNT__NUMBER__FLOAT.cec7460a83": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_AMOUNT.f7ae01ab06": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_TOKEN1_AMOUNT__NUMBER__FLOAT.9de4830e55": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN0_ADDRESS.4d145705b6": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.7783e3c07c": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_TOKEN1_ADDRESS.de0b5c759e": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_LP_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.8ac6a05161": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_ACTION.46c749b81c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_ACTION__STRING__VARCHAR.dcdab855bc": [], "test.optimism_models.not_null_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT.8c59651af4": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.6e77152a60": [], "test.optimism_models.not_null_silver__velodrome_LP_actions__INSERTED_TIMESTAMP.9227acd465": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__day__1.4e5ebafba5": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_LP_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.0c422d391e": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_LP_actions__log_id.ccd2557d22": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_NUMBER.5d644db8af": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_NUMBER__NUMBER__FLOAT.1a3e7436d3": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_BLOCK_TIMESTAMP.8e723334bf": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__day__1.0721745b42": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.d7899fefa5": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_TX_HASH.e89122421a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TX_HASH__0_xX_0_9a_fA_F_.56b7e8cea4": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE.d7259bf014": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.68aca2d8a1": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS.cd1ca51e37": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.568834eac9": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS.a6dffcce13": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.b4b6ee55f2": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_CONTRACT_ADDRESS.5060042aa5": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.042ba630d4": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_ADDRESS.6efec8b758": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_POOL_ADDRESS__0_xX_0_9a_fA_F_.fe271b790b": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_EVENT_INDEX.7bbd8665ee": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_EVENT_INDEX__NUMBER__FLOAT.52570d7dea": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_NAME.20d0d74174": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_NAME__STRING__VARCHAR.1b4e1f666e": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_STAKING_ACTION_TYPE.a44cdbdfba": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_STAKING_ACTION_TYPE__STRING__VARCHAR.82f2f657ef": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_GAUGE_ADDRESS.822c043f4b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_GAUGE_ADDRESS__0_xX_0_9a_fA_F_.94eb0e3622": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS.be5b83938f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_LP_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.519ae0b0d0": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_POOL_TYPE.caf8f6eeb0": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_POOL_TYPE__STRING__VARCHAR.83867f6bef": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_SYMBOL.1252a25607": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN0_SYMBOL__STRING__VARCHAR.318363932f": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_SYMBOL.8fda729d80": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_TOKEN1_SYMBOL__STRING__VARCHAR.663e12acf5": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN0_ADDRESS.e46e2b741a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN0_ADDRESS__0_xX_0_9a_fA_F_.0262973027": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_TOKEN1_ADDRESS.22ca55005d": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_staking_actions_TOKEN1_ADDRESS__0_xX_0_9a_fA_F_.1e893df11f": [], "test.optimism_models.not_null_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT.ac462781e1": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions_LP_TOKEN_AMOUNT__NUMBER__FLOAT.61378c0c21": [], "test.optimism_models.not_null_silver__velodrome_staking_actions__INSERTED_TIMESTAMP.77cd94f1b7": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__day__1.b66fdd5dd3": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_staking_actions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.57a30bac81": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_staking_actions__log_id.23bbcb6b7d": [], "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_NUMBER.fce42abee7": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_NUMBER__NUMBER__FLOAT.6cacb87aaf": [], "test.optimism_models.not_null_silver__velodrome_locks_BLOCK_TIMESTAMP.33067b06c5": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks_BLOCK_TIMESTAMP__day__1.f1c5543e48": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7752a3b106": [], "test.optimism_models.not_null_silver__velodrome_locks_TX_HASH.084e4f7b57": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_TX_HASH__0_xX_0_9a_fA_F_.183f6aca6a": [], "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE.d7800eb549": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.271c91a167": [], "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_FROM_ADDRESS.49486480b8": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.26b9e6ed2a": [], "test.optimism_models.not_null_silver__velodrome_locks_ORIGIN_TO_ADDRESS.ebd6287a9e": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.7cdb369b98": [], "test.optimism_models.not_null_silver__velodrome_locks_CONTRACT_ADDRESS.2a193b069a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.43c3bc7c46": [], "test.optimism_models.not_null_silver__velodrome_locks_EVENT_INDEX.c1312792ea": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_EVENT_INDEX__NUMBER__FLOAT.eec681dada": [], "test.optimism_models.not_null_silver__velodrome_locks_PROVIDER_ADDRESS.60796cd227": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__velodrome_locks_PROVIDER_ADDRESS__0_xX_0_9a_fA_F_.110964f397": [], "test.optimism_models.not_null_silver__velodrome_locks_UNLOCK_DATE.87f0105e03": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_UNLOCK_DATE__TIMESTAMP_NTZ.e8b79c9e6a": [], "test.optimism_models.not_null_silver__velodrome_locks_TOKEN_ID.2f7a97d9ac": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_TOKEN_ID__NUMBER__FLOAT.8719148378": [], "test.optimism_models.not_null_silver__velodrome_locks_VELO_AMOUNT.171291a904": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT__NUMBER__FLOAT.2b3c2c5ed1": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks_VELO_AMOUNT_USD__NUMBER__FLOAT.185e474abd": [], "test.optimism_models.not_null_silver__velodrome_locks_DEPOSIT_TYPE.76ebbffe73": [], "test.optimism_models.not_null_silver__velodrome_locks__INSERTED_TIMESTAMP.64baa36766": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__velodrome_locks__INSERTED_TIMESTAMP__day__1.e5390e0fcc": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__velodrome_locks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.01cf76bd68": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__velodrome_locks__log_id.9259e4ec8a": [], "test.optimism_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__optimism.c6627e5379": [], "test.optimism_models.not_null_core__dim_labels_CREATOR.0c77d5749c": [], "test.optimism_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1": [], "test.optimism_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947": [], "test.optimism_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5": [], "test.optimism_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9": [], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_NUMBER.27c35072bf": [], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_BLOCK_TIMESTAMP.df02526938": [], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TX_HASH.bba5c2eb6a": [], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_STATUS.f94fd1cdb0": [], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATOR.9274d7fda4": [], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_TO_DELEGATE.71760508b8": [], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_FROM_DELEGATE.1dea18062b": [], "test.optimism_models.dbt_expectations_expect_column_to_exist_core__fact_delegations_DELEGATION_TYPE.4b72476460": [], "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de": [], "test.optimism_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__2.520a27875c": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178": [], "test.optimism_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c": [], "test.optimism_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981": [], "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071": [], "test.optimism_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c": [], "test.optimism_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2": [], "test.optimism_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f": [], "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74": [], "test.optimism_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1": [], "model.optimism_models.bronze__submission_hashes": ["model.optimism_models.core__fact_l1_submissions", "model.optimism_models.silver__blocks", "model.optimism_models.silver__transactions"], "model.optimism_models.bronze__state_hashes": ["model.optimism_models.core__fact_l1_state_root_submissions", "model.optimism_models.silver__blocks", "model.optimism_models.silver__transactions"], "model.optimism_models.core__fact_l1_state_root_submissions": [], "model.optimism_models.core__fact_l1_submissions": [], "model.optimism_models.core__fact_transactions": [], "model.optimism_models.core__fact_blocks": [], "model.optimism_models.silver__transactions": ["model.optimism_models.core__ez_eth_transfers", "model.optimism_models.core__fact_transactions", "model.optimism_models.silver__delegations", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6", "test.optimism_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5", "test.optimism_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0", "test.optimism_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "test.optimism_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f", "test.optimism_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c", "test.optimism_models.not_null_silver__transactions_FROM_ADDRESS.002109da43", "test.optimism_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228", "test.optimism_models.not_null_silver__transactions_GAS_PRICE.9ee195e584", "test.optimism_models.not_null_silver__transactions_GAS_USED.1c943486c0", "test.optimism_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "test.optimism_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1", "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_BATCH_INDEX.d699a79eb7", "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_TX_HASH.bdc6c0317a", "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_BATCH_INDEX.7393916169", "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_TX_HASH.752daa2372", "test.optimism_models.not_null_silver__transactions_NONCE.3eac435cf9", "test.optimism_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68", "test.optimism_models.not_null_silver__transactions_POSITION.6be7c293c7", "test.optimism_models.not_null_silver__transactions_STATUS.42a484ef7a", "test.optimism_models.not_null_silver__transactions_TX_FEE.f2f0cdc085", "test.optimism_models.not_null_silver__transactions_TX_HASH.8a2cc32062", "test.optimism_models.not_null_silver__transactions_TX_JSON.c989b71e6a", "test.optimism_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e", "test.optimism_models.test_silver__transactions_tx_gap"], "test.optimism_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615": [], "test.optimism_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": [], "test.optimism_models.not_null_silver__transactions_TX_HASH.8a2cc32062": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6": [], "test.optimism_models.not_null_silver__transactions_NONCE.3eac435cf9": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00": [], "test.optimism_models.not_null_silver__transactions_POSITION.6be7c293c7": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f": [], "test.optimism_models.not_null_silver__transactions_FROM_ADDRESS.002109da43": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190": [], "test.optimism_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c": [], "test.optimism_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31": [], "test.optimism_models.not_null_silver__transactions_GAS_PRICE.9ee195e584": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632": [], "test.optimism_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228": [], "test.optimism_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1": [], "test.optimism_models.not_null_silver__transactions_STATUS.42a484ef7a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34": [], "test.optimism_models.not_null_silver__transactions_GAS_USED.1c943486c0": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": [], "test.optimism_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689": [], "test.optimism_models.not_null_silver__transactions_TX_FEE.f2f0cdc085": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801": [], "test.optimism_models.not_null_silver__transactions_TX_JSON.c989b71e6a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec": [], "test.optimism_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55": [], "test.optimism_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68": [], "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_TX_HASH.bdc6c0317a": [], "test.optimism_models.not_null_silver__transactions_L1_STATE_ROOT_BATCH_INDEX.d699a79eb7": [], "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_BATCH_INDEX.7393916169": [], "test.optimism_models.not_null_silver__transactions_L1_SUBMISSION_TX_HASH.752daa2372": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": [], "test.optimism_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e": [], "model.optimism_models.silver__blocks": ["model.optimism_models.core__fact_blocks", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40", "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30", "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922", "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca", "test.optimism_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96", "test.optimism_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b", "test.optimism_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97", "test.optimism_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.optimism_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310", "test.optimism_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea", "test.optimism_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7", "test.optimism_models.not_null_silver__blocks_GAS_USED.637b37099a", "test.optimism_models.not_null_silver__blocks_HASH.bc44a39f94", "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_BATCH_INDEX.7d230d0c88", "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_TX_HASH.42129f75a7", "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_BATCH_INDEX.673eec8966", "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_TX_HASH.c5a7efc29c", "test.optimism_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "test.optimism_models.not_null_silver__blocks_PARENT_HASH.a17a399346", "test.optimism_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f", "test.optimism_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e", "test.optimism_models.not_null_silver__blocks_SIZE.f1fa8f466b", "test.optimism_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9", "test.optimism_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "test.optimism_models.test_silver__transactions_tx_gap", "test.optimism_models.test_silver__transactions_tx_gap"], "test.optimism_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c": [], "test.optimism_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.optimism_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": [], "test.optimism_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd": [], "test.optimism_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd": [], "test.optimism_models.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": [], "test.optimism_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c": [], "test.optimism_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40": [], "test.optimism_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea": [], "test.optimism_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d": [], "test.optimism_models.not_null_silver__blocks_GAS_USED.637b37099a": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f": [], "test.optimism_models.not_null_silver__blocks_HASH.bc44a39f94": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca": [], "test.optimism_models.not_null_silver__blocks_PARENT_HASH.a17a399346": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16": [], "test.optimism_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30": [], "test.optimism_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e": [], "test.optimism_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922": [], "test.optimism_models.not_null_silver__blocks_SIZE.f1fa8f466b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982": [], "test.optimism_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b": [], "test.optimism_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28": [], "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_TX_HASH.42129f75a7": [], "test.optimism_models.not_null_silver__blocks_L1_STATE_ROOT_BATCH_INDEX.7d230d0c88": [], "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_BATCH_INDEX.673eec8966": [], "test.optimism_models.not_null_silver__blocks_L1_SUBMISSION_TX_HASH.c5a7efc29c": [], "test.optimism_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca": [], "source.optimism_models.prod.optimism_blocks": ["model.optimism_models.bronze__blocks"], "source.optimism_models.prod.optimism_txs": ["model.optimism_models.bronze__transactions"], "source.optimism_models.crosschain.address_labels": ["model.optimism_models.core__dim_labels"], "source.optimism_models.ethereum.fact_hourly_token_prices": ["model.optimism_models.core__ez_eth_transfers", "model.optimism_models.silver__prices"], "source.optimism_models.shared.prices_v2": [], "source.optimism_models.shared.market_asset_metadata": [], "source.optimism_models.legacy_silver.hours": ["model.optimism_models.silver__prices"], "source.optimism_models.legacy_silver.market_asset_metadata": ["model.optimism_models.silver__prices"], "source.optimism_models.legacy_silver.prices_v2": ["model.optimism_models.silver__prices"], "source.optimism_models.optimism_pools.SUSHI_DIM_DEX_POOLS": ["model.optimism_models.sushi__dim_dex_pools"], "source.optimism_models.prices.prices_v2": ["model.optimism_models.sushi__ez_swaps"], "source.optimism_models.ethereum_silver.optimism_state_hashes": ["model.optimism_models.bronze__state_hashes"], "source.optimism_models.ethereum_silver.optimism_submission_hashes": ["model.optimism_models.bronze__submission_hashes"]}}